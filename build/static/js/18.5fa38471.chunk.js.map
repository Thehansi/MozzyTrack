{"version":3,"sources":["App/components/MainCard.js","Forms/Branch/Create-Branch.jsx"],"names":["MainCard","state","isOption","props","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","this","className","alignRight","Toggle","id","Menu","as","Item","onClick","prevState","href","DEMO","BLANK_LINK","Header","Title","title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","in","Body","backgroundColor","children","Component","Branch","FormRef","useRef","useState","isAdd","setISAdd","isView","setIsView","isEdit","setISEdit","rowIndex","setRowIndex","updateRow","setUpdateRow","userName","setUserName","useEffect","setDetails","authData","JSON","parse","localStorage","getItem","axios","get","params","UsersID","UserName","MenuID","checkAuthentication","data","length","UserView","then","response","console","log","branches","catch","error","Swal","fire","icon","text","confirmButtonColor","confirmButtonText","UserAdd","UserEdit","jForm","BranchCode","Discription","Active","viewBranchCode","LoadPanelVisible","ListViewing","GroupTable","jSetForm","boolValue","fvdfv","FormLayout","current","instance","OnNotification","message","type","notify","displayTime","at","offset","OnSaveValidation","validate","isValid","focusTextBox","useCallback","editor","getEditor","focus","ref","formData","colCount","dataField","editorOptions","maxLength","readOnly","editorType","variant","e","isUpdate","branch_exists","post","branch","stringify","UserID","res","newBranch","oldBranch","groups","window","location","reload","disabled","dataSource","showBorders","wordWrapEnabled","allowSearch","selection","mode","hoverStateEnabled","onCellDblClick","setTimeout","visible","defaultPageSize","caption","dataType"],"mappings":";sPAcMA,E,4MACJC,MAAQ,CACNC,SAAU,EAAKC,MAAMD,SACrBE,UAAU,EACVC,cAAc,EACdC,UAAU,EACVC,YAAY,G,EAGdC,kBAAoB,WAClB,EAAKC,SAAS,CAAEH,UAAU,IAC1BI,aAAY,WACV,EAAKD,SAAS,CAAEH,UAAU,MACzB,M,EAGLK,kBAAoB,WAClB,EAAKF,SAAS,CAAEF,YAAY,K,4CAG9B,WAAU,IACJK,EAAiBC,EAAQC,EAAiBC,EAC1CC,EAFG,OAGHC,EAAY,GA4HhB,OA1HIC,KAAKjB,MAAMC,WACbY,EACE,yBAAKK,UAAU,qBACb,kBAAC,IAAD,CAAUC,YAAY,EAAMD,UAAU,yBACpC,kBAAC,IAASE,OAAV,CAAiBC,GAAG,iBAAiBH,UAAU,YAC7C,uBAAGA,UAAU,kCAEf,kBAAC,IAASI,KAAV,CAAeC,GAAG,KAAKL,UAAU,6BAC/B,kBAAC,IAASM,KAAV,CACED,GAAG,KACHL,UAAU,gBACVO,QAAS,WACP,EAAKjB,UAAS,SAACkB,GACb,MAAO,CAAEvB,UAAWuB,EAAUvB,eAIlC,uBACEe,UACED,KAAKjB,MAAMG,SACP,wBACA,0BAGR,uBAAGwB,KAAMC,IAAKC,YACX,IACAZ,KAAKjB,MAAMG,SAAW,UAAY,WAAY,MAGnD,kBAAC,IAASqB,KAAV,CACED,GAAG,KACHL,UAAU,gBACVO,QAAS,WACP,EAAKjB,UAAS,SAACkB,GACb,MAAO,CAAEtB,cAAesB,EAAUtB,mBAItC,uBACEc,UACED,KAAKjB,MAAMI,aACP,oBACA,uBAGR,uBAAGuB,KAAMC,IAAKC,YACX,IACAZ,KAAKjB,MAAMI,aAAe,SAAW,WAAY,MAGtD,kBAAC,IAASoB,KAAV,CACED,GAAG,KACHL,UAAU,gBACVO,QAASR,KAAKV,mBAEd,uBAAGW,UAAU,4BACb,uBAAGS,KAAMC,IAAKC,YAAd,aAEF,kBAAC,IAASL,KAAV,CACED,GAAG,KACHL,UAAU,gBACVO,QAASR,KAAKP,mBAEd,uBAAGQ,UAAU,uBACb,uBAAGS,KAAMC,IAAKC,YAAd,iBAQZf,EACE,kBAAC,IAAKgB,OAAN,KACE,kBAAC,IAAKC,MAAN,CAAYR,GAAG,MAAMN,KAAKf,MAAM8B,OAC/BnB,GAIDI,KAAKjB,MAAMG,WACba,EAAS,sBAAOA,GAAP,CAAkB,cAC3BL,EAAkB,CAChBsB,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,MAAOpB,KAAKf,MAAMoC,YAClBC,OAAQtB,KAAKf,MAAMsC,eAInBvB,KAAKjB,MAAMK,WACbW,EAAS,sBAAOA,GAAP,CAAkB,cAC3BJ,EACE,yBAAKM,UAAU,eACb,uBAAGA,UAAU,8BAKfD,KAAKjB,MAAMM,aACbU,EAAS,sBAAOA,GAAP,CAAkB,YAGzBC,KAAKf,MAAMc,YACbA,EAAS,sBAAOA,GAAP,CAAkBC,KAAKf,MAAMc,aAGxCD,EACE,kBAAC,IAAD,CAAMG,UAAWF,EAAUyB,KAAK,KAAMC,MAAO/B,GAC1CG,EACD,kBAAC,IAAD,CAAU6B,IAAK1B,KAAKjB,MAAMI,cACxB,6BACE,kBAAC,IAAKwC,KAAN,CAAWF,MAAO,CAAEG,gBAAiB,uBAClC5B,KAAKf,MAAM4C,YAIjBlC,GAIE,kBAAC,IAAD,KAAMG,O,GAnJMgC,aAuJRhD,O,+jNC4KAiD,UA1TA,WAAO,IAAD,MACbC,EAAUC,iBAAO,MACvB,EAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4BJ,oBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAgCN,mBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAkCR,oBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KAEA,EAAgCV,mBAAS,IAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAU,6CAAG,6FACXC,EAAWC,KAAKC,MAAMC,aAAaC,QAAQ,SADhC,SAEiBC,IAAMC,IACtC,+BACA,CACEC,OAAQ,CAAEC,QAASR,EAASS,SAAUC,OAAQ,QALjC,OAEXC,EAFW,OAQjBd,EAAYG,EAASS,UACkB,GAAnCE,EAAoBC,KAAKC,SACvBF,EAAoBC,KAAK,GAAGE,WAC9BzB,GAAU,GACVgB,IACGC,IAAI,qBACJS,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAASJ,MACrBtE,GAAS,SAACkB,GAAD,mBAAC,eACLA,GADI,IAEP2D,SAAUH,EAASJ,aAGtBQ,OAAM,SAACC,GACNJ,QAAQI,MAAM,SAAUA,GACxBC,IAAKC,KAAK,CACRC,KAAM,QACN1D,MAAO,0CACP2D,KAAM,qCACNC,mBAAoB,OACpBC,kBAAmB,WAIvBhB,EAAoBC,KAAK,GAAGgB,SAC9BzC,GAAS,GAEPwB,EAAoBC,KAAK,GAAGiB,WAC9BZ,QAAQC,IAAI,OACZ3B,GAAU,KArCG,4CAAH,uBA0ChB,EAA0BN,mBAAS,CACjC6C,MAAO,CACLC,WAAY,GACZC,YAAa,GACbC,QAAQ,GAEVC,eAAgB,EAChBf,SAAU,GACVgB,kBAAkB,EAClBC,aAAa,EACbC,WAAY,GACZC,SAAU,GACVC,WAAW,EACXC,OAAO,IAbT,mBAAO1G,EAAP,KAAcQ,EAAd,KAgBMmG,EAAa1D,EAAQ2D,SAAW3D,EAAQ2D,QAAQC,SAahDC,EAAiB,SAACC,EAASC,GAC/BC,YAAO,CACLF,QAASA,EACTC,KAAMA,EACNE,YAAa,IACbjF,SAAU,CAAEkF,GAAI,YAAaC,OAAQ,SAInCC,EAAgB,6CAAG,iFACvBlC,QAAQC,IAAI,iBAAkBuB,EAAWW,WAAWC,SAC/CZ,EAAWW,WAAWC,QAFJ,uBAGrBT,EAAe,oCAAqC,SAH/B,mBAId,GAJc,iCAMhB,GANgB,4CAAH,uBAqIhBU,EAAeC,uBAAY,WAC/B,GAAIxE,EAAQ2D,QAAS,CACnB,IACMc,EADezE,EAAQ2D,QAAQC,SACTc,UAAU,eAClCD,GACFA,EAAOE,WAGV,IAEH,OACE,6BACE,kBAAC,IAAD,CAAM5F,MAAM,eACV,kBAAC,IAAD,CAEE6F,IAAK5E,EACL6E,SAAU9H,EAAMgG,OAEhB,kBAAC,IAAD,CAAW+B,SAAU,GACnB,kBAAC,IAAD,CACEC,UAAU,aACVC,cAAe,CACbC,UAAW,GACXC,SAAUnI,EAAMyG,YAGlB,kBAAC,IAAD,CAAcM,QAAQ,mBACtB,kBAAC,IAAD,CAAOpB,KAAK,iBAEd,kBAAC,IAAD,CAAMqC,UAAU,cAAcC,cAAe,IAC3C,kBAAC,IAAD,CAAclB,QAAQ,mBACtB,kBAAC,IAAD,CAAOpB,KAAK,iBAEd,kBAAC,IAAD,CACEqC,UAAU,SACVI,WAAW,aACXH,cAAe,OAIrB,6BAEA,kBAAC,IAAD,CAAQI,QAAQ,SACd,kBAAC,IAAD,CACEA,QAAQ,YACR3C,KAAK,sBACLjE,QA1KM,8CAAG,WAAO6G,GAAP,uFACPjB,IADO,kDAEQ9C,IAAMC,IAAI,uBAAwB,CACvDC,OAAQ,CAAEwB,WAAYjG,EAAMgG,MAAMC,cAHrB,OAETsC,EAFS,OAKX3E,EACoC,GAAlC2E,EAASzD,KAAK,GAAG0D,cACnBjE,IACGkE,KAAK,iBAAkB,CACtBC,OAAQvE,KAAKwE,UAAU3I,EAAMgG,OAC7B4C,OAAQ9E,IAETmB,MAAK,SAACC,GACLM,IAAKC,KAAK,CACRC,KAAM,UACN1D,MAAO,UACP2D,KAAM,6BACLV,MAAK,SAAC4D,GACP,IAAMC,EAAY9I,EAAMgG,MACxB,IAAK1C,EACH,GAAItD,EAAMyG,UAAW,CACnB,IAAMsC,EAAY/I,EAAMqF,SACxB0D,EAAUrF,GAAY1D,EAAMgG,MAC5BxF,GAAS,SAACkB,GAAD,mBAAC,eACLA,GADI,IAEPsH,OAAQD,EACR/C,MAAO,CAAEG,QAAQ,GACjBM,WAAW,OAEbwC,OAAOC,SAASC,cAEhB3I,GAAS,SAACkB,GAAD,mBAAC,eACLA,GADI,IAEP2D,SAAS,GAAD,mBAAM3D,EAAU2D,UAAhB,CAA0ByD,IAClC9C,MAAO,CAAEG,QAAQ,GACjBM,WAAW,OAEbwC,OAAOC,SAASC,eAKvB7D,OAAM,SAACC,GACNJ,QAAQI,MAAM,SAAUA,GACxBC,IAAKC,KAAK,CACRC,KAAM,QACN1D,MAAO,0CACP2D,KAAM,qCACNC,mBAAoB,OACpBC,kBAAmB,UAIzBiB,EAAe,4BAA6B,SAG9CvC,IACGkE,KAAK,iBAAkB,CACtBC,OAAQvE,KAAKwE,UAAU3I,EAAMgG,OAC7B4C,OAAQ9E,IAETmB,MAAK,SAACC,GACLM,IAAKC,KAAK,CACRC,KAAM,UACN1D,MAAO,UACP2D,KAAM,8BACLV,MAAK,SAAC4D,GACP,IAAMC,EAAY9I,EAAMgG,MACxB,IAAK1C,EACH,GAAItD,EAAMyG,UAAW,CACnB,IAAMsC,EAAY/I,EAAMqF,SACxB0D,EAAUrF,GAAY1D,EAAMgG,MAC5BxF,GAAS,SAACkB,GAAD,mBAAC,eACLA,GADI,IAEPsH,OAAQD,EACR/C,MAAO,CAAEG,QAAQ,GACjBM,WAAW,OAEbwC,OAAOC,SAASC,cAEhB3I,GAAS,SAACkB,GAAD,mBAAC,eACLA,GADI,IAEP2D,SAAS,GAAD,mBAAM3D,EAAU2D,UAAhB,CAA0ByD,IAClC9C,MAAO,CAAEG,QAAQ,GACjBM,WAAW,OAEbwC,OAAOC,SAASC,eAKvB7D,OAAM,SAACC,GACNJ,QAAQI,MAAM,SAAUA,GACxBC,IAAKC,KAAK,CACRC,KAAM,QACN1D,MAAO,0CACP2D,KAAM,qCACNC,mBAAoB,OACpBC,kBAAmB,UAlGZ,4CAAH,uBA2KNuD,SAAUhG,GAJZ,QAQA,kBAAC,IAAD,CACEiF,QAAQ,YACR3C,KAAK,sBACLjE,QAzEU,WAClBjB,EAAS,2BACJR,GADG,IAENgG,MAAO,CAACG,QAAQ,GAChBM,WAAW,MAsEL2C,SAAUhG,GAJZ,WAUJ,6BACA,kBAAC,IAAD,CAAMpB,MAAM,oBACV,6BAEE,kBAAC,IAAD,CACEqH,WAAYrJ,EAAMqF,SAClBiE,aAAa,EACbC,iBAAiB,EACjBC,aAAa,EACbC,UAAW,CAAEC,KAAM,UACnBC,mBAAmB,EACnBC,eAnFU,SAACtB,GACd9E,IACHhD,EAAS,CAAEwF,MAAOsC,EAAExD,KAAMO,SAAUrF,EAAMqF,SAAUoB,WAAW,IAC/D5C,GAAa,GACbF,EAAY2E,EAAExD,KAAKpB,UACnBmG,YAAW,WACTrC,MACC,QA8EG,kBAAC,IAAD,CAAasC,SAAS,IACtB,kBAAC,IAAD,CAAQC,gBAAiB,KAEzB,kBAAC,IAAD,CAAQ/B,UAAU,aAAagC,QAAQ,gBACvC,kBAAC,IAAD,CAAQhC,UAAU,cAAcgC,QAAQ,gBACxC,kBAAC,IAAD,CAAQhC,UAAU,SAASgC,QAAQ,SAASC,SAAS,c","file":"static/js/18.5fa38471.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Dropdown, Card, Collapse } from \"react-bootstrap\";\r\nimport windowSize from \"react-window-size\";\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\n{\r\n  /* <Card className=\"customCard\"></Card>\r\n\r\n.customCard: {\r\n    background: blue !important;\r\n} */\r\n}\r\nclass MainCard extends Component {\r\n  state = {\r\n    isOption: this.props.isOption,\r\n    fullCard: false,\r\n    collapseCard: false,\r\n    loadCard: false,\r\n    cardRemove: false,\r\n  };\r\n\r\n  cardReloadHandler = () => {\r\n    this.setState({ loadCard: true });\r\n    setInterval(() => {\r\n      this.setState({ loadCard: false });\r\n    }, 3000);\r\n  };\r\n\r\n  cardRemoveHandler = () => {\r\n    this.setState({ cardRemove: true });\r\n  };\r\n\r\n  render() {\r\n    let fullScreenStyle, loader, cardHeaderRight, cardHeader, cardColor;\r\n    let card = \"\";\r\n    let cardClass = [];\r\n\r\n    if (this.state.isOption) {\r\n      cardHeaderRight = (\r\n        <div className=\"card-header-right\">\r\n          <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n            <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n              <i className=\"feather icon-more-horizontal\" />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu as=\"ul\" className=\"list-unstyled card-option\">\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { fullCard: !prevState.fullCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.fullCard\r\n                      ? \"feather icon-minimize\"\r\n                      : \"feather icon-maximize\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.fullCard ? \"Restore\" : \"Maximize\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { collapseCard: !prevState.collapseCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.collapseCard\r\n                      ? \"feather icon-plus\"\r\n                      : \"feather icon-minus\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.collapseCard ? \"Expand\" : \"Collapse\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardReloadHandler}\r\n              >\r\n                <i className=\"feather icon-refresh-cw\" />\r\n                <a href={DEMO.BLANK_LINK}> Reload </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardRemoveHandler}\r\n              >\r\n                <i className=\"feather icon-trash\" />\r\n                <a href={DEMO.BLANK_LINK}> Remove </a>\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    cardHeader = (\r\n      <Card.Header>\r\n        <Card.Title as=\"h5\">{this.props.title}</Card.Title>\r\n        {cardHeaderRight}\r\n      </Card.Header>\r\n    );\r\n\r\n    if (this.state.fullCard) {\r\n      cardClass = [...cardClass, \"full-card\"];\r\n      fullScreenStyle = {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        width: this.props.windowWidth,\r\n        height: this.props.windowHeight,\r\n      };\r\n    }\r\n\r\n    if (this.state.loadCard) {\r\n      cardClass = [...cardClass, \"card-load\"];\r\n      loader = (\r\n        <div className=\"card-loader\">\r\n          <i className=\"pct-loader1 anim-rotate\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.cardRemove) {\r\n      cardClass = [...cardClass, \"d-none\"];\r\n    }\r\n\r\n    if (this.props.cardClass) {\r\n      cardClass = [...cardClass, this.props.cardClass];\r\n    }\r\n\r\n    card = (\r\n      <Card className={cardClass.join(\" \")} style={fullScreenStyle}>\r\n        {cardHeader}\r\n        <Collapse in={!this.state.collapseCard}>\r\n          <div>\r\n            <Card.Body style={{ backgroundColor: \"rgb(185, 210, 214)\" }}>\r\n              {this.props.children}\r\n            </Card.Body>\r\n          </div>\r\n        </Collapse>\r\n        {loader}\r\n      </Card>\r\n    );\r\n\r\n    return <Aux>{card}</Aux>;\r\n  }\r\n}\r\n\r\nexport default MainCard;\r\n","///new///\r\nimport React, { useRef, useState, useEffect, useCallback } from \"react\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport { Button, Navbar } from \"react-bootstrap\";\r\nimport { CheckBox, LoadPanel } from \"devextreme-react\";\r\nimport DataGrid, {\r\n  Column,\r\n  SearchPanel,\r\n  GroupPanel,\r\n  Paging,\r\n  Editing,\r\n  Label,\r\n} from \"devextreme-react/data-grid\";\r\nimport { FileUploader } from \"devextreme-react\";\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\nimport notify from \"devextreme/ui/notify\";\r\nimport Form, { Item, GroupItem, RequiredRule } from \"devextreme-react/form\";\r\nimport { json } from \"body-parser\";\r\n// import DataGrid, {\r\n//   Column,\r\n// } from \"devextreme-react/data-grid\";\r\n\r\nconst Branch = () => {\r\n  const FormRef = useRef(null);\r\n  const [isAdd, setISAdd] = useState(true);\r\n  const [isView, setIsView] = useState(true);\r\n  const [isEdit, setISEdit] = useState(true);\r\n  const [rowIndex, setRowIndex] = useState(0);\r\n  const [updateRow, setUpdateRow] = useState(true);\r\n\r\n  const [userName, setUserName] = useState({});\r\n\r\n  useEffect(() => {\r\n    setDetails();\r\n  }, []);\r\n\r\n  const setDetails = async () => {\r\n    const authData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const checkAuthentication = await axios.get(\r\n      \"/api/CheckUserAuthentication\",\r\n      {\r\n        params: { UsersID: authData.UserName, MenuID: 1007 },\r\n      }\r\n    );\r\n    setUserName(authData.UserName);\r\n    if (checkAuthentication.data.length != 0) {\r\n      if (checkAuthentication.data[0].UserView) {\r\n        setIsView(false);\r\n        axios\r\n          .get(\"/api/getallbranch\")\r\n          .then((response) => {\r\n            console.log(response.data);\r\n            setState((prevState) => ({\r\n              ...prevState,\r\n              branches: response.data,\r\n            }));\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error:\", error);\r\n            Swal.fire({\r\n              icon: \"error\",\r\n              title: '<span style=\"color: red;\">Error!</span>',\r\n              text: \"Failed to view user branch details\",\r\n              confirmButtonColor: \"#d33\",\r\n              confirmButtonText: \"OK\",\r\n            });\r\n          });\r\n      }\r\n      if (checkAuthentication.data[0].UserAdd) {\r\n        setISAdd(false);\r\n      }\r\n      if (checkAuthentication.data[0].UserEdit) {\r\n        console.log(\"AWA\");\r\n        setISEdit(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const [state, setState] = useState({\r\n    jForm: {\r\n      BranchCode: \"\",\r\n      Discription: \"\",\r\n      Active: true,\r\n    },\r\n    viewBranchCode: 0,\r\n    branches: [], // To store fetched branches\r\n    LoadPanelVisible: false,\r\n    ListViewing: false,\r\n    GroupTable: [],\r\n    jSetForm: {},\r\n    boolValue: false,\r\n    fvdfv: false,\r\n  });\r\n\r\n  const FormLayout = FormRef.current && FormRef.current.instance;\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      jForm: {\r\n        ...prevState.jForm,\r\n        [name]: value,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const OnNotification = (message, type) => {\r\n    notify({\r\n      message: message,\r\n      type: type,\r\n      displayTime: 3000,\r\n      position: { at: \"top right\", offset: \"50\" },\r\n    });\r\n  };\r\n\r\n  const OnSaveValidation = async () => {\r\n    console.log(\"validation  2\", !FormLayout.validate().isValid);\r\n    if (!FormLayout.validate().isValid) {\r\n      OnNotification(\"Fields marked with * are required\", \"error\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleSave = async (e) => {\r\n    if (await OnSaveValidation()) {\r\n      const isUpdate = await axios.get(\"/api/checkBranchCode\", {\r\n        params: { BranchCode: state.jForm.BranchCode },\r\n      });\r\n      if (updateRow) {\r\n        if (isUpdate.data[0].branch_exists == 0) {\r\n          axios\r\n            .post(\"/api/addBranch\", {\r\n              branch: JSON.stringify(state.jForm),\r\n              UserID: userName,\r\n            })\r\n            .then((response) => {\r\n              Swal.fire({\r\n                icon: \"success\",\r\n                title: \"Success\",\r\n                text: \"Data saved successfully!\",\r\n              }).then((res) => {\r\n                const newBranch = state.jForm;\r\n                if (!isView) {\r\n                  if (state.boolValue) {\r\n                    const oldBranch = state.branches;\r\n                    oldBranch[rowIndex] = state.jForm;\r\n                    setState((prevState) => ({\r\n                      ...prevState,\r\n                      groups: oldBranch,\r\n                      jForm: { Active: true },\r\n                      boolValue: false,\r\n                    }));\r\n                    window.location.reload();\r\n                  } else {\r\n                    setState((prevState) => ({\r\n                      ...prevState,\r\n                      branches: [...prevState.branches, newBranch],\r\n                      jForm: { Active: true },\r\n                      boolValue: false,\r\n                    }));\r\n                    window.location.reload();\r\n                  }\r\n                }\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              console.error(\"Error:\", error);\r\n              Swal.fire({\r\n                icon: \"error\",\r\n                title: '<span style=\"color: red;\">Error!</span>',\r\n                text: \"Failed to save user branch details\",\r\n                confirmButtonColor: \"#d33\",\r\n                confirmButtonText: \"OK\",\r\n              });\r\n            });\r\n        } else {\r\n          OnNotification(\"Already added Branch Code\", \"error\");\r\n        }\r\n      } else {\r\n        axios\r\n          .post(\"/api/addBranch\", {\r\n            branch: JSON.stringify(state.jForm),\r\n            UserID: userName,\r\n          })\r\n          .then((response) => {\r\n            Swal.fire({\r\n              icon: \"success\",\r\n              title: \"Success\",\r\n              text: \"Data update successfully!\",\r\n            }).then((res) => {\r\n              const newBranch = state.jForm;\r\n              if (!isView) {\r\n                if (state.boolValue) {\r\n                  const oldBranch = state.branches;\r\n                  oldBranch[rowIndex] = state.jForm;\r\n                  setState((prevState) => ({\r\n                    ...prevState,\r\n                    groups: oldBranch,\r\n                    jForm: { Active: true },\r\n                    boolValue: false,\r\n                  }));\r\n                  window.location.reload();\r\n                } else {\r\n                  setState((prevState) => ({\r\n                    ...prevState,\r\n                    branches: [...prevState.branches, newBranch],\r\n                    jForm: { Active: true },\r\n                    boolValue: false,\r\n                  }));\r\n                  window.location.reload();\r\n                }\r\n              }\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error:\", error);\r\n            Swal.fire({\r\n              icon: \"error\",\r\n              title: '<span style=\"color: red;\">Error!</span>',\r\n              text: \"Failed to save user branch details\",\r\n              confirmButtonColor: \"#d33\",\r\n              confirmButtonText: \"OK\",\r\n            });\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setState({\r\n      ...state,\r\n      jForm: {Active: true},\r\n      boolValue: false,\r\n    });\r\n  };\r\n\r\n  const updateTable = (e) => {\r\n    if (!isEdit) {\r\n      setState({ jForm: e.data, branches: state.branches, boolValue: true });\r\n      setUpdateRow(false);\r\n      setRowIndex(e.data.rowIndex);\r\n      setTimeout(() => {\r\n        focusTextBox();\r\n      }, 100);\r\n    }\r\n  };\r\n\r\n  const focusTextBox = useCallback(() => {\r\n    if (FormRef.current) {\r\n      const formInstance = FormRef.current.instance;\r\n      const editor = formInstance.getEditor(\"Discription\");\r\n      if (editor) {\r\n        editor.focus();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Card title=\"User Branch\">\r\n        <Form\r\n          //onContentReady={validateForm}\r\n          ref={FormRef}\r\n          formData={state.jForm}\r\n        >\r\n          <GroupItem colCount={2}>\r\n            <Item\r\n              dataField=\"BranchCode\"\r\n              editorOptions={{\r\n                maxLength: 20,\r\n                readOnly: state.boolValue,\r\n              }}\r\n            >\r\n              <RequiredRule message=\"Field required\" />\r\n              <Label text=\"Branch Code\"></Label>\r\n            </Item>\r\n            <Item dataField=\"Discription\" editorOptions={{}}>\r\n              <RequiredRule message=\"Field required\" />\r\n              <Label text=\"Description\"></Label>\r\n            </Item>\r\n            <Item\r\n              dataField=\"Active\"\r\n              editorType=\"dxCheckBox\"\r\n              editorOptions={{}}\r\n            ></Item>\r\n          </GroupItem>\r\n        </Form>\r\n        <br />\r\n\r\n        <Navbar variant=\"light\">\r\n          <Button\r\n            variant=\"secondary\"\r\n            icon=\"feather icon-layers\"\r\n            onClick={handleSave}\r\n            disabled={isAdd}\r\n          >\r\n            Save\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            icon=\"feather icon-layers\"\r\n            onClick={handleClear}\r\n            disabled={isAdd}\r\n          >\r\n            Clear\r\n          </Button>\r\n        </Navbar>\r\n      </Card>\r\n      <br />\r\n      <Card title=\"User Branch List\">\r\n        <div>\r\n\r\n          <DataGrid\r\n            dataSource={state.branches}\r\n            showBorders={true}\r\n            wordWrapEnabled={true}\r\n            allowSearch={true}\r\n            selection={{ mode: \"single\" }}\r\n            hoverStateEnabled={true}\r\n            onCellDblClick={updateTable}\r\n          >\r\n            <SearchPanel visible={true} />\r\n            <Paging defaultPageSize={20} />\r\n\r\n            <Column dataField=\"BranchCode\" caption=\"Branch Code\" />\r\n            <Column dataField=\"Discription\" caption=\"Description\" />\r\n            <Column dataField=\"Active\" caption=\"Active\" dataType=\"bit\" />\r\n          </DataGrid>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Branch;\r\n\r\n\r\n"],"sourceRoot":""}