{"version":3,"sources":["App/components/MainCard.js","Forms/Admin/CommunicationList.jsx","Forms/Admin/CommunicationSMS.jsx"],"names":["MainCard","state","isOption","props","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","this","className","alignRight","Toggle","id","Menu","as","Item","onClick","prevState","href","DEMO","BLANK_LINK","Header","Title","title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","in","Body","backgroundColor","children","Component","CommunicationList","onSelectionChanged","e","SelectID","selectedRowsData","AutoID","onSelectClick","OnHide","onCloseClick","jList","size","show","Show","onHide","backdrop","keyboard","closeButton","Name","dataSource","ItemList","keyExpr","showBorders","wordWrapEnabled","allowSearch","selection","mode","hoverStateEnabled","visible","defaultPageSize","dataField","variant","icon","CommunicationSMS","onModuleValueChanged","value","DataLoading","axios","get","params","ModuleID","then","res","jlField","JSON","parse","data","Fields","catch","error","console","log","onFieldValueChanged","jSMS","Message","OnSaveValidation","FormLayout","validate","isValid","OnNotification","OnClickEvent","Swal","fire","type","showCancelButton","text","confirmButtonText","cancelButtonText","allowOutsideClick","allowEscapeKey","LoadPanelVisible","serverRequest","post","SMSID","SMS","stringify","response","onLoadPanelHiding","OnClearForm","dismiss","message","notify","displayTime","at","offset","OnListClickEvent","ListViewing","List","OnLoadData","all","spread","OnClearClickEvent","FormMode","jlSchool","jlModule","DocReadOnly","Status","ID","FormRef","React","createRef","School","Module","current","instance","ref","formData","caption","colCount","editorOptions","maxLength","editorType","items","searchEnabled","displayExpr","valueExpr","onValueChanged","colSpan","bg","disabled","shadingColor","onHiding","showIndicator","shading","showPane","closeOnOutsideClick","connect","loggedReducer"],"mappings":"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","file":"static/js/27.50a2f0cd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Dropdown, Card, Collapse } from \"react-bootstrap\";\r\nimport windowSize from \"react-window-size\";\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\n{\r\n  /* <Card className=\"customCard\"></Card>\r\n\r\n.customCard: {\r\n    background: blue !important;\r\n} */\r\n}\r\nclass MainCard extends Component {\r\n  state = {\r\n    isOption: this.props.isOption,\r\n    fullCard: false,\r\n    collapseCard: false,\r\n    loadCard: false,\r\n    cardRemove: false,\r\n  };\r\n\r\n  cardReloadHandler = () => {\r\n    this.setState({ loadCard: true });\r\n    setInterval(() => {\r\n      this.setState({ loadCard: false });\r\n    }, 3000);\r\n  };\r\n\r\n  cardRemoveHandler = () => {\r\n    this.setState({ cardRemove: true });\r\n  };\r\n\r\n  render() {\r\n    let fullScreenStyle, loader, cardHeaderRight, cardHeader, cardColor;\r\n    let card = \"\";\r\n    let cardClass = [];\r\n\r\n    if (this.state.isOption) {\r\n      cardHeaderRight = (\r\n        <div className=\"card-header-right\">\r\n          <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n            <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n              <i className=\"feather icon-more-horizontal\" />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu as=\"ul\" className=\"list-unstyled card-option\">\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { fullCard: !prevState.fullCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.fullCard\r\n                      ? \"feather icon-minimize\"\r\n                      : \"feather icon-maximize\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.fullCard ? \"Restore\" : \"Maximize\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { collapseCard: !prevState.collapseCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.collapseCard\r\n                      ? \"feather icon-plus\"\r\n                      : \"feather icon-minus\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.collapseCard ? \"Expand\" : \"Collapse\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardReloadHandler}\r\n              >\r\n                <i className=\"feather icon-refresh-cw\" />\r\n                <a href={DEMO.BLANK_LINK}> Reload </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardRemoveHandler}\r\n              >\r\n                <i className=\"feather icon-trash\" />\r\n                <a href={DEMO.BLANK_LINK}> Remove </a>\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    cardHeader = (\r\n      <Card.Header>\r\n        <Card.Title as=\"h5\">{this.props.title}</Card.Title>\r\n        {cardHeaderRight}\r\n      </Card.Header>\r\n    );\r\n\r\n    if (this.state.fullCard) {\r\n      cardClass = [...cardClass, \"full-card\"];\r\n      fullScreenStyle = {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        width: this.props.windowWidth,\r\n        height: this.props.windowHeight,\r\n      };\r\n    }\r\n\r\n    if (this.state.loadCard) {\r\n      cardClass = [...cardClass, \"card-load\"];\r\n      loader = (\r\n        <div className=\"card-loader\">\r\n          <i className=\"pct-loader1 anim-rotate\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.cardRemove) {\r\n      cardClass = [...cardClass, \"d-none\"];\r\n    }\r\n\r\n    if (this.props.cardClass) {\r\n      cardClass = [...cardClass, this.props.cardClass];\r\n    }\r\n\r\n    card = (\r\n      <Card className={cardClass.join(\" \")} style={fullScreenStyle}>\r\n        {cardHeader}\r\n        <Collapse in={!this.state.collapseCard}>\r\n          <div>\r\n            <Card.Body style={{ backgroundColor: \"rgb(185, 210, 214)\" }}>\r\n              {this.props.children}\r\n            </Card.Body>\r\n          </div>\r\n        </Collapse>\r\n        {loader}\r\n      </Card>\r\n    );\r\n\r\n    return <Aux>{card}</Aux>;\r\n  }\r\n}\r\n\r\nexport default MainCard;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport DataGrid, {\r\n  Column,\r\n  SearchPanel,\r\n  GroupPanel,\r\n  Paging,\r\n} from \"devextreme-react/data-grid\";\r\n\r\nexport class CommunicationList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      SelectID: 0,\r\n      jList: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  onSelectionChanged = (e) => {\r\n    this.setState({ SelectID: e.selectedRowsData[0].AutoID });\r\n  };\r\n\r\n  onSelectClick = (e) => {\r\n    this.props.OnHide(this.state.SelectID);\r\n  };\r\n\r\n  onCloseClick = (e) => {\r\n    this.props.OnHide(0);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Modal\r\n          size=\"xl\"\r\n          show={this.props.Show}\r\n          onHide={this.onCloseClick}\r\n          backdrop=\"static\"\r\n          keyboard={false}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>List of {this.props.Name}</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <DataGrid\r\n              id=\"grid-list\"\r\n              dataSource={this.props.ItemList}\r\n              keyExpr=\"AutoID\"\r\n              showBorders={true}\r\n              wordWrapEnabled={true}\r\n              allowSearch={true}\r\n              selection={{ mode: \"single\" }}\r\n              hoverStateEnabled={true}\r\n              onSelectionChanged={this.onSelectionChanged}\r\n            >\r\n              <SearchPanel visible={true} />\r\n              <GroupPanel visible={true} />\r\n              <Paging defaultPageSize={20} />\r\n              <Column dataField=\"AutoID\" visible={false} />\r\n              <Column dataField=\"Name\" />\r\n              <Column dataField=\"Module\" />\r\n              <Column dataField=\"Status\" />\r\n              <Column dataField=\"Remark\" />\r\n            </DataGrid>\r\n\r\n            <br></br>\r\n            <br></br>\r\n\r\n            <Button variant=\"secondary\" onClick={this.onSelectClick}>\r\n              Open\r\n            </Button>\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={this.onCloseClick}\r\n              icon=\"feather icon-layers\"\r\n            >\r\n              Close\r\n            </Button>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CommunicationList;\r\n","import React, { Component } from \"react\";\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport List from \"./CommunicationList\";\r\nimport Form, {\r\n  Item,\r\n  RequiredRule,\r\n  GroupItem,\r\n  Label,\r\n  EmailRule,\r\n  EmptyItem,\r\n} from \"devextreme-react/form\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport axios from \"axios\";\r\nimport { LoadPanel } from \"devextreme-react/load-panel\";\r\nimport notify from \"devextreme/ui/notify\";\r\nimport Swal from \"sweetalert2\";\r\nimport { Button, Navbar } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport class CommunicationSMS extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      SMSID: 0,\r\n      jSMS: {},\r\n\r\n      jlSchool: [],\r\n      jlModule: [],\r\n      jlField: [],\r\n\r\n      jList: [],\r\n\r\n      FormMode: 0,\r\n      ListViewing: false,\r\n      DataLoading: false,\r\n      LoadPanelVisible: false,\r\n      DocReadOnly: false,\r\n    };\r\n\r\n    this.Status = [\r\n      { ID: 1, Name: \"Active\" },\r\n      { ID: 0, Name: \"Inactive\" },\r\n    ];\r\n\r\n    this.FormRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    let auth = false;\r\n\r\n    axios\r\n      .all([\r\n        axios.get(\"/api/school-lookup\"),\r\n        axios.get(\"/api/module-sub-communication\"),\r\n      ])\r\n      .then(\r\n        axios.spread((School, Module) => {\r\n          this.setState({\r\n            jlSchool: School.data,\r\n            jlModule: Module.data,\r\n            DocReadOnly: auth,\r\n          });\r\n        })\r\n      )\r\n      .catch((error) => console.log(error));\r\n  }\r\n\r\n  onModuleValueChanged = (e) => {\r\n    if (e.value && !this.state.DataLoading) {\r\n      axios\r\n        .get(\"/api/module-field\", {\r\n          params: { ModuleID: e.value },\r\n        })\r\n        .then((res) => {\r\n          this.setState({ jlField: JSON.parse(res.data[0].Fields) });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  onFieldValueChanged = (e) => {\r\n    if (e.value) {\r\n      this.setState((prevState) => ({\r\n        jSMS: {\r\n          ...prevState.jSMS,\r\n          Message: this.state.jSMS.Message + \" #@\" + e.value + \"# \",\r\n        },\r\n      }));\r\n    }\r\n  };\r\n\r\n  OnSaveValidation = () => {\r\n    if (!this.FormLayout.validate().isValid) {\r\n      this.OnNotification(\"Fields marked with * are required\", \"error\");\r\n      return false;\r\n    } else return true;\r\n  };\r\n\r\n  OnClickEvent = (e) => {\r\n    if (this.OnSaveValidation()) {\r\n      Swal.fire({\r\n        type: \"info\",\r\n        showCancelButton: true,\r\n        text: \"Do you want to save ?\",\r\n        confirmButtonText: \"Yes\",\r\n        cancelButtonText: \"No\",\r\n        allowOutsideClick: false,\r\n        allowEscapeKey: false,\r\n      }).then((res) => {\r\n        if (res.value) {\r\n          this.setState({ LoadPanelVisible: true }, () => {\r\n            this.serverRequest = axios\r\n              .post(\"/api/sms\", {\r\n                SMSID: this.state.SMSID,\r\n                SMS: JSON.stringify(this.state.jSMS),\r\n              })\r\n              .then((response) => {\r\n                console.log(\"response \", response);\r\n                this.onLoadPanelHiding(\"Successfully Saved\", \"success\");\r\n                this.OnClearForm();\r\n              })\r\n              .catch((error) => {\r\n                this.onLoadPanelHiding(\"Something went wrong\", \"error\");\r\n                console.log(error);\r\n              });\r\n          });\r\n        } else if (res.dismiss == \"cancel\") {\r\n          //console.log(\"cancel\");\r\n        } else if (res.dismiss == \"esc\") {\r\n          //console.log(\"cancle\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  OnNotification = (message, type) => {\r\n    notify({\r\n      message: message,\r\n      type: type,\r\n      displayTime: 3000,\r\n      position: { at: \"top right\", offset: \"50\" },\r\n    });\r\n  };\r\n\r\n  onLoadPanelHiding = (message, type) => {\r\n    this.setState({\r\n      LoadPanelVisible: false,\r\n    });\r\n\r\n    this.OnNotification(message, type);\r\n  };\r\n\r\n  OnListClickEvent = (SelectID) => {\r\n    this.setState({ ListViewing: !this.state.ListViewing }, () => {\r\n      if (this.state.ListViewing) {\r\n        //Open\r\n        this.serverRequest = axios\r\n          .get(\"/api/sms-list\")\r\n          .then((res) => {\r\n            this.setState({ jList: JSON.parse(res.data[0].List) });\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      }\r\n      if (!this.state.ListViewing && SelectID != 0) {\r\n        //Close\r\n        this.setState({ SMSID: SelectID, DataLoading: true }, () =>\r\n          this.OnLoadData()\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  OnLoadData = () => {\r\n    console.log(\"X\", this.state.SMSID);\r\n    axios\r\n      .all([\r\n        axios.get(\"/api/sms\", {\r\n          params: { SMSID: this.state.SMSID },\r\n        }),\r\n      ])\r\n      .then(\r\n        axios.spread((SMS) => {\r\n          console.log(\"SMS\", SMS);\r\n          this.setState(\r\n            {\r\n              jSMS: SMS.data[0],\r\n            },\r\n            () => {\r\n              axios\r\n                .get(\"/api/module-field\", {\r\n                  params: { ModuleID: this.state.jSMS.ModuleID },\r\n                })\r\n                .then((res) => {\r\n                  this.setState({ jlField: JSON.parse(res.data[0].Fields) });\r\n                })\r\n                .catch((error) => {\r\n                  console.log(error);\r\n                });\r\n            }\r\n          );\r\n        })\r\n      )\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  OnClearClickEvent = (e) => {\r\n    Swal.fire({\r\n      type: \"info\",\r\n      showCancelButton: true,\r\n      text: \"Do you want to clear ?\",\r\n      confirmButtonText: \"Yes\",\r\n      cancelButtonText: \"No\",\r\n      allowOutsideClick: false,\r\n      allowEscapeKey: false,\r\n    }).then((res) => {\r\n      if (res.value) {\r\n        this.OnClearForm();\r\n      }\r\n    });\r\n  };\r\n\r\n  OnClearForm = () => {\r\n    this.setState({\r\n      SMSID: 0,\r\n      jSMS: {},\r\n\r\n      //jlSchool: [],\r\n      //jlModule: [],\r\n      jlField: [],\r\n\r\n      jList: [],\r\n\r\n      FormMode: 0,\r\n      ListViewing: false,\r\n      DataLoading: false,\r\n      //LoadPanelVisible: false,\r\n    });\r\n  };\r\n\r\n  get FormLayout() {\r\n    return this.FormRef.current.instance;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Aux>\r\n        <Card title=\"SMS Tempalate\">\r\n          <Form ref={this.FormRef} formData={this.state.jSMS}>\r\n            <GroupItem caption=\"Infomation\" colCount={2}>\r\n              <Item\r\n                dataField=\"Name\"\r\n                editorOptions={{\r\n                  maxLength: 50,\r\n                }}\r\n              >\r\n                <RequiredRule message=\"Field required\" />\r\n              </Item>\r\n              \r\n              <Item\r\n                dataField=\"ModuleID\"\r\n                editorType=\"dxSelectBox\"\r\n                editorOptions={{\r\n                  items: this.state.jlModule,\r\n                  searchEnabled: true,\r\n                  displayExpr: \"Name\",\r\n                  valueExpr: \"ModuleID\",\r\n                  onValueChanged: this.onModuleValueChanged,\r\n                }}\r\n              >\r\n                <Label text=\"Module\"></Label>\r\n                <RequiredRule message=\"Field required\" />\r\n              </Item>\r\n\r\n              <Item\r\n                dataField=\"Status\"\r\n                editorType=\"dxSelectBox\"\r\n                editorOptions={{\r\n                  items: this.Status,\r\n                  searchEnabled: true,\r\n                  displayExpr: \"Name\",\r\n                  valueExpr: \"ID\",\r\n                }}\r\n              >\r\n                <RequiredRule message=\"Field required\" />\r\n              </Item>\r\n              <Item\r\n                dataField=\"Remark\"\r\n                editorOptions={{\r\n                  maxLength: 50,\r\n                }}\r\n              ></Item>\r\n            </GroupItem>\r\n            <GroupItem caption=\"Message\" colCount={2}>\r\n              <Item\r\n                dataField=\"Field\"\r\n                editorType=\"dxSelectBox\"\r\n                editorOptions={{\r\n                  items: this.state.jlField,\r\n                  searchEnabled: true,\r\n                  displayExpr: \"Value\",\r\n                  valueExpr: \"Value\",\r\n                  onValueChanged: this.onFieldValueChanged,\r\n                }}\r\n              ></Item>\r\n              <EmptyItem></EmptyItem>\r\n              <Item\r\n                dataField=\"Message\"\r\n                editorType=\"dxTextArea\"\r\n                colSpan={2}\r\n                editorOptions={{\r\n                  maxLength: 500,\r\n                  height: 150,\r\n                }}\r\n              >\r\n                <RequiredRule message=\"Field required\" />\r\n              </Item>\r\n            </GroupItem>\r\n          </Form>\r\n        </Card>\r\n\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={this.OnClickEvent}\r\n            disabled={this.state.DocReadOnly}\r\n          >\r\n            Save\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={this.OnClearClickEvent}\r\n            icon=\"feather icon-layers\"\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={this.OnListClickEvent}>\r\n            View List\r\n          </Button>\r\n        </Navbar>\r\n\r\n        <LoadPanel\r\n          message=\"Processing.... Please, wait...\"\r\n          shadingColor=\"rgba(0,0,0,0.4)\"\r\n          onHiding={this.onLoadPanelHiding}\r\n          visible={this.state.LoadPanelVisible}\r\n          showIndicator={true}\r\n          shading={true}\r\n          showPane={true}\r\n          closeOnOutsideClick={false}\r\n          width={500}\r\n        />\r\n\r\n        <List\r\n          Show={this.state.ListViewing}\r\n          OnHide={this.OnListClickEvent}\r\n          ItemList={this.state.jList}\r\n          Name=\" SMS\"\r\n        ></List>\r\n      </Aux>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(state.loggedReducer);\r\n  return {\r\n    data: state.loggedReducer,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CommunicationSMS);\r\n"],"sourceRoot":""}