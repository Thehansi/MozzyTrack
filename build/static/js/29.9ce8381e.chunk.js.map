{"version":3,"sources":["App/components/MainCard.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","Forms/Dashboard/Notification.jsx"],"names":["MainCard","state","isOption","props","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","this","className","alignRight","Toggle","id","Menu","as","Item","onClick","prevState","href","DEMO","BLANK_LINK","Header","Title","title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","in","Body","backgroundColor","children","Component","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","Notification","useState","notification","Status","ID","Name","useEffect","setdetails","allowColumnReordering","showBorders","allowSearch","dataSource","enabled","visible","mode","dataField","caption","editorType","items","valueExpr","displayExpr"],"mappings":"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","file":"static/js/29.9ce8381e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Dropdown, Card, Collapse } from \"react-bootstrap\";\r\nimport windowSize from \"react-window-size\";\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\n{\r\n  /* <Card className=\"customCard\"></Card>\r\n\r\n.customCard: {\r\n    background: blue !important;\r\n} */\r\n}\r\nclass MainCard extends Component {\r\n  state = {\r\n    isOption: this.props.isOption,\r\n    fullCard: false,\r\n    collapseCard: false,\r\n    loadCard: false,\r\n    cardRemove: false,\r\n  };\r\n\r\n  cardReloadHandler = () => {\r\n    this.setState({ loadCard: true });\r\n    setInterval(() => {\r\n      this.setState({ loadCard: false });\r\n    }, 3000);\r\n  };\r\n\r\n  cardRemoveHandler = () => {\r\n    this.setState({ cardRemove: true });\r\n  };\r\n\r\n  render() {\r\n    let fullScreenStyle, loader, cardHeaderRight, cardHeader, cardColor;\r\n    let card = \"\";\r\n    let cardClass = [];\r\n\r\n    if (this.state.isOption) {\r\n      cardHeaderRight = (\r\n        <div className=\"card-header-right\">\r\n          <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n            <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n              <i className=\"feather icon-more-horizontal\" />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu as=\"ul\" className=\"list-unstyled card-option\">\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { fullCard: !prevState.fullCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.fullCard\r\n                      ? \"feather icon-minimize\"\r\n                      : \"feather icon-maximize\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.fullCard ? \"Restore\" : \"Maximize\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { collapseCard: !prevState.collapseCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.collapseCard\r\n                      ? \"feather icon-plus\"\r\n                      : \"feather icon-minus\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.collapseCard ? \"Expand\" : \"Collapse\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardReloadHandler}\r\n              >\r\n                <i className=\"feather icon-refresh-cw\" />\r\n                <a href={DEMO.BLANK_LINK}> Reload </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardRemoveHandler}\r\n              >\r\n                <i className=\"feather icon-trash\" />\r\n                <a href={DEMO.BLANK_LINK}> Remove </a>\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    cardHeader = (\r\n      <Card.Header>\r\n        <Card.Title as=\"h5\">{this.props.title}</Card.Title>\r\n        {cardHeaderRight}\r\n      </Card.Header>\r\n    );\r\n\r\n    if (this.state.fullCard) {\r\n      cardClass = [...cardClass, \"full-card\"];\r\n      fullScreenStyle = {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        width: this.props.windowWidth,\r\n        height: this.props.windowHeight,\r\n      };\r\n    }\r\n\r\n    if (this.state.loadCard) {\r\n      cardClass = [...cardClass, \"card-load\"];\r\n      loader = (\r\n        <div className=\"card-loader\">\r\n          <i className=\"pct-loader1 anim-rotate\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.cardRemove) {\r\n      cardClass = [...cardClass, \"d-none\"];\r\n    }\r\n\r\n    if (this.props.cardClass) {\r\n      cardClass = [...cardClass, this.props.cardClass];\r\n    }\r\n\r\n    card = (\r\n      <Card className={cardClass.join(\" \")} style={fullScreenStyle}>\r\n        {cardHeader}\r\n        <Collapse in={!this.state.collapseCard}>\r\n          <div>\r\n            <Card.Body style={{ backgroundColor: \"rgb(185, 210, 214)\" }}>\r\n              {this.props.children}\r\n            </Card.Body>\r\n          </div>\r\n        </Collapse>\r\n        {loader}\r\n      </Card>\r\n    );\r\n\r\n    return <Aux>{card}</Aux>;\r\n  }\r\n}\r\n\r\nexport default MainCard;\r\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import DataGrid, {\r\n  Column,\r\n  Editing,\r\n  Paging,\r\n  SearchPanel,\r\n  Lookup,\r\n} from \"devextreme-react/data-grid\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport axios from \"axios\";\r\n\r\nconst Notification = () => {\r\n  const [notification, setNotification] = useState([]);\r\n  const [state, setState] = useState({\r\n    Status: [\r\n      { ID: \"0\", Name: \"Pending\" },\r\n      { ID: 1, Name: \"Cancel\" },\r\n      { ID: 2, Name: \"Approve\" },\r\n      { ID: 3, Name: \"Reject\" },\r\n      { ID: 4, Name: \"Hold\" },\r\n    ],\r\n  });\r\n\r\n  useEffect(() => {\r\n    setdetails();\r\n  }, []);\r\n\r\n  const setdetails = async () => {\r\n    // const notificationDetails = await axios.get(\"/api/getAllNotification\");\r\n    // console.log(\"notificationDetails\", notificationDetails);\r\n    // setNotification(notificationDetails.data);\r\n  };\r\n  return (\r\n    <div>\r\n      <Card title=\"Notification\">\r\n        <DataGrid\r\n          id=\"Notification\"\r\n          allowColumnReordering={true}\r\n          showBorders={true}\r\n          allowSearch={true}\r\n          dataSource={notification}\r\n        >\r\n          <Paging enabled={true} />\r\n          <SearchPanel visible={true} />\r\n          <Editing mode=\"row\" />\r\n          <Column dataField=\"CreateDate\" caption=\"Create Date\" />\r\n          <Column\r\n            dataField=\"IsFinal\"\r\n            editorType=\"dxCheckBox\"\r\n            caption=\"Is Final Stage\"\r\n          />\r\n          <Column dataField=\"Item_Type\" caption=\"Item Type\" />\r\n          <Column dataField=\"PR_Type\" caption=\"PR Type\" />\r\n          <Column dataField=\"PR_Number\" caption=\"PR Number\" />\r\n          <Column dataField=\"Status\" caption=\"Status\">\r\n            <Lookup\r\n              items={state.Status}\r\n              valueExpr=\"ID\"\r\n              displayExpr=\"Name\"\r\n            ></Lookup>\r\n          </Column>\r\n          <Column dataField=\"Priority\" caption=\"Priority\" />\r\n        </DataGrid>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nexport default Notification;\r\n\r\n// import React, { Component } from \"react\";\r\n// import {\r\n//   Row,\r\n//   Col,\r\n//   Card,\r\n//   Table,\r\n//   Tabs,\r\n//   Tab,\r\n//   DropdownButton,\r\n//   Dropdown,\r\n// } from \"react-bootstrap\";\r\n// import DEMO from \"../../store/constant\";\r\n// import axios from \"axios\";\r\n// import { connect } from \"react-redux\";\r\n// import avatar1 from \"../../assets/images/user/avatar-1.jpg\";\r\n// import { LoadPanel } from \"devextreme-react/load-panel\";\r\n// import notify from \"devextreme/ui/notify\";\r\n// import Swal from \"sweetalert2\";\r\n// import Moment from \"moment\";\r\n// import { TabPanel, Item } from \"devextreme-react/tab-panel\";\r\n// import { Popup } from \"devextreme-react/popup\";\r\n// import ScrollView from \"devextreme-react/scroll-view\";\r\n\r\n// export class Notification extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       jlNotification: [],\r\n//       LoadPanelVisible: false,\r\n//       jlBulkUpload: [],\r\n//       LoadingID: 0,\r\n\r\n//       LoadingExamSetUp: false,\r\n//       LoadingExamSetUpID: 0,\r\n//       LoadingDocumentID: 0,\r\n//       LoadingViewPanel: false,\r\n\r\n//       SchoolID: 0,\r\n//       SubjectID: 0,\r\n//       PartID: 0,\r\n\r\n//       LoadingVisiblePlanale: false,\r\n//       ViewDocumentTypeID: 0,\r\n//     };\r\n\r\n//     this.updateMyData = this.updateMyData.bind(this);\r\n//     this.VisibleFalse = this.VisibleFalse.bind(this);\r\n//   }\r\n//   OnLayoutClickEvent = () => {\r\n//     if (this.state.ExamID === 0)\r\n//       this.OnNotification(\"No data to print\", \"warning\");\r\n//     else this.setState({ LayoutViewing: !this.state.LayoutViewing });\r\n//   };\r\n//   OnNotification = (message, type) => {\r\n//     notify({\r\n//       message: message,\r\n//       type: type,\r\n//       displayTime: 3000,\r\n//       position: { at: \"top right\", offset: \"50\" },\r\n//     });\r\n//   };\r\n//   componentDidMount() {\r\n//     this._isMounted = true;\r\n//     console.log(\"reducer data\", this.props.data.user.Id);\r\n//     axios\r\n//       .all([\r\n//         axios.get(\"/api/approvalTransaction\", {\r\n//           params: { UserID: this.props.data.user.Id },\r\n//         }),\r\n//       ])\r\n//       .then(\r\n//         axios.spread((Approval) => {\r\n//           if (this._isMounted)\r\n//             this.setState({\r\n//               jlNotification: JSON.parse(Approval.data[0].ApprovalTransaction),\r\n//             });\r\n//         })\r\n//       )\r\n//       .catch((error) => console.log(error));\r\n//   }\r\n//   onClickApprove(e) {\r\n//     if (e != undefined || e != null) {\r\n//       Swal.fire({\r\n//         type: \"info\",\r\n//         showCancelButton: true,\r\n//         text: \"Do you want to save ?\",\r\n//         confirmButtonText: \"Yes\",\r\n//         cancelButtonText: \"No\",\r\n//         allowOutsideClick: false,\r\n//         allowEscapeKey: false,\r\n//       }).then((res) => {\r\n//         if (res.value) {\r\n//           this.setState({ LoadPanelVisible: true });\r\n//           this.serverRequest = axios\r\n//             .post(\"/api/approvalTransactionApprove\", {\r\n//               ApprovalTransactionID: e,\r\n//             })\r\n//             .then((response) => {\r\n//               console.log(\"res\", response);\r\n\r\n//               if (response.data[0].DocumentType == 5005) {\r\n//                 this.serverRequest = axios\r\n//                   .post(\"/api/bulk-credit-note-approval-post-sap\", {\r\n//                     DocumentPostingData: response.data[0].DocumentPostingData,\r\n//                     DocumentNumber: response.data[0].DocumentNumber,\r\n//                   })\r\n//                   .then((response) => {\r\n//                     if (response.status != 400) {\r\n//                       this.onLoadPanelHiding();\r\n//                       this.OnClearForm();\r\n//                     } else {\r\n//                       this.setState({\r\n//                         LoadPanelVisible: false,\r\n//                       });\r\n\r\n//                       notify({\r\n//                         message:\r\n//                           \"Document Not Posting to SAP Please Check Document\",\r\n//                         type: \"warning\",\r\n//                         displayTime: 3000,\r\n//                         position: { at: \"top right\", offset: \"50\" },\r\n//                       });\r\n//                       this.OnClearForm();\r\n//                     }\r\n//                   })\r\n//                   .catch((error) => {\r\n//                     this.onLoadPanelHiding();\r\n//                     console.log(error);\r\n//                   });\r\n//               } else if (response.data[0].DocumentType == 5004) {\r\n//                 this.serverRequest = axios\r\n//                   .post(\"/api/bulk-invoice-approval-post-sap\", {\r\n//                     DocumentPostingData: response.data[0].DocumentPostingData,\r\n//                     DocumentNumber: response.data[0].DocumentNumber,\r\n//                   })\r\n//                   .then((response) => {\r\n//                     if (response.status != 400) {\r\n//                       this.onLoadPanelHiding();\r\n//                       this.OnClearForm();\r\n//                     } else {\r\n//                       this.setState({\r\n//                         LoadPanelVisible: false,\r\n//                       });\r\n\r\n//                       notify({\r\n//                         message:\r\n//                           \"Document Not Posting to SAP Please Check Document\",\r\n//                         type: \"warning\",\r\n//                         displayTime: 3000,\r\n//                         position: { at: \"top right\", offset: \"50\" },\r\n//                       });\r\n//                       this.OnClearForm();\r\n//                     }\r\n//                   })\r\n//                   .catch((error) => {\r\n//                     this.onLoadPanelHiding();\r\n//                     console.log(error);\r\n//                   });\r\n//               } else {\r\n//                 this.onLoadPanelHiding();\r\n//                 this.OnClearForm();\r\n//               }\r\n//             })\r\n//             .catch((error) => {\r\n//               this.onLoadPanelHiding();\r\n//               console.log(error);\r\n//             });\r\n//         } else if (res.dismiss == \"cancel\") {\r\n//         } else if (res.dismiss == \"esc\") {\r\n//         }\r\n//       });\r\n//     } else {\r\n//       notify({\r\n//         message: \"Fields marked with * are required\",\r\n//         type: \"error\",\r\n//         displayTime: 3000,\r\n//         position: { at: \"top right\", offset: \"50\" },\r\n//       });\r\n//     }\r\n//   }\r\n//   onClickReject(e) {\r\n//     if (e != undefined || e != null) {\r\n//       Swal.fire({\r\n//         type: \"info\",\r\n//         showCancelButton: true,\r\n//         text: \"Do you want to save ?\",\r\n//         confirmButtonText: \"Yes\",\r\n//         cancelButtonText: \"No\",\r\n//         allowOutsideClick: false,\r\n//         allowEscapeKey: false,\r\n//       }).then((res) => {\r\n//         if (res.value) {\r\n//           this.setState({ LoadPanelVisible: true });\r\n//           this.serverRequest = axios\r\n//             .post(\"/api/ApprovalTransactionReject\", {\r\n//               ApprovalTransactionID: e,\r\n//             })\r\n//             .then((response) => {\r\n//               this.onLoadPanelHiding();\r\n//               this.OnClearForm();\r\n//             })\r\n//             .catch((error) => {\r\n//               this.onLoadPanelHiding();\r\n//               console.log(error);\r\n//             });\r\n//         } else if (res.dismiss == \"cancel\") {\r\n//         } else if (res.dismiss == \"esc\") {\r\n//         }\r\n//       });\r\n//     } else {\r\n//       notify({\r\n//         message: \"Fields marked with * are required\",\r\n//         type: \"error\",\r\n//         displayTime: 3000,\r\n//         position: { at: \"top right\", offset: \"50\" },\r\n//       });\r\n//     }\r\n//   }\r\n//   OnClearForm = () => {\r\n//     this.setState({\r\n//       LoadPanelVisible: false,\r\n//     });\r\n\r\n//     this.componentDidMount();\r\n//   };\r\n//   onLoadPanelHiding = () => {\r\n//     this.setState({\r\n//       LoadPanelVisible: false,\r\n//     });\r\n\r\n//     notify({\r\n//       message: \"Successfully Saved\",\r\n//       type: \"success\",\r\n//       displayTime: 3000,\r\n//       position: { at: \"top right\", offset: \"50\" },\r\n//     });\r\n//   };\r\n\r\n//   ViewSetUp = (LoadID, DocumentID, SchoolID, SubjectID, PartID) => {\r\n\r\n//   };\r\n\r\n//   VisibleFalse = () => {\r\n//     this.setState({\r\n//       LoadingExamSetUp: false,\r\n//       LoadingID: 0,\r\n//       LoadingViewPanel: false,\r\n//     });\r\n//   };\r\n\r\n//   hideInfo = () => {\r\n//     this.setState({\r\n//       LoadingExamSetUp: false,\r\n//     });\r\n//   };\r\n\r\n//   updateMyData = (autoID) => {\r\n//     if (\r\n//       this.state.jlBulkUpload == null ||\r\n//       this.state.jlBulkUpload.length == 0\r\n//     ) {\r\n//       this.state.jlBulkUpload.push({\r\n//         AutoID: autoID,\r\n//       });\r\n\r\n//       return;\r\n//     }\r\n//     let app = [...this.state.jlBulkUpload];\r\n//     let idx = app.find((obj) => obj.AutoID === autoID);\r\n//     if (idx == undefined || idx == null) {\r\n//       this.state.jlBulkUpload.push({\r\n//         AutoID: autoID,\r\n//       });\r\n//     } else {\r\n//       let app = [...this.state.jlBulkUpload];\r\n//       var index = app.findIndex((obj) => obj.AutoID === autoID);\r\n\r\n//       if (index !== -1) {\r\n//         this.state.jlBulkUpload.splice(index, 1);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   onBulkApprove = () => {\r\n//     if (this.state.jlBulkUpload.length != 0) {\r\n//       Swal.fire({\r\n//         type: \"info\",\r\n//         showCancelButton: true,\r\n//         text: \"Do you want to save ?\",\r\n//         confirmButtonText: \"Yes\",\r\n//         cancelButtonText: \"No\",\r\n//         allowOutsideClick: false,\r\n//         allowEscapeKey: false,\r\n//       }).then((res) => {\r\n//         if (res.value) {\r\n//           this.setState({ LoadPanelVisible: true });\r\n//           this.state.jlBulkUpload.forEach((element) => {\r\n//             this.serverRequest = axios\r\n//               .post(\"/api/approvalTransactionApprove\", {\r\n//                 ApprovalTransactionID: element.AutoID,\r\n//               })\r\n//               .then((response) => { })\r\n//               .catch((error) => {\r\n//                 this.onLoadPanelHiding();\r\n//                 console.log(error);\r\n//               });\r\n//           });\r\n//           this.onLoadPanelHiding();\r\n//           this.componentDidMount();\r\n//           this.OnClearForm();\r\n//         } else if (res.dismiss == \"cancel\") {\r\n//         } else if (res.dismiss == \"esc\") {\r\n//         }\r\n//       });\r\n//     } else {\r\n//       notify({\r\n//         message: \"Pleace select document\",\r\n//         type: \"warning\",\r\n//         displayTime: 3000,\r\n//         position: { at: \"top right\", offset: \"50\" },\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   onBulkReject = () => {\r\n//     if (this.state.jlBulkUpload.length != 0) {\r\n//       Swal.fire({\r\n//         type: \"info\",\r\n//         showCancelButton: true,\r\n//         text: \"Do you want to save ?\",\r\n//         confirmButtonText: \"Yes\",\r\n//         cancelButtonText: \"No\",\r\n//         allowOutsideClick: false,\r\n//         allowEscapeKey: false,\r\n//       }).then((res) => {\r\n//         if (res.value) {\r\n//           this.setState({ LoadPanelVisible: true });\r\n//           this.state.jlBulkUpload.forEach((element) => {\r\n//             this.serverRequest = axios\r\n//               .post(\"/api/ApprovalTransactionReject\", {\r\n//                 ApprovalTransactionID: element.AutoID,\r\n//               })\r\n//               .then((response) => { })\r\n//               .catch((error) => {\r\n//                 this.onLoadPanelHiding();\r\n//                 console.log(error);\r\n//               });\r\n//           });\r\n//           this.onLoadPanelHiding();\r\n//           this.componentDidMount();\r\n//           this.OnClearForm();\r\n//         } else if (res.dismiss == \"cancel\") {\r\n//         } else if (res.dismiss == \"esc\") {\r\n//         }\r\n//       });\r\n//     } else {\r\n//       notify({\r\n//         message: \"Pleace select document\",\r\n//         type: \"warning\",\r\n//         displayTime: 3000,\r\n//         position: { at: \"top right\", offset: \"50\" },\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <Col md={12} xl={12}>\r\n//         <Card className=\"Recent-Users\">\r\n//           <Card.Header>\r\n//             <Card.Title as=\"h5\">Approve Document's</Card.Title>\r\n//           </Card.Header>\r\n//           <Card.Body className=\"px-0 py-2\">\r\n//             <Table responsive hover>\r\n//               <tbody>{this.renderTableData()}</tbody>\r\n//             </Table>\r\n//           </Card.Body>\r\n//         </Card>\r\n\r\n//         <LoadPanel\r\n//           message=\"Processing.... Please, wait...\"\r\n//           shadingColor=\"rgba(0,0,0,0.4)\"\r\n//           onHiding={this.onLoadPanelHiding}\r\n//           visible={this.state.LoadPanelVisible}\r\n//           showIndicator={true}\r\n//           shading={true}\r\n//           showPane={true}\r\n//           closeOnOutsideClick={false}\r\n//           width={500}\r\n//         />\r\n//         <Popup\r\n//           visible={this.state.LoadingExamSetUp}\r\n//           onHiding={this.hideInfo}\r\n//           dragEnabled={false}\r\n//           closeOnOutsideClick={true}\r\n//           showTitle={true}\r\n//           title=\"Information\"\r\n//         >\r\n//           <ScrollView width=\"100%\" height=\"100%\">\r\n//           </ScrollView>\r\n//         </Popup>\r\n//       </Col>\r\n//     );\r\n//   }\r\n\r\n//   renderTableData() {\r\n//     return this.state.jlNotification.map((documentData, index) => {\r\n//       return (\r\n//         <tr className=\"unread\" key={documentData.AutoID}>\r\n//           <td>\r\n//             <input\r\n//               type=\"checkbox\"\r\n//               onClick={() => this.updateMyData(documentData.AutoID)}\r\n//             />\r\n//           </td>\r\n//           <td>\r\n//             <img\r\n//               className=\"rounded-circle\"\r\n//               style={{ width: \"40px\" }}\r\n//               src={avatar1}\r\n//               alt=\"activity-user\"\r\n//             />\r\n//           </td>\r\n//           <td>\r\n//             <h6 className=\"mb-1\">{documentData.Name}</h6>\r\n//             <p className=\"m-0\">{documentData.FullName}</p>\r\n//           </td>\r\n//           <td>\r\n//             <h6 className=\"text-muted\">\r\n//               <i className=\"fa fa-circle text-c-green f-10 m-r-15\" />\r\n//               {Moment(documentData.CreateDate).format(\"YYYY-MM-DD\")}\r\n//             </h6>\r\n//           </td>\r\n//           <td>\r\n//             <div>\r\n//               {documentData.IsApproved == 1 ? (\r\n//                 <a\r\n//                   href={DEMO.BLANK_LINK}\r\n//                   className=\"label theme-bg2 text-white f-12\"\r\n//                 >\r\n//                   Approve\r\n//                 </a>\r\n//               ) : documentData.IsReject == 1 ? (\r\n//                 <a\r\n//                   href={DEMO.BLANK_LINK}\r\n//                   className=\"label theme-bg2 text-white f-12\"\r\n//                 >\r\n//                   Reject\r\n//                 </a>\r\n//               ) : (\r\n//                 <a\r\n//                   href={DEMO.BLANK_LINK}\r\n//                   className=\"label theme-bg2 text-white f-12\"\r\n//                 >\r\n//                   Pending\r\n//                 </a>\r\n//               )}\r\n//             </div>\r\n//           </td>\r\n//           <td>\r\n//             {documentData.IsReject == 1 || documentData.IsApproved == 1 ? (\r\n//               <div></div>\r\n//             ) : (\r\n//               <a\r\n//                 href={DEMO.BLANK_LINK}\r\n//                 className=\"label theme-bg2 text-white f-12\"\r\n//                 onClick={() => this.onClickReject(documentData.AutoID)}\r\n//               >\r\n//                 Reject\r\n//               </a>\r\n//             )}\r\n\r\n//             {documentData.IsReject == 1 || documentData.IsApproved == 1 ? (\r\n//               <div></div>\r\n//             ) : (\r\n//               <a\r\n//                 href={DEMO.BLANK_LINK}\r\n//                 onClick={() => this.onClickApprove(documentData.AutoID)}\r\n//                 className=\"label theme-bg text-white f-12\"\r\n//               >\r\n//                 Approve\r\n//               </a>\r\n//             )}\r\n\r\n//             <a\r\n//               href={DEMO.BLANK_LINK}\r\n//               onClick={() =>\r\n//                 this.ViewSetUp(\r\n//                   documentData.DocumentNumber,\r\n//                   documentData.DocumentTypeID,\r\n//                   documentData.SchoolID,\r\n//                   documentData.SunjectID,\r\n//                   documentData.PartID\r\n//                 )\r\n//               }\r\n//               className=\"label theme-bg text-white f-12\"\r\n//             >\r\n//               View\r\n//             </a>\r\n\r\n//             {/* <a\r\n//               href={DEMO.BLANK_LINK}\r\n//               onClick={() => this.VisibleFalse()}\r\n//               className=\"label theme-bg text-white f-12\"\r\n//             >\r\n//               Close\r\n//             </a> */}\r\n//           </td>\r\n//         </tr>\r\n//       );\r\n//     });\r\n//   }\r\n// }\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     data: state.loggedReducer,\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps)(Notification);\r\n"],"sourceRoot":""}