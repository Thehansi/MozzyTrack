{"version":3,"sources":["../node_modules/devextreme/esm/exporter/exceljs/export_format.js","../node_modules/devextreme/esm/exporter/exceljs/export.js","../node_modules/devextreme/esm/exporter/exceljs/export_merged_ranges_manager.js","../node_modules/devextreme/esm/exporter/exceljs/export_data_grid.js"],"names":["DEFINED_NUMBER_FORMTATS","thousands","millions","billions","trillions","percent","decimal","fixedpoint","exponential","currency","PERIOD_REGEXP","DAY_REGEXP","DO_REGEXP","STANDALONE_MONTH_REGEXP","HOUR_REGEXP","ANY_REGEXP","_convertDateFormat","format","formattedValue","dateLocalization","Date","toString","result","getFormat","value","split","join","map","datePart","index","replace","_convertDateFormatToOpenXml","defaultPattern","languageID","getLanguageId","languageIDStr","languageInfo","text","code","i","length","charCodeAt","ARABIC_ZERO_CODE","_hasArabicDigits","_getLanguageInfo","_includesCSVExpression","test","isNumeric","ExportFormat","dataType","precision","isObject","extend","formatter","type","isDefined","isString","toLowerCase","excelFormat","numberFormatter","getOpenXmlCurrencyFormat","stringFormat","_applyPrecision","_convertNumberFormat","escaped","_hasCSVInjection","textQualifier","substring","_hasCSVQuotedInjection","escapedTextQualifier","concat","replaceAll","Export","getFullOptions","options","fullOptions","worksheet","Error","topLeftCell","getCell","row","col","column","keepColumnWidths","loadPanel","enabled","encodeExecutableContent","convertDateForExcelJS","date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setNumberFormat","excelCell","numberFormat","numFmt","getCellStyles","dataProvider","styles","getStyles","forEach","style","tryConvertToExcelNumberFormat","newFormat","setAlignment","wrapText","horizontalAlignment","_excelCell$alignment","alignment","horizontal","vertical","setColumnsWidth","widths","startColumnIndex","columnWidth","isFinite","getColumn","width","Math","min","floor","export","Helpers","getLoadPanelTargetElement","getLoadPanelContainer","_component$_getIntern","exportLoadPanel","component","selectedRowsOnly","getDataProvider","internalComponent","_getInternalInstance","call","initialLoadPanelEnabledOption","option","hasWindow","$targetElement","$container","ExportLoadPanel","show","properties","outlineProperties","summaryBelow","summaryRight","cellRange","from","to","Promise","resolve","ready","done","columns","getColumns","dataRowsCount","getRowsCount","helpers","getColumnsWidths","_exportAllFieldHeaders","fieldHeaderRowsCount","_getFieldHeaderRowsCount","rowIndex","currentRowIndex","getRow","_isRowFieldHeadersRow","getRowAreaColCount","_exportFieldHeaders","_trySetOutlineLevel","exportRow","mergedRangesManager","applyMergedRages","worksheetViewSettings","views","rightToLeft","_isFrozenZone","Object","keys","indexOf","_getWorksheetFrozenState","_trySetAutoFilter","always","dispose","columnsCount","cellIndex","cellData","getCellData","_getFirstColumnIndex","updateMergedRanges","cellInfo","findMergedCellInfo","_isHeaderCell","masterCell","isDate","this","getStyleId","bold","_trySetFont","_customizeCell","cellSourceData","MergedRangesManager","mergedCells","mergedRanges","isCellInMergedRanges","getCellMerging","rowspan","colspan","allowToMergeRange","_allowToMergeRange","updateMergedCells","shouldReduceInfoRange","_isInfoCell","_allowExportRowFieldHeaders","push","isHeaderCell","j","range","startRowIndex","fullAddress","endRowIndex","endColumnIndex","mergeCells","DataGridHelpers","customizeCell","autoFilterEnabled","autoFilter","dataRange","getHeaderRowCount","font","state","ySplit","getFrozenArea","y","outlineLevel","getGroupLevel","gridCell","isFunction","exportDataGrid","NAME","_getFullOptions","_getLoadPanelTargetElement","_getLoadPanelContainer","getView","element","parent"],"mappings":"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","file":"static/js/3.c7dc25fb.chunk.js","sourcesContent":["/**\r\n * DevExtreme (esm/exporter/exceljs/export_format.js)\r\n * Version: 23.2.3\r\n * Build date: Tue Nov 28 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    format as stringFormat\r\n} from \"../../core/utils/string\";\r\nimport numberFormatter from \"../../localization/number\";\r\nimport dateLocalization from \"../../localization/date\";\r\nimport {\r\n    isDefined,\r\n    isString,\r\n    isObject,\r\n    isNumeric\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    getFormat\r\n} from \"../../localization/ldml/date.format\";\r\nimport {\r\n    getLanguageId\r\n} from \"../../localization/language_codes\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport \"../../localization/currency\";\r\nvar ARABIC_ZERO_CODE = 1632;\r\nvar DEFINED_NUMBER_FORMTATS = {\r\n    thousands: \"#,##0{0},&quot;K&quot;\",\r\n    millions: \"#,##0{0},,&quot;M&quot;\",\r\n    billions: \"#,##0{0},,,&quot;B&quot;\",\r\n    trillions: \"#,##0{0},,,,&quot;T&quot;\",\r\n    percent: \"0{0}%\",\r\n    decimal: \"#{0}\",\r\n    fixedpoint: \"#,##0{0}\",\r\n    exponential: \"0{0}E+00\",\r\n    currency: \" \"\r\n};\r\nvar PERIOD_REGEXP = /a+/g;\r\nvar DAY_REGEXP = /E/g;\r\nvar DO_REGEXP = /dE+/g;\r\nvar STANDALONE_MONTH_REGEXP = /L/g;\r\nvar HOUR_REGEXP = /h/g;\r\nvar ANY_REGEXP = /./g;\r\n\r\nfunction _applyPrecision(format, precision) {\r\n    var result;\r\n    var i;\r\n    if (precision > 0) {\r\n        result = \"decimal\" !== format ? \".\" : \"\";\r\n        for (i = 0; i < precision; i++) {\r\n            result += \"0\"\r\n        }\r\n        return result\r\n    }\r\n    return \"\"\r\n}\r\n\r\nfunction _hasArabicDigits(text) {\r\n    var code;\r\n    for (var i = 0; i < text.length; i++) {\r\n        code = text.charCodeAt(i);\r\n        if (code >= ARABIC_ZERO_CODE && code < ARABIC_ZERO_CODE + 10) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction _convertDateFormat(format) {\r\n    var formattedValue = (dateLocalization.format(new Date(2009, 8, 8, 6, 5, 4), format) || \"\").toString();\r\n    var result = getFormat(value => dateLocalization.format(value, format));\r\n    if (result) {\r\n        result = _convertDateFormatToOpenXml(result);\r\n        result = _getLanguageInfo(formattedValue) + result\r\n    }\r\n    return result\r\n}\r\n\r\nfunction _getLanguageInfo(defaultPattern) {\r\n    var languageID = getLanguageId();\r\n    var languageIDStr = languageID ? languageID.toString(16) : \"\";\r\n    var languageInfo = \"\";\r\n    if (_hasArabicDigits(defaultPattern)) {\r\n        while (languageIDStr.length < 3) {\r\n            languageIDStr = \"0\" + languageIDStr\r\n        }\r\n        languageInfo = \"[$-2010\" + languageIDStr + \"]\"\r\n    } else if (languageIDStr) {\r\n        languageInfo = \"[$-\" + languageIDStr + \"]\"\r\n    }\r\n    return languageInfo\r\n}\r\n\r\nfunction _convertDateFormatToOpenXml(format) {\r\n    return format.split(\"/\").join(\"\\\\/\").split(\"'\").map((function(datePart, index) {\r\n        if (index % 2 === 0) {\r\n            return datePart.replace(PERIOD_REGEXP, \"AM/PM\").replace(DO_REGEXP, \"d\").replace(DAY_REGEXP, \"d\").replace(STANDALONE_MONTH_REGEXP, \"M\").replace(HOUR_REGEXP, \"H\").split(\"[\").join(\"\\\\[\").split(\"]\").join(\"\\\\]\")\r\n        }\r\n        if (datePart) {\r\n            return datePart.replace(ANY_REGEXP, \"\\\\$&\")\r\n        }\r\n        return \"'\"\r\n    })).join(\"\")\r\n}\r\n\r\nfunction _convertNumberFormat(format, precision, currency) {\r\n    var result;\r\n    var excelFormat;\r\n    if (\"currency\" === format) {\r\n        excelFormat = numberFormatter.getOpenXmlCurrencyFormat(currency)\r\n    } else {\r\n        excelFormat = DEFINED_NUMBER_FORMTATS[format.toLowerCase()]\r\n    }\r\n    if (excelFormat) {\r\n        result = stringFormat(excelFormat, _applyPrecision(format, precision))\r\n    }\r\n    return result\r\n}\r\n\r\nfunction _hasCSVInjection(value) {\r\n    if (!value || value.length < 2) {\r\n        return false\r\n    }\r\n    return _includesCSVExpression(value)\r\n}\r\n\r\nfunction _hasCSVQuotedInjection(value, textQualifier) {\r\n    if (!value || value.length < 4 || value[0] !== textQualifier) {\r\n        return false\r\n    }\r\n    return _includesCSVExpression(value.substring(1, value.length - 1))\r\n}\r\n\r\nfunction _includesCSVExpression(value) {\r\n    if (!value) {\r\n        return false\r\n    }\r\n    if (/^[@=\\t\\r]/.test(value)) {\r\n        return true\r\n    }\r\n    if (!/^[+-]/.test(value)) {\r\n        return false\r\n    }\r\n    return !isNumeric(value)\r\n}\r\nexport var ExportFormat = {\r\n    formatObjectConverter(format, dataType) {\r\n        var result = {\r\n            format: format,\r\n            precision: format && format.precision,\r\n            dataType: dataType\r\n        };\r\n        if (isObject(format)) {\r\n            return extend(result, format, {\r\n                format: format.formatter || format.type,\r\n                currency: format.currency\r\n            })\r\n        }\r\n        return result\r\n    },\r\n    convertFormat(format, precision, type, currency) {\r\n        if (isDefined(format)) {\r\n            if (\"date\" === type) {\r\n                return _convertDateFormat(format)\r\n            } else if (isString(format) && DEFINED_NUMBER_FORMTATS[format.toLowerCase()]) {\r\n                return _convertNumberFormat(format, precision, currency)\r\n            }\r\n        }\r\n    },\r\n    encode(value) {\r\n        var escaped = false;\r\n        if (_hasCSVInjection(value)) {\r\n            escaped = true\r\n        } else if (_hasCSVQuotedInjection(value, '\"')) {\r\n            value = value.substring(1, value.length - 1);\r\n            escaped = true\r\n        }\r\n        if (escaped) {\r\n            var escapedTextQualifier = \"\".concat('\"').concat('\"');\r\n            return \"\\\"'\" + value.replaceAll('\"', escapedTextQualifier) + '\"'\r\n        }\r\n        return value\r\n    }\r\n};\r\n","/**\r\n * DevExtreme (esm/exporter/exceljs/export.js)\r\n * Version: 23.2.3\r\n * Build date: Tue Nov 28 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined,\r\n    isString,\r\n    isDate,\r\n    isObject\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    ExportFormat\r\n} from \"./export_format\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    ExportLoadPanel\r\n} from \"../common/export_load_panel\";\r\nimport {\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nvar MAX_DIGIT_WIDTH_IN_PIXELS = 7;\r\nvar MAX_EXCEL_COLUMN_WIDTH = 255;\r\nexport var Export = {\r\n    getFullOptions(options) {\r\n        var fullOptions = extend({}, options);\r\n        if (!(isDefined(fullOptions.worksheet) && isObject(fullOptions.worksheet))) {\r\n            throw Error('The \"worksheet\" field must contain an object.')\r\n        }\r\n        if (!isDefined(fullOptions.topLeftCell)) {\r\n            fullOptions.topLeftCell = {\r\n                row: 1,\r\n                column: 1\r\n            }\r\n        } else if (isString(fullOptions.topLeftCell)) {\r\n            var {\r\n                row: row,\r\n                col: col\r\n            } = fullOptions.worksheet.getCell(fullOptions.topLeftCell);\r\n            fullOptions.topLeftCell = {\r\n                row: row,\r\n                column: col\r\n            }\r\n        }\r\n        if (!isDefined(fullOptions.keepColumnWidths)) {\r\n            fullOptions.keepColumnWidths = true\r\n        }\r\n        if (!isDefined(fullOptions.loadPanel)) {\r\n            fullOptions.loadPanel = {}\r\n        }\r\n        if (!isDefined(fullOptions.loadPanel.enabled)) {\r\n            fullOptions.loadPanel.enabled = true\r\n        }\r\n        if (!isDefined(fullOptions.encodeExecutableContent)) {\r\n            fullOptions.encodeExecutableContent = false\r\n        }\r\n        return fullOptions\r\n    },\r\n    convertDateForExcelJS: date => new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds())),\r\n    setNumberFormat(excelCell, numberFormat) {\r\n        excelCell.numFmt = numberFormat\r\n    },\r\n    getCellStyles(dataProvider) {\r\n        var styles = dataProvider.getStyles();\r\n        styles.forEach(style => {\r\n            var numberFormat = this.tryConvertToExcelNumberFormat(style.format, style.dataType);\r\n            if (isDefined(numberFormat)) {\r\n                numberFormat = numberFormat.replace(/&quot;/g, '\"')\r\n            }\r\n            style.numberFormat = numberFormat\r\n        });\r\n        return styles\r\n    },\r\n    tryConvertToExcelNumberFormat(format, dataType) {\r\n        var newFormat = ExportFormat.formatObjectConverter(format, dataType);\r\n        var currency = newFormat.currency;\r\n        format = newFormat.format;\r\n        dataType = newFormat.dataType;\r\n        return ExportFormat.convertFormat(format, newFormat.precision, dataType, currency)\r\n    },\r\n    setAlignment(excelCell, wrapText, horizontalAlignment) {\r\n        var _excelCell$alignment;\r\n        excelCell.alignment = null !== (_excelCell$alignment = excelCell.alignment) && void 0 !== _excelCell$alignment ? _excelCell$alignment : {};\r\n        if (isDefined(wrapText)) {\r\n            excelCell.alignment.wrapText = wrapText\r\n        }\r\n        if (isDefined(horizontalAlignment)) {\r\n            excelCell.alignment.horizontal = horizontalAlignment\r\n        }\r\n        excelCell.alignment.vertical = \"top\"\r\n    },\r\n    setColumnsWidth(worksheet, widths, startColumnIndex) {\r\n        if (!isDefined(widths)) {\r\n            return\r\n        }\r\n        for (var i = 0; i < widths.length; i++) {\r\n            var columnWidth = widths[i];\r\n            if (\"number\" === typeof columnWidth && isFinite(columnWidth)) {\r\n                worksheet.getColumn(startColumnIndex + i).width = Math.min(MAX_EXCEL_COLUMN_WIDTH, Math.floor(columnWidth / MAX_DIGIT_WIDTH_IN_PIXELS * 100) / 100)\r\n            }\r\n        }\r\n    },\r\n    export (options, Helpers, getLoadPanelTargetElement, getLoadPanelContainer) {\r\n        var _component$_getIntern;\r\n        var {\r\n            component: component,\r\n            worksheet: worksheet,\r\n            topLeftCell: topLeftCell,\r\n            keepColumnWidths: keepColumnWidths,\r\n            selectedRowsOnly: selectedRowsOnly,\r\n            loadPanel: loadPanel,\r\n            encodeExecutableContent: encodeExecutableContent\r\n        } = options;\r\n        var dataProvider = component.getDataProvider(selectedRowsOnly);\r\n        var internalComponent = (null === (_component$_getIntern = component._getInternalInstance) || void 0 === _component$_getIntern ? void 0 : _component$_getIntern.call(component)) || component;\r\n        var initialLoadPanelEnabledOption = internalComponent.option(\"loadPanel\") && internalComponent.option(\"loadPanel\").enabled;\r\n        if (initialLoadPanelEnabledOption) {\r\n            component.option(\"loadPanel.enabled\", false)\r\n        }\r\n        var exportLoadPanel;\r\n        if (loadPanel.enabled && hasWindow()) {\r\n            var $targetElement = getLoadPanelTargetElement(component);\r\n            var $container = getLoadPanelContainer(component);\r\n            exportLoadPanel = new ExportLoadPanel(component, $targetElement, $container, loadPanel);\r\n            exportLoadPanel.show()\r\n        }\r\n        var wrapText = !!component.option(\"wordWrapEnabled\");\r\n        worksheet.properties.outlineProperties = {\r\n            summaryBelow: false,\r\n            summaryRight: false\r\n        };\r\n        var cellRange = {\r\n            from: {\r\n                row: topLeftCell.row,\r\n                column: topLeftCell.column\r\n            },\r\n            to: {\r\n                row: topLeftCell.row,\r\n                column: topLeftCell.column\r\n            }\r\n        };\r\n        return new Promise(resolve => {\r\n            dataProvider.ready().done(() => {\r\n                var columns = dataProvider.getColumns();\r\n                var dataRowsCount = dataProvider.getRowsCount();\r\n                var helpers = new Helpers(component, dataProvider, worksheet, options);\r\n                if (keepColumnWidths) {\r\n                    this.setColumnsWidth(worksheet, dataProvider.getColumnsWidths(), cellRange.from.column)\r\n                }\r\n                helpers._exportAllFieldHeaders(columns, this.setAlignment);\r\n                var fieldHeaderRowsCount = helpers._getFieldHeaderRowsCount();\r\n                cellRange.to.row = cellRange.from.row + fieldHeaderRowsCount;\r\n                var styles = this.getCellStyles(dataProvider);\r\n                for (var rowIndex = 0; rowIndex < dataRowsCount; rowIndex++) {\r\n                    var currentRowIndex = cellRange.from.row + fieldHeaderRowsCount + rowIndex;\r\n                    var row = worksheet.getRow(currentRowIndex);\r\n                    var startColumnIndex = 0;\r\n                    if (helpers._isRowFieldHeadersRow(rowIndex)) {\r\n                        startColumnIndex = dataProvider.getRowAreaColCount();\r\n                        helpers._exportFieldHeaders(\"row\", currentRowIndex, 0, startColumnIndex, this.setAlignment)\r\n                    }\r\n                    helpers._trySetOutlineLevel(row, rowIndex);\r\n                    this.exportRow(dataProvider, helpers, row, rowIndex, startColumnIndex, columns.length, wrapText, styles, encodeExecutableContent);\r\n                    cellRange.to.row = currentRowIndex\r\n                }\r\n                helpers.mergedRangesManager.applyMergedRages();\r\n                cellRange.to.column += columns.length > 0 ? columns.length - 1 : 0;\r\n                var worksheetViewSettings = worksheet.views[0] || {};\r\n                if (component.option(\"rtlEnabled\")) {\r\n                    worksheetViewSettings.rightToLeft = true\r\n                }\r\n                if (helpers._isFrozenZone(dataProvider)) {\r\n                    if (-1 === Object.keys(worksheetViewSettings).indexOf(\"state\")) {\r\n                        extend(worksheetViewSettings, helpers._getWorksheetFrozenState(cellRange))\r\n                    }\r\n                    helpers._trySetAutoFilter(cellRange)\r\n                }\r\n                if (Object.keys(worksheetViewSettings).length > 0) {\r\n                    worksheet.views = [worksheetViewSettings]\r\n                }\r\n                resolve(cellRange)\r\n            }).always(() => {\r\n                if (initialLoadPanelEnabledOption) {\r\n                    component.option(\"loadPanel.enabled\", initialLoadPanelEnabledOption)\r\n                }\r\n                if (loadPanel.enabled && hasWindow()) {\r\n                    exportLoadPanel.dispose()\r\n                }\r\n            })\r\n        })\r\n    },\r\n    exportRow(dataProvider, helpers, row, rowIndex, startColumnIndex, columnsCount, wrapText, styles, encodeExecutableContent) {\r\n        for (var cellIndex = startColumnIndex; cellIndex < columnsCount; cellIndex++) {\r\n            var cellData = dataProvider.getCellData(rowIndex, cellIndex, true);\r\n            var excelCell = row.getCell(helpers._getFirstColumnIndex() + cellIndex);\r\n            helpers.mergedRangesManager.updateMergedRanges(excelCell, rowIndex, cellIndex, helpers);\r\n            var cellInfo = helpers.mergedRangesManager.findMergedCellInfo(rowIndex, cellIndex, helpers._isHeaderCell(rowIndex, cellIndex));\r\n            if (isDefined(cellInfo) && excelCell !== cellInfo.masterCell) {\r\n                excelCell.style = cellInfo.masterCell.style;\r\n                excelCell.value = cellInfo.masterCell.value\r\n            } else {\r\n                if (isDate(cellData.value)) {\r\n                    excelCell.value = this.convertDateForExcelJS(cellData.value)\r\n                } else {\r\n                    excelCell.value = cellData.value\r\n                }\r\n                if (isDefined(excelCell.value)) {\r\n                    var {\r\n                        bold: bold,\r\n                        alignment: horizontalAlignment,\r\n                        numberFormat: numberFormat\r\n                    } = styles[dataProvider.getStyleId(rowIndex, cellIndex)];\r\n                    if (isDefined(numberFormat)) {\r\n                        this.setNumberFormat(excelCell, numberFormat)\r\n                    } else if (isString(excelCell.value) && /^[@=+-]/.test(excelCell.value)) {\r\n                        this.setNumberFormat(excelCell, \"@\")\r\n                    }\r\n                    helpers._trySetFont(excelCell, bold);\r\n                    this.setAlignment(excelCell, wrapText, horizontalAlignment)\r\n                }\r\n            }\r\n            helpers._customizeCell(excelCell, cellData.cellSourceData);\r\n            if (encodeExecutableContent) {\r\n                excelCell.value = ExportFormat.encode(excelCell.value)\r\n            }\r\n        }\r\n    }\r\n};\r\n","/**\r\n * DevExtreme (esm/exporter/exceljs/export_merged_ranges_manager.js)\r\n * Version: 23.2.3\r\n * Build date: Tue Nov 28 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nclass MergedRangesManager {\r\n    constructor(dataProvider, worksheet) {\r\n        this.dataProvider = dataProvider;\r\n        this.worksheet = worksheet;\r\n        this.mergedCells = [];\r\n        this.mergedRanges = []\r\n    }\r\n    updateMergedRanges(excelCell, rowIndex, cellIndex, helpers) {\r\n        if (helpers._isHeaderCell(rowIndex, cellIndex) && !this.isCellInMergedRanges(rowIndex, cellIndex)) {\r\n            var {\r\n                rowspan: rowspan,\r\n                colspan: colspan\r\n            } = this.dataProvider.getCellMerging(rowIndex, cellIndex);\r\n            var isMasterCellOfMergedRange = colspan || rowspan;\r\n            if (isMasterCellOfMergedRange) {\r\n                var allowToMergeRange = helpers._allowToMergeRange(rowIndex, cellIndex, rowspan, colspan);\r\n                this.updateMergedCells(excelCell, rowIndex, cellIndex, rowspan, colspan);\r\n                if (allowToMergeRange) {\r\n                    var shouldReduceInfoRange = helpers._isInfoCell(rowIndex, cellIndex) && helpers._allowExportRowFieldHeaders();\r\n                    this.mergedRanges.push({\r\n                        masterCell: excelCell,\r\n                        rowspan: rowspan - (shouldReduceInfoRange && rowspan > 0),\r\n                        colspan: colspan\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n    isCellInMergedRanges(rowIndex, cellIndex) {\r\n        return this.mergedCells[rowIndex] && this.mergedCells[rowIndex][cellIndex]\r\n    }\r\n    findMergedCellInfo(rowIndex, cellIndex, isHeaderCell) {\r\n        if (isHeaderCell && this.isCellInMergedRanges(rowIndex, cellIndex)) {\r\n            return this.mergedCells[rowIndex][cellIndex]\r\n        }\r\n    }\r\n    updateMergedCells(excelCell, rowIndex, cellIndex, rowspan, colspan) {\r\n        for (var i = rowIndex; i <= rowIndex + rowspan; i++) {\r\n            for (var j = cellIndex; j <= cellIndex + colspan; j++) {\r\n                if (!this.mergedCells[i]) {\r\n                    this.mergedCells[i] = []\r\n                }\r\n                this.mergedCells[i][j] = {\r\n                    masterCell: excelCell\r\n                }\r\n            }\r\n        }\r\n    }\r\n    addMergedRange(masterCell, rowspan, colspan) {\r\n        this.mergedRanges.push({\r\n            masterCell: masterCell,\r\n            rowspan: rowspan,\r\n            colspan: colspan\r\n        })\r\n    }\r\n    applyMergedRages() {\r\n        this.mergedRanges.forEach(range => {\r\n            var startRowIndex = range.masterCell.fullAddress.row;\r\n            var startColumnIndex = range.masterCell.fullAddress.col;\r\n            var endRowIndex = startRowIndex + range.rowspan;\r\n            var endColumnIndex = startColumnIndex + range.colspan;\r\n            this.worksheet.mergeCells(startRowIndex, startColumnIndex, endRowIndex, endColumnIndex)\r\n        })\r\n    }\r\n}\r\nexport {\r\n    MergedRangesManager\r\n};\r\n","/**\r\n * DevExtreme (esm/exporter/exceljs/export_data_grid.js)\r\n * Version: 23.2.3\r\n * Build date: Tue Nov 28 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined,\r\n    isObject,\r\n    isFunction\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    Export\r\n} from \"./export\";\r\nimport {\r\n    MergedRangesManager\r\n} from \"./export_merged_ranges_manager\";\r\nclass DataGridHelpers {\r\n    constructor(component, dataProvider, worksheet, options) {\r\n        this.component = component;\r\n        this.dataProvider = dataProvider;\r\n        this.worksheet = worksheet;\r\n        this.mergedRangesManager = new MergedRangesManager(dataProvider, worksheet);\r\n        this.topLeftCell = options.topLeftCell;\r\n        this.customizeCell = options.customizeCell;\r\n        this.autoFilterEnabled = options.autoFilterEnabled\r\n    }\r\n    _getFirstColumnIndex() {\r\n        return this.topLeftCell.column\r\n    }\r\n    _getFieldHeaderRowsCount() {\r\n        return 0\r\n    }\r\n    _trySetAutoFilter(cellRange) {\r\n        if (this.autoFilterEnabled) {\r\n            if (!isDefined(this.worksheet.autoFilter) && this.dataProvider.getRowsCount() > 0) {\r\n                var dataRange = {\r\n                    from: {\r\n                        row: cellRange.from.row + this.dataProvider.getHeaderRowCount() - 1,\r\n                        column: cellRange.from.column\r\n                    },\r\n                    to: cellRange.to\r\n                };\r\n                this.worksheet.autoFilter = dataRange\r\n            }\r\n        }\r\n    }\r\n    _trySetFont(excelCell, bold) {\r\n        if (isDefined(bold)) {\r\n            excelCell.font = excelCell.font || {};\r\n            excelCell.font.bold = bold\r\n        }\r\n    }\r\n    _getWorksheetFrozenState(cellRange) {\r\n        return {\r\n            state: \"frozen\",\r\n            ySplit: cellRange.from.row + this.dataProvider.getFrozenArea().y - 1\r\n        }\r\n    }\r\n    _trySetOutlineLevel(row, rowIndex) {\r\n        if (rowIndex >= this.dataProvider.getHeaderRowCount()) {\r\n            row.outlineLevel = this.dataProvider.getGroupLevel(rowIndex)\r\n        }\r\n    }\r\n    _isFrozenZone(dataProvider) {\r\n        return dataProvider.getHeaderRowCount() > 0\r\n    }\r\n    _isHeaderCell(rowIndex) {\r\n        return rowIndex < this.dataProvider.getHeaderRowCount()\r\n    }\r\n    _isInfoCell() {\r\n        return false\r\n    }\r\n    _allowToMergeRange() {\r\n        return true\r\n    }\r\n    _getAllFieldHeaders() {\r\n        return []\r\n    }\r\n    _customizeCell(excelCell, gridCell) {\r\n        if (isFunction(this.customizeCell)) {\r\n            this.customizeCell({\r\n                excelCell: excelCell,\r\n                gridCell: gridCell\r\n            })\r\n        }\r\n    }\r\n    _exportFieldHeaders() {}\r\n    _exportAllFieldHeaders() {}\r\n    _isRowFieldHeadersRow() {}\r\n}\r\n\r\nfunction exportDataGrid(options) {\r\n    return Export.export(_getFullOptions(options), DataGridHelpers, _getLoadPanelTargetElement, _getLoadPanelContainer)\r\n}\r\n\r\nfunction _getFullOptions(options) {\r\n    if (!(isDefined(options) && isObject(options))) {\r\n        throw Error('The \"exportDataGrid\" method requires a configuration object.')\r\n    }\r\n    if (!(isDefined(options.component) && isObject(options.component) && \"dxDataGrid\" === options.component.NAME)) {\r\n        throw Error('The \"component\" field must contain a DataGrid instance.')\r\n    }\r\n    if (!isDefined(options.selectedRowsOnly)) {\r\n        options.selectedRowsOnly = false\r\n    }\r\n    if (!isDefined(options.autoFilterEnabled)) {\r\n        options.autoFilterEnabled = false\r\n    }\r\n    return Export.getFullOptions(options)\r\n}\r\n\r\nfunction _getLoadPanelTargetElement(component) {\r\n    return component.getView(\"rowsView\").element()\r\n}\r\n\r\nfunction _getLoadPanelContainer(component) {\r\n    return component.getView(\"rowsView\").element().parent()\r\n}\r\nexport {\r\n    exportDataGrid\r\n};\r\n"],"sourceRoot":""}