{"version":3,"sources":["App/components/MainCard.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","Forms/Master/PR-Type.jsx"],"names":["MainCard","state","isOption","props","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","this","className","alignRight","Toggle","id","Menu","as","Item","onClick","prevState","href","DEMO","BLANK_LINK","Header","Title","title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","in","Body","backgroundColor","children","Component","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","CreatePRType","FormRef","useRef","useState","setISAdd","setISEdit","setIsView","setUserName","prtypes","useEffect","setDetails","authData","JSON","parse","localStorage","getItem","axios","get","params","UsersID","UserName","MenuID","checkAuthentication","data","length","UserView","response","console","log","catch","Swal","fire","icon","text","confirmButtonColor","confirmButtonText","UserAdd","UserEdit","current","instance","dataSource","showBorders","wordWrapEnabled","allowSearch","selection","mode","hoverStateEnabled","visible","defaultPageSize","dataField","caption"],"mappings":"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","file":"static/js/37.c034e0b8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Dropdown, Card, Collapse } from \"react-bootstrap\";\r\nimport windowSize from \"react-window-size\";\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\n{\r\n  /* <Card className=\"customCard\"></Card>\r\n\r\n.customCard: {\r\n    background: blue !important;\r\n} */\r\n}\r\nclass MainCard extends Component {\r\n  state = {\r\n    isOption: this.props.isOption,\r\n    fullCard: false,\r\n    collapseCard: false,\r\n    loadCard: false,\r\n    cardRemove: false,\r\n  };\r\n\r\n  cardReloadHandler = () => {\r\n    this.setState({ loadCard: true });\r\n    setInterval(() => {\r\n      this.setState({ loadCard: false });\r\n    }, 3000);\r\n  };\r\n\r\n  cardRemoveHandler = () => {\r\n    this.setState({ cardRemove: true });\r\n  };\r\n\r\n  render() {\r\n    let fullScreenStyle, loader, cardHeaderRight, cardHeader, cardColor;\r\n    let card = \"\";\r\n    let cardClass = [];\r\n\r\n    if (this.state.isOption) {\r\n      cardHeaderRight = (\r\n        <div className=\"card-header-right\">\r\n          <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n            <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n              <i className=\"feather icon-more-horizontal\" />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu as=\"ul\" className=\"list-unstyled card-option\">\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { fullCard: !prevState.fullCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.fullCard\r\n                      ? \"feather icon-minimize\"\r\n                      : \"feather icon-maximize\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.fullCard ? \"Restore\" : \"Maximize\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { collapseCard: !prevState.collapseCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.collapseCard\r\n                      ? \"feather icon-plus\"\r\n                      : \"feather icon-minus\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.collapseCard ? \"Expand\" : \"Collapse\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardReloadHandler}\r\n              >\r\n                <i className=\"feather icon-refresh-cw\" />\r\n                <a href={DEMO.BLANK_LINK}> Reload </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardRemoveHandler}\r\n              >\r\n                <i className=\"feather icon-trash\" />\r\n                <a href={DEMO.BLANK_LINK}> Remove </a>\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    cardHeader = (\r\n      <Card.Header>\r\n        <Card.Title as=\"h5\">{this.props.title}</Card.Title>\r\n        {cardHeaderRight}\r\n      </Card.Header>\r\n    );\r\n\r\n    if (this.state.fullCard) {\r\n      cardClass = [...cardClass, \"full-card\"];\r\n      fullScreenStyle = {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        width: this.props.windowWidth,\r\n        height: this.props.windowHeight,\r\n      };\r\n    }\r\n\r\n    if (this.state.loadCard) {\r\n      cardClass = [...cardClass, \"card-load\"];\r\n      loader = (\r\n        <div className=\"card-loader\">\r\n          <i className=\"pct-loader1 anim-rotate\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.cardRemove) {\r\n      cardClass = [...cardClass, \"d-none\"];\r\n    }\r\n\r\n    if (this.props.cardClass) {\r\n      cardClass = [...cardClass, this.props.cardClass];\r\n    }\r\n\r\n    card = (\r\n      <Card className={cardClass.join(\" \")} style={fullScreenStyle}>\r\n        {cardHeader}\r\n        <Collapse in={!this.state.collapseCard}>\r\n          <div>\r\n            <Card.Body style={{ backgroundColor: \"rgb(185, 210, 214)\" }}>\r\n              {this.props.children}\r\n            </Card.Body>\r\n          </div>\r\n        </Collapse>\r\n        {loader}\r\n      </Card>\r\n    );\r\n\r\n    return <Aux>{card}</Aux>;\r\n  }\r\n}\r\n\r\nexport default MainCard;\r\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React, { useRef, useState, useEffect, useCallback } from \"react\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport { Button, Navbar } from \"react-bootstrap\";\r\nimport { ColorBox, LoadPanel } from \"devextreme-react\";\r\nimport DataGrid, {\r\n  Column,\r\n  SearchPanel,\r\n  GroupPanel,\r\n  Paging,\r\n  Editing,\r\n  Label,\r\n} from \"devextreme-react/data-grid\";\r\nimport { FileUploader } from \"devextreme-react\";\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\nimport notify from \"devextreme/ui/notify\";\r\nimport Form, { Item, GroupItem, RequiredRule } from \"devextreme-react/form\";\r\n\r\nconst CreatePRType = () => {\r\n  const FormRef = useRef(null);\r\n  const [rowIndex, setRowIndex] = useState(0);\r\n  const [isAdd, setISAdd] = useState(true);\r\n  const [isEdit, setISEdit] = useState(true);\r\n  const [isView, setIsView] = useState(true);\r\n  const [updateRow, setUpdateRow] = useState(true);\r\n\r\n  const [userName, setUserName] = useState({});\r\n  const [state, setState] = useState({\r\n    // jForm: {\r\n    //   PRTypeCode: \"\",\r\n    //   Discription: \"\",\r\n    //   Active: true,\r\n    // },\r\n    // viewPRTypeCode: 0,\r\n    prtypes: [],\r\n    // LoadPanelVisible: false,\r\n    // ListViewing: false,\r\n    // GroupTable: [],\r\n    // jSetForm: {},\r\n    // boolValue: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setDetails();\r\n  }, []);\r\n  const setDetails = async () => {\r\n    const authData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const checkAuthentication = await axios.get(\r\n      \"/api/CheckUserAuthentication\",\r\n      {\r\n        params: { UsersID: authData.UserName, MenuID: 1011 },\r\n      }\r\n    );\r\n    setUserName(authData.UserName);\r\n    if (checkAuthentication.data.length != 0) {\r\n      if (checkAuthentication.data[0].UserView) {\r\n        setIsView(false);\r\n        axios\r\n          .get(\"/api/getallprtype\")\r\n          .then((response) => {\r\n            console.log(response.data);\r\n            setState((prevState) => ({\r\n              ...prevState,\r\n              prtypes: response.data,\r\n            }));\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error:\", error);\r\n            Swal.fire({\r\n              icon: \"error\",\r\n              title: '<span style=\"color: red;\">Error!</span>',\r\n              text: \"Failed to view PRType details\",\r\n              confirmButtonColor: \"#d33\",\r\n              confirmButtonText: \"OK\",\r\n            });\r\n          });\r\n      }\r\n      if (checkAuthentication.data[0].UserAdd) {\r\n        setISAdd(false);\r\n      }\r\n      if (checkAuthentication.data[0].UserEdit) {\r\n        console.log(\"AWA\");\r\n        setISEdit(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const FormLayout = FormRef.current && FormRef.current.instance;\r\n\r\n  // const handleChange = (e) => {\r\n  //   const { name, value } = e.target;\r\n  //   setState((prevState) => ({\r\n  //     ...prevState,\r\n  //     jForm: {\r\n  //       ...prevState.jForm,\r\n  //       [name]: value,\r\n  //     },\r\n  //   }));\r\n  // };\r\n\r\n  // const OnNotification = (message, type) => {\r\n  //   notify({\r\n  //     message: message,\r\n  //     type: type,\r\n  //     displayTime: 3000,\r\n  //     position: { at: \"top right\", offset: \"50\" },\r\n  //   });\r\n  // };\r\n\r\n  // const OnSaveValidation = async () => {\r\n  //   if (!FormLayout.validate().isValid) {\r\n  //     OnNotification(\"Fields marked with * are required\", \"error\");\r\n  //     return false;\r\n  //   }\r\n  //   return true;\r\n  // };\r\n\r\n  // const handleSave = async (e) => {\r\n  //   if (await OnSaveValidation()) {\r\n  //     const isUpdate = await axios.get(\"/api/checkPRCode\", {\r\n  //       params: { PRTypeCode: state.jForm.PRTypeCode },\r\n  //     });\r\n\r\n  //     if (updateRow) {\r\n  //       if (isUpdate.data[0].prType_exists == 0) {\r\n  //         axios\r\n  //           .post(\"/api/addPRType\", {\r\n  //             prtype: JSON.stringify(state.jForm),\r\n  //             PRTypeCode: JSON.stringify(state.jForm.PRTypeCode),\r\n  //             UserID: userName,\r\n  //           })\r\n  //           .then((response) => {\r\n  //             console.log(response.data);\r\n  //             Swal.fire({\r\n  //               icon: \"success\",\r\n  //               title: \"Success\",\r\n  //               text: \"Data saved successfully!\",\r\n  //             }).then((res) => {\r\n  //               const newPRType = state.jForm;\r\n  //               if (!isView) {\r\n  //                 if (state.boolValue) {\r\n  //                   const oldPrtypes = state.prtypes;\r\n  //                   oldPrtypes[rowIndex] = state.jForm;\r\n  //                   setState((prevState) => ({\r\n  //                     ...prevState,\r\n  //                     prtypes: oldPrtypes,\r\n  //                     jForm: { Active: true },\r\n  //                     boolValue: false,\r\n  //                   }));\r\n  //                   window.location.reload();\r\n  //                 } else {\r\n  //                   setState((prevState) => ({\r\n  //                     ...prevState,\r\n  //                     prtypes: [...prevState.prtypes, newPRType],\r\n  //                     jForm: {},\r\n  //                     boolValue: false,\r\n  //                   }));\r\n  //                   window.location.reload();\r\n  //                 }\r\n  //               }\r\n  //             });\r\n  //           })\r\n  //           .catch((error) => {\r\n  //             console.error(\"Error:\", error);\r\n  //             Swal.fire({\r\n  //               icon: \"error\",\r\n  //               title: '<span style=\"color: red;\">Error!</span>',\r\n  //               text: \"Failed to save PR Type details\",\r\n  //               confirmButtonColor: \"#d33\",\r\n  //               confirmButtonText: \"OK\",\r\n  //             });\r\n  //           });\r\n  //       } else {\r\n  //         OnNotification(\"Already added PR Type Code\", \"error\");\r\n  //       }\r\n  //     } else {\r\n  //       axios\r\n  //         .post(\"/api/addPRType\", {\r\n  //           prtype: JSON.stringify(state.jForm),\r\n  //           PRTypeCode: JSON.stringify(state.jForm.PRTypeCode),\r\n  //           UserID: userName,\r\n  //         })\r\n  //         .then((response) => {\r\n  //           console.log(response.data);\r\n  //           Swal.fire({\r\n  //             icon: \"success\",\r\n  //             title: \"Success\",\r\n  //             text: \"Data update successfully!\",\r\n  //           }).then((res) => {\r\n  //             const newPRType = state.jForm;\r\n  //             if (!isView) {\r\n  //               if (state.boolValue) {\r\n  //                 const oldPrtypes = state.prtypes;\r\n  //                 oldPrtypes[rowIndex] = state.jForm;\r\n  //                 setState((prevState) => ({\r\n  //                   ...prevState,\r\n  //                   prtypes: oldPrtypes,\r\n  //                   jForm: { Active: true },\r\n  //                   boolValue: false,\r\n  //                 }));\r\n  //                 window.location.reload();\r\n  //               } else {\r\n  //                 setState((prevState) => ({\r\n  //                   ...prevState,\r\n  //                   prtypes: [...prevState.prtypes, newPRType],\r\n  //                   jForm: {},\r\n  //                   boolValue: false,\r\n  //                 }));\r\n  //                 window.location.reload();\r\n  //               }\r\n  //             }\r\n  //           });\r\n  //         })\r\n  //         .catch((error) => {\r\n  //           console.error(\"Error:\", error);\r\n  //           Swal.fire({\r\n  //             icon: \"error\",\r\n  //             title: '<span style=\"color: red;\">Error!</span>',\r\n  //             text: \"Failed to save PR Type details\",\r\n  //             confirmButtonColor: \"#d33\",\r\n  //             confirmButtonText: \"OK\",\r\n  //           });\r\n  //         });\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  // const handleClear = () => {\r\n  //   setState({\r\n  //     ...state,\r\n  //     jForm: {},\r\n  //     boolValue: false,\r\n  //   });\r\n  // };\r\n\r\n  // const updateTable = (e) => {\r\n  //   if (!isEdit) {\r\n  //     setState({ jForm: e.data, prtypes: state.prtypes, boolValue: true });\r\n  //     setUpdateRow(false);\r\n  //     setRowIndex(e.data.rowIndex);\r\n  //     // setState((prevState) => ({\r\n  //     //   ...prevState,\r\n  //     //   prtypes: state.prtypes,\r\n  //     //   boolValue: true,\r\n  //     // }));\r\n  //     setTimeout(() => {\r\n  //       focusTextBox();\r\n  //     }, 100);\r\n  //   }\r\n  // };\r\n\r\n  // const focusTextBox = useCallback(() => {\r\n  //   if (FormRef.current) {\r\n  //     const formInstance = FormRef.current.instance;\r\n  //     const editor = formInstance.getEditor(\"Discription\");\r\n  //     if (editor) {\r\n  //       editor.focus();\r\n  //     }\r\n  //   }\r\n  // }, []);\r\n  // const borderOption = {\r\n  //   style: { border: \"2px solid black\", fontWeight: \"bold\" },\r\n  // };\r\n\r\n  return (\r\n    <div>\r\n      {/* <Card title=\"PR Type Create\" style={{ backgroundColor: \"Blue\" }}>\r\n        <Form ref={FormRef} formData={state.jForm}>\r\n          <GroupItem colCount={2}>\r\n            <Item\r\n              dataField=\"PRTypeCode\"\r\n              editorOptions={{\r\n                style: { border: \"6px solid black\" },\r\n                maxLength: 20,\r\n                readOnly: state.boolValue,\r\n              }}\r\n            >\r\n              <RequiredRule />\r\n              <Label text=\"PR Type Code\"></Label>\r\n            </Item>\r\n            <Item\r\n              dataField=\"Discription\"\r\n              editorOptions={{\r\n                style: { border: \"6px solid black\" },\r\n              }}\r\n            >\r\n              <RequiredRule message=\"Field required\" />\r\n              <Label text=\"Description\"></Label>\r\n            </Item>\r\n            <Item\r\n              dataField=\"Active\"\r\n              editorType=\"dxCheckBox\"\r\n              editorOptions={{}}\r\n            ></Item>\r\n          </GroupItem>\r\n        </Form>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n          <Button\r\n            variant=\"secondary\"\r\n            icon=\"feather icon-layers\"\r\n            onClick={handleSave}\r\n            disabled={isAdd}\r\n          >\r\n            Save\r\n          </Button>\r\n          <Button\r\n            variant=\"secondary\"\r\n            icon=\"feather icon-layers\"\r\n            onClick={handleClear}\r\n            disabled={isAdd}\r\n          >\r\n            Clear\r\n          </Button>\r\n        </Navbar>\r\n      </Card> */}\r\n      <Card title=\"PR Type List\">\r\n        <DataGrid\r\n          dataSource={state.prtypes}\r\n          showBorders={true}\r\n          wordWrapEnabled={true}\r\n          allowSearch={true}\r\n          selection={{ mode: \"single\" }}\r\n          hoverStateEnabled={true}\r\n          // onCellDblClick={updateTable}\r\n        >\r\n          <SearchPanel visible={true} />\r\n\r\n          <Paging defaultPageSize={20} />\r\n\r\n          <Column dataField=\"PRTypeCode\" caption=\"PR Type Code\" />\r\n          <Column dataField=\"Discription\" caption=\"Description\" />\r\n          {/* <Column\r\n            dataField=\"Active\"\r\n            editorType=\"dxCheckBox\"\r\n            caption=\"Active\"\r\n            dataType=\"bit\"\r\n          /> */}\r\n        </DataGrid>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePRType;\r\n"],"sourceRoot":""}