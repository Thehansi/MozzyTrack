{"version":3,"sources":["App/components/MainCard.js","component/Report/ReportList.jsx","Forms/Admin/PasswordReset.jsx"],"names":["MainCard","state","isOption","props","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","this","className","alignRight","Toggle","id","Menu","as","Item","onClick","prevState","href","DEMO","BLANK_LINK","Header","Title","title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","in","Body","backgroundColor","children","Component","PasswordRest","useState","FormRef","useRef","username","setUsername","CurrentPassword","setpassword","password","passwordVisible","setPasswordVisible","setISAdd","isEdit","setISEdit","setIsView","userName","setUserName","useEffect","fetchUserNameDetails","authData","JSON","parse","localStorage","getItem","axios","get","params","UsersID","UserName","MenuID","checkAuthentication","data","length","UserView","usernameResponse","console","log","error","UserAdd","UserEdit","jPasswordReset","Password","NewPassword","ConfirmPassword","viewPasswordreset","passwordresets","LoadPanelVisible","ListViewing","PasswordResetTable","jSetPasswordReset","boolValue","fvdfv","FormLayout","current","instance","OnNotification","message","type","notify","displayTime","at","offset","OnSaveValidation","matchPassword","validate","isValid","NaN","undefined","test","ref","formData","dataField","editorType","editorOptions","dataSource","valueExpr","displayExpr","onValueChanged","e","post","setValue","value","maxLength","readOnly","mode","icon","onIconClick","text","Navbar","bg","variant","Button","user","stringify","addResetPassword","then","response","Swal","fire","res","newReset","catch","confirmButtonColor","confirmButtonText","disabled"],"mappings":"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","file":"static/js/42.7ce29391.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Dropdown, Card, Collapse } from \"react-bootstrap\";\r\nimport windowSize from \"react-window-size\";\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\n{\r\n  /* <Card className=\"customCard\"></Card>\r\n\r\n.customCard: {\r\n    background: blue !important;\r\n} */\r\n}\r\nclass MainCard extends Component {\r\n  state = {\r\n    isOption: this.props.isOption,\r\n    fullCard: false,\r\n    collapseCard: false,\r\n    loadCard: false,\r\n    cardRemove: false,\r\n  };\r\n\r\n  cardReloadHandler = () => {\r\n    this.setState({ loadCard: true });\r\n    setInterval(() => {\r\n      this.setState({ loadCard: false });\r\n    }, 3000);\r\n  };\r\n\r\n  cardRemoveHandler = () => {\r\n    this.setState({ cardRemove: true });\r\n  };\r\n\r\n  render() {\r\n    let fullScreenStyle, loader, cardHeaderRight, cardHeader, cardColor;\r\n    let card = \"\";\r\n    let cardClass = [];\r\n\r\n    if (this.state.isOption) {\r\n      cardHeaderRight = (\r\n        <div className=\"card-header-right\">\r\n          <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n            <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n              <i className=\"feather icon-more-horizontal\" />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu as=\"ul\" className=\"list-unstyled card-option\">\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { fullCard: !prevState.fullCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.fullCard\r\n                      ? \"feather icon-minimize\"\r\n                      : \"feather icon-maximize\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.fullCard ? \"Restore\" : \"Maximize\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { collapseCard: !prevState.collapseCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.collapseCard\r\n                      ? \"feather icon-plus\"\r\n                      : \"feather icon-minus\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.collapseCard ? \"Expand\" : \"Collapse\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardReloadHandler}\r\n              >\r\n                <i className=\"feather icon-refresh-cw\" />\r\n                <a href={DEMO.BLANK_LINK}> Reload </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardRemoveHandler}\r\n              >\r\n                <i className=\"feather icon-trash\" />\r\n                <a href={DEMO.BLANK_LINK}> Remove </a>\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    cardHeader = (\r\n      <Card.Header>\r\n        <Card.Title as=\"h5\">{this.props.title}</Card.Title>\r\n        {cardHeaderRight}\r\n      </Card.Header>\r\n    );\r\n\r\n    if (this.state.fullCard) {\r\n      cardClass = [...cardClass, \"full-card\"];\r\n      fullScreenStyle = {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        width: this.props.windowWidth,\r\n        height: this.props.windowHeight,\r\n      };\r\n    }\r\n\r\n    if (this.state.loadCard) {\r\n      cardClass = [...cardClass, \"card-load\"];\r\n      loader = (\r\n        <div className=\"card-loader\">\r\n          <i className=\"pct-loader1 anim-rotate\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.cardRemove) {\r\n      cardClass = [...cardClass, \"d-none\"];\r\n    }\r\n\r\n    if (this.props.cardClass) {\r\n      cardClass = [...cardClass, this.props.cardClass];\r\n    }\r\n\r\n    card = (\r\n      <Card className={cardClass.join(\" \")} style={fullScreenStyle}>\r\n        {cardHeader}\r\n        <Collapse in={!this.state.collapseCard}>\r\n          <div>\r\n            <Card.Body style={{ backgroundColor: \"rgb(185, 210, 214)\" }}>\r\n              {this.props.children}\r\n            </Card.Body>\r\n          </div>\r\n        </Collapse>\r\n        {loader}\r\n      </Card>\r\n    );\r\n\r\n    return <Aux>{card}</Aux>;\r\n  }\r\n}\r\n\r\nexport default MainCard;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport DataGrid, {\r\n  Column,\r\n  SearchPanel,\r\n  GroupPanel,\r\n  Paging,\r\n} from \"devextreme-react/data-grid\";\r\n\r\nexport class ReportList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      DataRow: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  onSelectionChanged = (e) => {\r\n    this.setState({ DataRow: e.selectedRowsData[0] });\r\n  };\r\n\r\n  onViewClick = () => {\r\n    if (this.state.DataRow.FileName) {\r\n      window.open(\r\n        `${window.location.protocol}//${window.location.hostname}${window[\"Config\"].LayoutURL}?f=${this.state.DataRow.FileName}&i=${this.props.AutoID}&t=1`,\r\n        \"_blank\"\r\n      );\r\n    }\r\n  };\r\n\r\n  onCloseClick = (e) => {\r\n    this.props.OnHide(0);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Modal\r\n          size=\"xl\"\r\n          show={this.props.Show}\r\n          onHide={this.onCloseClick}\r\n          backdrop=\"static\"\r\n          keyboard={false}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>List of Layout</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <DataGrid\r\n              id=\"grid-list\"\r\n              dataSource={this.props.Layout}\r\n              keyExpr=\"AutoID\"\r\n              showBorders={true}\r\n              wordWrapEnabled={true}\r\n              allowSearch={true}\r\n              selection={{ mode: \"single\" }}\r\n              hoverStateEnabled={true}\r\n              onSelectionChanged={this.onSelectionChanged}\r\n            >\r\n              <SearchPanel visible={true} />\r\n              <GroupPanel visible={true} />\r\n              <Paging defaultPageSize={20} />\r\n              <Column dataField=\"AutoID\" visible={false} />\r\n              <Column dataField=\"Name\" />\r\n              <Column dataField=\"Remark\" />\r\n            </DataGrid>\r\n\r\n            <br></br>\r\n            <br></br>\r\n\r\n            <Button variant=\"secondary\" onClick={this.onViewClick}>\r\n              View\r\n            </Button>\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={this.onCloseClick}\r\n              icon=\"feather icon-layers\"\r\n            >\r\n              Close\r\n            </Button>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReportList;\r\n","import React, {\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n  useMemo,\r\n  useCallback,\r\n} from \"react\";\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport Form, { Item, Label, RequiredRule } from \"devextreme-react/form\";\r\nimport DataGrid, {\r\n  Column,\r\n  Editing,\r\n  Popup,\r\n  Lookup,\r\n  Scrolling,\r\n  Paging,\r\n  Selection,\r\n  SearchPanel,\r\n} from \"devextreme-react/data-grid\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport { Button, Navbar, Dropdown, DropdownButton } from \"react-bootstrap\";\r\nimport { LoadPanel } from \"devextreme-react/load-panel\";\r\nimport notify from \"devextreme/ui/notify\";\r\nimport Swal from \"sweetalert2\";\r\nimport axios from \"axios\";\r\nimport Layout from \"../../component/Report/ReportList\";\r\nimport { connect } from \"react-redux\";\r\nimport Moment from \"moment\";\r\nimport DropDownBox from \"devextreme-react/drop-down-box\";\r\nimport TextBox from \"devextreme-react/text-box\";\r\n\r\nconst PasswordRest = () => {\r\n  // const [passwordreset, setPasswordreset] = useState({\r\n  //   jPasswordReset: {},\r\n  // });\r\n  const [passwordreset, setPasswordreset] = useState([]);\r\n  const FormRef = useRef(null);\r\n\r\n  const [username, setUsername] = useState([]);\r\n  const [CurrentPassword, setpassword] = useState([]);\r\n\r\n  const [selectedUserName, setSelectedUserName] = useState(null); // Add this line\r\n\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n\r\n  // const [passwordMode, setPasswordMode] = useState<TextBoxTypes.TextBoxType>('password');\r\n  const [isAdd, setISAdd] = useState(true);\r\n  const [isEdit, setISEdit] = useState(true);\r\n  const [isView, setIsView] = useState(true);\r\n  const [userName, setUserName] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetchUserNameDetails();\r\n  }, []);\r\n\r\n  const fetchUserNameDetails = async () => {\r\n    const authData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const checkAuthentication = await axios.get(\r\n      \"/api/CheckUserAuthentication\",\r\n      {\r\n        params: { UsersID: authData.UserName, MenuID: 9006 },\r\n      }\r\n    );\r\n    setUserName(authData.UserName);\r\n    if (checkAuthentication.data.length != 0) {\r\n      if (checkAuthentication.data[0].UserView) {\r\n        setIsView(false);\r\n        try {\r\n          const usernameResponse = await axios.get(\r\n            \"/api/getallPasswordDetails\"\r\n          );\r\n          setUsername(usernameResponse.data);\r\n          console.log(\"get all pw details\");\r\n        } catch (error) {\r\n          console.error(\"Error fetching details:\", error);\r\n        }\r\n      }\r\n      if (checkAuthentication.data[0].UserAdd) {\r\n        setISAdd(false);\r\n      }\r\n      if (checkAuthentication.data[0].UserEdit) {\r\n        setISEdit(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const [state, setState] = useState({\r\n    jPasswordReset: {\r\n      UserName: \"\",\r\n      Password: \"\",\r\n      NewPassword: \"\",\r\n      ConfirmPassword: \"\",\r\n      // CreatedDate: null,\r\n    },\r\n    viewPasswordreset: 0,\r\n    passwordresets: [],\r\n    LoadPanelVisible: false,\r\n    ListViewing: false,\r\n    PasswordResetTable: [],\r\n    jSetPasswordReset: {},\r\n    boolValue: false,\r\n    fvdfv: false,\r\n  });\r\n\r\n  const FormLayout = FormRef.current && FormRef.current.instance;\r\n\r\n  const OnNotification = (message, type) => {\r\n    notify({\r\n      message: message,\r\n      type: type,\r\n      displayTime: 3000,\r\n      position: { at: \"top right\", offset: \"50\" },\r\n    });\r\n  };\r\n\r\n  const OnSaveValidation = async () => {\r\n    // const { jForm } = state;\r\n    const matchPassword =\r\n      /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,16}$/;\r\n    //  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; // Regular expression for email validation\r\n    //  const existingUsernames = user.map((user) => user.UserName.toLowerCase());\r\n\r\n    //  console.log(\"validation  2\", !FormLayout.validate().isValid);\r\n    //  console.log( \"user group awa\",state.jForm);\r\n\r\n    const { jPasswordReset } = state;\r\n\r\n    if (!FormLayout.validate().isValid) {\r\n      OnNotification(\"Fields marked with * are required\", \"error\");\r\n      return false;\r\n    } else if (\r\n      jPasswordReset.UserName == \"\" ||\r\n      jPasswordReset.UserName == NaN ||\r\n      jPasswordReset.UserName == undefined\r\n    ) {\r\n      OnNotification(\"UserName is Required\", \"error\");\r\n      return false;\r\n    }\r\n    //  if (state.jForm.PasswordChange) {\r\n    else if (\r\n      jPasswordReset.Password == \"\" ||\r\n      jPasswordReset.Password == NaN ||\r\n      jPasswordReset.Password == undefined\r\n    ) {\r\n      OnNotification(\"Password is Required\", \"error\");\r\n      return false;\r\n    } else if (matchPassword.test(jPasswordReset.Password) == false) {\r\n      OnNotification(\r\n        \"Passwords must contain at least 8 characters, including uppercase, lowercase letters and numbers.\",\r\n        \"error\"\r\n      );\r\n      return false;\r\n    } else if (jPasswordReset.Password != jPasswordReset.ConfirmPassword) {\r\n      OnNotification(\"New password & Confirm password must match\", \"error\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleSave = async (e) => {\r\n    // Handle form submission\r\n    // console.log('Selected group:', selectedGroup);\r\n    // console.log('Selected department:', selectedDepartment);\r\n\r\n    console.log(state.jPasswordReset.UserName, \"awaa user name\");\r\n    if (await OnSaveValidation()) {\r\n      axios\r\n        .post(\"/api/addResetPassword\", {\r\n          user: JSON.stringify(state.jPasswordReset),\r\n          UserName: state.jPasswordReset.UserName,\r\n          addResetPassword: userName,\r\n        })\r\n        .then((response) => {\r\n          console.log(response.data);\r\n          // Handle success response\r\n          Swal.fire({\r\n            icon: \"success\",\r\n            title: \"Success\",\r\n            text: \"Reset Password details saved successfully!\",\r\n          }).then((res) => {\r\n            const newReset = response.data;\r\n            setState((prevState) => ({\r\n              ...prevState,\r\n              passwordresets: [...prevState.passwordresets, newReset],\r\n              jPasswordReset: {},\r\n              boolValue: false,\r\n              fvdfv: false,\r\n            }));\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error:\", error);\r\n          // Handle error\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: '<span style=\"color: red;\">Error!</span>',\r\n            text: \"Failed to save password details\",\r\n            confirmButtonColor: \"#d33\",\r\n            confirmButtonText: \"OK\",\r\n          });\r\n        });\r\n      // }\r\n    }\r\n  };\r\n\r\n  const setValue = async (UserName) => {\r\n    console.log(\"user name print\", UserName);\r\n    try {\r\n      const usernameResponse = await axios.post(\"/api/getcurrentpassword\", {\r\n        UserName: UserName,\r\n      });\r\n      console.log(\"user response\", usernameResponse.data[0].Password);\r\n      setpassword(usernameResponse.data[0].Password);\r\n      console.log(\"get all password each users\");\r\n    } catch (error) {\r\n      console.error(\"Error fetching details:\", error);\r\n    }\r\n  };\r\n\r\n  // const passwordButton = useMemo<ButtonTypes.Properties>(\r\n  //   () => ({\r\n  //     icon: 'eyeopen',\r\n  //     stylingMode: 'text',\r\n  //     onClick: () => {\r\n  //       setPasswordMode(passwordMode === 'text' ? 'password' : 'text');\r\n  //     },\r\n  //   }),\r\n\r\n  //   [passwordMode, setPasswordMode]\r\n\r\n  //   );\r\n  const togglePasswordVisibility = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  const OnClearForm = () => {\r\n    setState({\r\n      ...state,\r\n      jPasswordReset: {},\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Aux>\r\n      <Card title=\"Password Reset\">\r\n        <Form ref={FormRef} formData={state.jPasswordReset}>\r\n          <Item\r\n            dataField=\"UserName\"\r\n            editorType=\"dxSelectBox\"\r\n            editorOptions={{\r\n              dataSource: username,\r\n              //items: state.Sts,\r\n              valueExpr: \"UserName\",\r\n              displayExpr: \"UserName\",\r\n              // layout: \"horizontal\",\r\n              // value: Value,\r\n              onValueChanged: (e) => setValue(e.value),\r\n            }}\r\n          >\r\n            <RequiredRule />\r\n          </Item>\r\n\r\n          <Item\r\n            dataField=\"CurrentPassword\"\r\n            editorOptions={{\r\n              maxLength: 50,\r\n              // mode: \"password\",\r\n              value: CurrentPassword,\r\n              readOnly: \"true\",\r\n            }}\r\n          >\r\n            <RequiredRule />\r\n          </Item>\r\n          <Item\r\n            dataField=\"Password\"\r\n            editorType=\"dxTextBox\"\r\n            editorOptions={{\r\n              mode: passwordVisible ? \"text\" : \"password\",\r\n              maxLength: 50,\r\n              icon: passwordVisible ? \"eye-slash\" : \"eye\",\r\n              onIconClick: togglePasswordVisibility,\r\n              value: password,\r\n            }}\r\n          >\r\n            <Label text=\"New Password\" />\r\n            <RequiredRule />\r\n          </Item>\r\n          <Item\r\n            dataField=\"ConfirmPassword\"\r\n            editorOptions={{\r\n              maxLength: 50,\r\n              mode: \"password\",\r\n            }}\r\n          >\r\n            <RequiredRule />\r\n          </Item>\r\n        </Form>\r\n      </Card>\r\n\r\n      <Navbar bg=\"light\" variant=\"light\">\r\n        <Button\r\n          variant=\"secondary\"\r\n          icon=\"feather icon-layers\"\r\n          onClick={handleSave}\r\n          disabled={isEdit}\r\n        >\r\n          Update\r\n        </Button>\r\n        <Button\r\n          variant=\"secondary\"\r\n          icon=\"feather icon-layers\"\r\n          disabled={isEdit}\r\n          onClick={OnClearForm}\r\n        >\r\n          Clear\r\n        </Button>\r\n      </Navbar>\r\n    </Aux>\r\n  );\r\n};\r\n\r\nexport default PasswordRest;\r\n"],"sourceRoot":""}