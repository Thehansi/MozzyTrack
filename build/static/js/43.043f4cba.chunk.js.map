{"version":3,"sources":["App/components/MainCard.js","Forms/Admin/UserGroupList.jsx","Forms/Admin/UserGroup.jsx"],"names":["MainCard","state","isOption","props","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","this","className","alignRight","Toggle","id","Menu","as","Item","onClick","prevState","href","DEMO","BLANK_LINK","Header","Title","title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","in","Body","backgroundColor","children","Component","UserGroup","FormRef","useRef","useState","Group","ref","formData","caption","colCount","dataField","editorOptions","maxLength","message","text","editorType","dataSource","columnAutoWidth","wordWrapEnabled","showBorders","keyExpr","parentIdExpr","allowUpdating","mode","minWidth","allowEditing","Navbar","bg","variant","Button","icon","shadingColor","showIndicator","shading","showPane","closeOnOutsideClick"],"mappings":"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","file":"static/js/43.043f4cba.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Dropdown, Card, Collapse } from \"react-bootstrap\";\r\nimport windowSize from \"react-window-size\";\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\n{\r\n  /* <Card className=\"customCard\"></Card>\r\n\r\n.customCard: {\r\n    background: blue !important;\r\n} */\r\n}\r\nclass MainCard extends Component {\r\n  state = {\r\n    isOption: this.props.isOption,\r\n    fullCard: false,\r\n    collapseCard: false,\r\n    loadCard: false,\r\n    cardRemove: false,\r\n  };\r\n\r\n  cardReloadHandler = () => {\r\n    this.setState({ loadCard: true });\r\n    setInterval(() => {\r\n      this.setState({ loadCard: false });\r\n    }, 3000);\r\n  };\r\n\r\n  cardRemoveHandler = () => {\r\n    this.setState({ cardRemove: true });\r\n  };\r\n\r\n  render() {\r\n    let fullScreenStyle, loader, cardHeaderRight, cardHeader, cardColor;\r\n    let card = \"\";\r\n    let cardClass = [];\r\n\r\n    if (this.state.isOption) {\r\n      cardHeaderRight = (\r\n        <div className=\"card-header-right\">\r\n          <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n            <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n              <i className=\"feather icon-more-horizontal\" />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu as=\"ul\" className=\"list-unstyled card-option\">\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { fullCard: !prevState.fullCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.fullCard\r\n                      ? \"feather icon-minimize\"\r\n                      : \"feather icon-maximize\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.fullCard ? \"Restore\" : \"Maximize\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { collapseCard: !prevState.collapseCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.collapseCard\r\n                      ? \"feather icon-plus\"\r\n                      : \"feather icon-minus\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.collapseCard ? \"Expand\" : \"Collapse\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardReloadHandler}\r\n              >\r\n                <i className=\"feather icon-refresh-cw\" />\r\n                <a href={DEMO.BLANK_LINK}> Reload </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardRemoveHandler}\r\n              >\r\n                <i className=\"feather icon-trash\" />\r\n                <a href={DEMO.BLANK_LINK}> Remove </a>\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    cardHeader = (\r\n      <Card.Header>\r\n        <Card.Title as=\"h5\">{this.props.title}</Card.Title>\r\n        {cardHeaderRight}\r\n      </Card.Header>\r\n    );\r\n\r\n    if (this.state.fullCard) {\r\n      cardClass = [...cardClass, \"full-card\"];\r\n      fullScreenStyle = {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        width: this.props.windowWidth,\r\n        height: this.props.windowHeight,\r\n      };\r\n    }\r\n\r\n    if (this.state.loadCard) {\r\n      cardClass = [...cardClass, \"card-load\"];\r\n      loader = (\r\n        <div className=\"card-loader\">\r\n          <i className=\"pct-loader1 anim-rotate\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.cardRemove) {\r\n      cardClass = [...cardClass, \"d-none\"];\r\n    }\r\n\r\n    if (this.props.cardClass) {\r\n      cardClass = [...cardClass, this.props.cardClass];\r\n    }\r\n\r\n    card = (\r\n      <Card className={cardClass.join(\" \")} style={fullScreenStyle}>\r\n        {cardHeader}\r\n        <Collapse in={!this.state.collapseCard}>\r\n          <div>\r\n            <Card.Body style={{ backgroundColor: \"rgb(185, 210, 214)\" }}>\r\n              {this.props.children}\r\n            </Card.Body>\r\n          </div>\r\n        </Collapse>\r\n        {loader}\r\n      </Card>\r\n    );\r\n\r\n    return <Aux>{card}</Aux>;\r\n  }\r\n}\r\n\r\nexport default MainCard;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport DataGrid, {\r\n  Column,\r\n  SearchPanel,\r\n  GroupPanel,\r\n  Paging\r\n} from \"devextreme-react/data-grid\";\r\nimport axios from \"axios\";\r\n\r\nexport class UserGroupList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      SelectID: 0,\r\n      jList: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  onSelectionChanged = (e) => {\r\n    this.setState({ SelectID: e.selectedRowsData[0].AutoID });\r\n  };\r\n\r\n  onSelectClick = (e) => {\r\n    this.props.OnHide(this.state.SelectID);\r\n  };\r\n\r\n  onCloseClick = (e) => {\r\n    this.props.OnHide(0);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Modal\r\n          size=\"xl\"\r\n          show={this.props.Show}\r\n          onHide={this.onCloseClick}\r\n          backdrop=\"static\"\r\n          keyboard={false}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>List of User Group</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <DataGrid\r\n              id=\"grid-list\"\r\n              dataSource={this.props.List}\r\n              keyExpr=\"AutoID\"\r\n              showBorders={true}\r\n              wordWrapEnabled={true}\r\n              allowSearch={true}\r\n              selection={{ mode: \"single\" }}\r\n              hoverStateEnabled={true}\r\n              onSelectionChanged={this.onSelectionChanged}\r\n            >\r\n              <SearchPanel visible={true} />\r\n              <GroupPanel visible={true} />\r\n              <Paging defaultPageSize={20} />\r\n              <Column dataField=\"AutoID\" visible={false} />\r\n              <Column dataField=\"GroupCode\" />\r\n              <Column dataField=\"GroupName\" />\r\n            </DataGrid>\r\n\r\n            <br></br>\r\n            <br></br>\r\n\r\n            <Button variant=\"secondary\" onClick={this.onSelectClick}>\r\n              Open\r\n            </Button>\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={this.onCloseClick}\r\n              icon=\"feather icon-layers\"\r\n            >\r\n              Close\r\n            </Button>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserGroupList;\r\n","import React, { Component, useState, useRef } from \"react\";\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport Form, {\r\n  Item,\r\n  GroupItem,\r\n  RequiredRule,\r\n  Label,\r\n  PatternRule,\r\n} from \"devextreme-react/form\";\r\nimport { Button, Navbar, Nav } from \"react-bootstrap\";\r\nimport List from \"./UserGroupList\";\r\nimport { TreeList, Editing, Column, Lookup } from \"devextreme-react/tree-list\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport axios from \"axios\";\r\nimport notify from \"devextreme/ui/notify\";\r\nimport { SelectBox, TagBox } from \"devextreme-react\";\r\nimport { LoadPanel } from \"devextreme-react/load-panel\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst UserGroup = () => {\r\n  const FormRef = useRef(null);\r\n\r\n  const [state, setState] = useState({\r\n    Group: {},\r\n  });\r\n  return (\r\n    <Aux>\r\n      <Card title=\"User Group\">\r\n        <Form ref={FormRef} formData={state.Group}>\r\n          <GroupItem caption=\"User Group Information\" colCount={2}>\r\n            <Item\r\n              dataField=\"GroupCode\"\r\n              className=\"bg-danger\"\r\n              editorOptions={{\r\n                maxLength: 50,\r\n                //  readOnly: this.state.GroupID != 0,\r\n              }}\r\n            >\r\n              <RequiredRule message=\"Field required\" />\r\n              <Label text=\"Group Code\"></Label>\r\n            </Item>\r\n            <Item\r\n              dataField=\"Description\"\r\n              editorOptions={{\r\n                maxLength: 100,\r\n              }}\r\n            >\r\n              {/* <RequiredRule message=\"Field required\" /> */}\r\n            </Item>\r\n\r\n            <Item dataField=\"Active\" editorType=\"dxCheckBox\">\r\n              <RequiredRule></RequiredRule>\r\n            </Item>\r\n          </GroupItem>\r\n        </Form>\r\n      </Card>\r\n\r\n      <Card title=\"User Group Details\">\r\n        <TreeList\r\n          id=\"GroupID\"\r\n          dataSource={state.Group}\r\n          columnAutoWidth={true}\r\n          wordWrapEnabled={true}\r\n          showBorders={true}\r\n          keyExpr=\"MenuID\"\r\n          parentIdExpr=\"ParentID\"\r\n          //   onRowUpdated={this.onRowUpdated}\r\n          //   onRowUpdating={this.onRowUpdating}\r\n        >\r\n          <Editing allowUpdating={true} mode=\"cell\" />\r\n          <Column\r\n            minWidth={250}\r\n            dataField=\"GroupCode\"\r\n            caption=\"Group Code\"\r\n            allowEditing={false}\r\n          >\r\n            {/* <RequiredRule /> */}\r\n          </Column>\r\n          <Column minWidth={120} dataField=\"Description\" caption=\"Description\">\r\n            {/* <Lookup\r\n            dataSource={this.Auth}\r\n            valueExpr=\"ID\"\r\n            displayExpr=\"Name\"\r\n          /> \r\n          <RequiredRule />*/}\r\n          </Column>\r\n          <Column\r\n            minWidth={250}\r\n            dataField=\"Active\"\r\n            caption=\"Active\"\r\n            editorType=\"dxCheckBox\"\r\n            allowEditing={false}\r\n          >\r\n            {/* <RequiredRule /> */}\r\n          </Column>\r\n        </TreeList>\r\n      </Card>\r\n      <Navbar bg=\"light\" variant=\"light\">\r\n        <Button\r\n          variant=\"secondary\"\r\n          icon=\"feather icon-layers\"\r\n          // onClick={this.SaveData}\r\n          // disabled={this.state.DocReadOnly}\r\n        >\r\n          Save\r\n        </Button>\r\n        <Button\r\n          variant=\"secondary\"\r\n          icon=\"feather icon-layers\"\r\n          //onClick={this.OnClearForm}\r\n        >\r\n          Clear\r\n        </Button>\r\n        <Button\r\n          variant=\"secondary\"\r\n          icon=\"feather icon-layers\"\r\n          // onClick={this.OnListClickEvent}\r\n        >\r\n          View List\r\n        </Button>\r\n      </Navbar>\r\n\r\n      <LoadPanel\r\n        message=\"Processing.... Please, wait...\"\r\n        shadingColor=\"rgba(0,0,0,0.4)\"\r\n        // onHiding={this.onLoadPanelHiding}\r\n        // visible={this.state.LoadPanelVisible}\r\n        showIndicator={true}\r\n        shading={true}\r\n        showPane={true}\r\n        closeOnOutsideClick={false}\r\n        width={500}\r\n      />\r\n\r\n      {/* <List\r\n        Show={this.state.ListViewing}\r\n        OnHide={this.OnListClickEvent}\r\n        List={this.state.jlGroupList}\r\n      ></List> */}\r\n    </Aux>\r\n  );\r\n};\r\n\r\nexport default UserGroup;\r\n\r\n// export class UsersGroup extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       GroupID: 0,\r\n//       Group: { Status: 1 },\r\n//       Authorization: [],\r\n\r\n//       jlGroupList: [],\r\n\r\n//       ListViewing: false,\r\n//       DocReadOnly: false,\r\n//     };\r\n\r\n//     this.Auth = [\r\n//       { ID: 0, Name: \"Full Authorization\" },\r\n//       { ID: 1, Name: \"Read-Only\" },\r\n//       { ID: 2, Name: \"No Authorization\" },\r\n//       { ID: 9, Name: \"Various Authorization\" },\r\n//     ];\r\n\r\n//     this.Status = [\r\n//       { ID: 1, Name: \"Active\" },\r\n//       { ID: 0, Name: \"Inactive\" },\r\n//     ];\r\n\r\n//     this.onLoadPanelHiding = this.onLoadPanelHiding.bind(this);\r\n//     this.SaveData = this.SaveData.bind(this);\r\n//     this.FormRef = React.createRef();\r\n//   }\r\n\r\n//   get FormLayout() {\r\n//     return this.FormRef.current.instance;\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     axios\r\n//       .all([axios.get(\"/api/user-auth-tree\")])\r\n//       .then(\r\n//         axios.spread((User) => {\r\n//           this.setState({\r\n//             Authorization: User.data,\r\n//             DocReadOnly: false,\r\n//           });\r\n//         })\r\n//       )\r\n//       .catch((error) => console.log(error));\r\n//   }\r\n\r\n//   IDValidation = () => {\r\n//     return new Promise((resolve, reject) => {\r\n//       axios\r\n//         .get(\"/api/user-group-exist\", {\r\n//           params: {\r\n//             AutoID: this.state.GroupID,\r\n//             Code: this.state.Group.GroupCode,\r\n//             Name: this.state.Group.GroupName,\r\n//           },\r\n//         })\r\n//         .then((res) => {\r\n//           resolve(res.data[0].Exist === 1);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.log(error);\r\n//         });\r\n//     });\r\n//   };\r\n\r\n//   OnSaveValidation = async () => {\r\n//     if (!this.FormLayout.validate().isValid) {\r\n//       this.OnNotification(\"Fields marked with * are required\", \"error\");\r\n//       return false;\r\n//     } else if (await this.IDValidation()) {\r\n//       this.OnNotification(\"Code or Name already exist\", \"error\");\r\n//       return false;\r\n//     } else return true;\r\n//   };\r\n\r\n//   onLoadPanelHiding = (message, type) => {\r\n//     this.setState({\r\n//       LoadPanelVisible: false,\r\n//     });\r\n\r\n//     this.OnNotification(message, type);\r\n//   };\r\n\r\n//   OnNotification = (message, type) => {\r\n//     notify({\r\n//       message: message,\r\n//       type: type,\r\n//       displayTime: 3000,\r\n//       position: { at: \"top right\", offset: \"50\" },\r\n//     });\r\n//   };\r\n\r\n//   OnClickEvent = () => {};\r\n\r\n//   SaveData = async () => {\r\n//     if (await this.OnSaveValidation()) {\r\n//       Swal.fire({\r\n//         type: \"info\",\r\n//         showCancelButton: true,\r\n//         text: \"Do you want to save ?\",\r\n//         confirmButtonText: \"Yes\",\r\n//         cancelButtonText: \"No\",\r\n//         allowOutsideClick: false,\r\n//         allowEscapeKey: false,\r\n//       }).then((res) => {\r\n//         if (res.value) {\r\n//           this.setState(\r\n//             { LoadPanelVisible: true },\r\n//             () =>\r\n//               (this.serverRequest = axios\r\n//                 .post(\"/api/user-group\", {\r\n//                   GroupID: this.state.GroupID,\r\n//                   UserGroup: JSON.stringify(this.state.Group),\r\n//                   Authorization: JSON.stringify(this.state.Authorization),\r\n//                 })\r\n//                 .then((response) => {\r\n//                   this.onLoadPanelHiding(\"Successfully Saved\", \"success\");\r\n//                   this.OnClearForm();\r\n//                 })\r\n//                 .catch((error) => {\r\n//                   this.onLoadPanelHiding(\"Something went wrong\", \"error\");\r\n//                   console.log(error);\r\n//                 }))\r\n//           );\r\n//         } else if (res.dismiss == \"cancel\") {\r\n//           //console.log(\"cancel\");\r\n//         } else if (res.dismiss == \"esc\") {\r\n//           //console.log(\"cancel\");\r\n//         }\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   OnClearForm = () => {\r\n//     let auth = this.state.Authorization;\r\n\r\n//     auth = auth.map((el) => (el.Auth !== 2 ? { ...el, Auth: 2 } : el));\r\n\r\n//     this.setState({\r\n//       GroupID: 0,\r\n//       Group: { Status: 1 },\r\n//       Authorization: auth,\r\n//     });\r\n//   };\r\n\r\n//   OnListClickEvent = (SelectID) => {\r\n//     this.setState({ ListViewing: !this.state.ListViewing }, () => {\r\n//       if (this.state.ListViewing) {\r\n//         //Open\r\n//         this.serverRequest = axios\r\n//           .get(\"/api/user-group-lookup\")\r\n//           .then((res) => {\r\n//             console.log(res.data);\r\n//             this.setState({ jlGroupList: JSON.parse(res.data[0].List) });\r\n//           })\r\n//           .catch((error) => {\r\n//             console.log(error);\r\n//           });\r\n//       }\r\n//       if (!this.state.ListViewing && SelectID != 0) {\r\n//         //Close\r\n//         this.setState({ GroupID: SelectID }, () => this.OnLoadData());\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   OnLoadData() {\r\n//     axios\r\n//       .all([\r\n//         axios.get(\"/api/user-group\", {\r\n//           params: { GroupID: this.state.GroupID },\r\n//         }),\r\n//       ])\r\n//       .then(\r\n//         axios.spread((People) => {\r\n//           console.log(\"data view\", People);\r\n//           this.setState({\r\n//             Group: JSON.parse(People.data[0].UserGroup),\r\n//             Authorization: JSON.parse(People.data[0].UserWiseAuthontication),\r\n//           });\r\n//         })\r\n//       )\r\n//       .catch((error) => console.log(error));\r\n//   }\r\n\r\n//   onRowUpdating = (e) => {\r\n//     if (e.newData.Auth === 9) {\r\n//       e.cancel = true;\r\n//     }\r\n//   };\r\n\r\n//   onRowUpdated = (e) => {\r\n//     let auth = this.state.Authorization;\r\n\r\n//     if (e.data.Type === 1) {\r\n//       auth = auth.map((el) =>\r\n//         el.RootParent === e.data.MenuID || el.ParentID === e.data.MenuID\r\n//           ? { ...el, Auth: e.data.Auth }\r\n//           : el\r\n//       );\r\n//     } else {\r\n//       let allParentCount = auth.filter(\r\n//         (item) => item.ParentID === e.data.ParentID\r\n//       );\r\n//       let typeParentCount = auth.filter(\r\n//         (item) => item.ParentID === e.data.ParentID && item.Auth === e.data.Auth\r\n//       );\r\n\r\n//       if (allParentCount.length === typeParentCount.length)\r\n//         auth = auth.map((el) =>\r\n//           el.MenuID === e.data.ParentID ? { ...el, Auth: e.data.Auth } : el\r\n//         );\r\n//       else\r\n//         auth = auth.map((el) =>\r\n//           el.MenuID === e.data.ParentID ? { ...el, Auth: 9 } : el\r\n//         );\r\n\r\n//       //////////////////////////\r\n\r\n//       let allRootCount = auth.filter(\r\n//         (item) => item.RootParent === e.data.RootParent\r\n//       );\r\n//       let typeRootCount = auth.filter(\r\n//         (item) =>\r\n//           item.RootParent === e.data.RootParent && item.Auth === e.data.Auth\r\n//       );\r\n\r\n//       if (allRootCount.length === typeRootCount.length)\r\n//         auth = auth.map((el) =>\r\n//           el.MenuID === e.data.RootParent ? { ...el, Auth: e.data.Auth } : el\r\n//         );\r\n//       else\r\n//         auth = auth.map((el) =>\r\n//           el.MenuID === e.data.RootParent ? { ...el, Auth: 9 } : el\r\n//         );\r\n//     }\r\n//     this.setState({ Authorization: auth });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <Aux>\r\n//         <Card title=\"User\">\r\n//           <Form ref={this.FormRef} formData={this.state.Group}>\r\n//             <GroupItem caption=\"User Information\" colCount={2}>\r\n//               <Item\r\n//                 dataField=\"GroupCode\"\r\n//                 editorOptions={{\r\n//                   maxLength: 50,\r\n//                   readOnly: this.state.GroupID != 0,\r\n//                 }}\r\n//               >\r\n//                 <RequiredRule message=\"Field required\" />\r\n//                 <Label text=\"Group Code\"></Label>\r\n//               </Item>\r\n//               <Item\r\n//                 dataField=\"Description\"\r\n//                 editorOptions={{\r\n//                   maxLength: 100,\r\n//                 }}\r\n//               >\r\n//                 {/* <RequiredRule message=\"Field required\" /> */}\r\n//               </Item>\r\n\r\n//               <Item\r\n//                 dataField=\"Status\"\r\n//                 editorType=\"dxSelectBox\"\r\n//                 editorOptions={{\r\n//                   searchEnabled: true,\r\n//                   items: this.Status,\r\n//                   displayExpr: \"Name\",\r\n//                   valueExpr: \"ID\",\r\n//                 }}\r\n//               >\r\n//                 <RequiredRule></RequiredRule>\r\n//               </Item>\r\n//             </GroupItem>\r\n//           </Form>\r\n//         </Card>\r\n\r\n//         <Card title=\"User Group Details\">\r\n//           <TreeList\r\n//             id=\"GroupID\"\r\n//             dataSource={state.Authorization}\r\n//             columnAutoWidth={true}\r\n//             wordWrapEnabled={true}\r\n//             showBorders={true}\r\n//             keyExpr=\"MenuID\"\r\n//             parentIdExpr=\"ParentID\"\r\n//             onRowUpdated={this.onRowUpdated}\r\n//             onRowUpdating={this.onRowUpdating}\r\n//           >\r\n//             <Editing allowUpdating={true} mode=\"cell\" />\r\n//             <Column\r\n//               minWidth={250}\r\n//               dataField=\"GroupCode\"\r\n//               caption=\"Group Code\"\r\n//               allowEditing={false}\r\n//             >\r\n//               {/* <RequiredRule /> */}\r\n//             </Column>\r\n//             <Column\r\n//               minWidth={120}\r\n//               dataField=\"Description\"\r\n//               caption=\"Description\"\r\n//             >\r\n//               {/* <Lookup\r\n//                 dataSource={this.Auth}\r\n//                 valueExpr=\"ID\"\r\n//                 displayExpr=\"Name\"\r\n//               />\r\n//               <RequiredRule />*/}\r\n//             </Column>\r\n//             <Column\r\n//               minWidth={250}\r\n//               dataField=\"GroupCode\"\r\n//               caption=\"Group Code\"\r\n//               allowEditing={false}\r\n//             >\r\n//               {/* <RequiredRule /> */}\r\n//             </Column>\r\n//           </TreeList>\r\n//         </Card>\r\n//         <Navbar bg=\"light\" variant=\"light\">\r\n//           <Button\r\n//             variant=\"secondary\"\r\n//             icon=\"feather icon-layers\"\r\n//             onClick={this.SaveData}\r\n//             disabled={this.state.DocReadOnly}\r\n//           >\r\n//             Save\r\n//           </Button>\r\n//           <Button\r\n//             variant=\"secondary\"\r\n//             icon=\"feather icon-layers\"\r\n//             onClick={this.OnClearForm}\r\n//           >\r\n//             Clear\r\n//           </Button>\r\n//           <Button\r\n//             variant=\"secondary\"\r\n//             icon=\"feather icon-layers\"\r\n//             onClick={this.OnListClickEvent}\r\n//           >\r\n//             View List\r\n//           </Button>\r\n//         </Navbar>\r\n\r\n//         <LoadPanel\r\n//           message=\"Processing.... Please, wait...\"\r\n//           shadingColor=\"rgba(0,0,0,0.4)\"\r\n//           onHiding={this.onLoadPanelHiding}\r\n//           visible={this.state.LoadPanelVisible}\r\n//           showIndicator={true}\r\n//           shading={true}\r\n//           showPane={true}\r\n//           closeOnOutsideClick={false}\r\n//           width={500}\r\n//         />\r\n\r\n//         <List\r\n//           Show={this.state.ListViewing}\r\n//           OnHide={this.OnListClickEvent}\r\n//           List={this.state.jlGroupList}\r\n//         ></List>\r\n//       </Aux>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapStateToProps = (state) => {\r\n//   console.log(state.loggedReducer);\r\n//   return {\r\n//     data: state.loggedReducer,\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps)(UsersGroup);\r\n\r\n// export default Users;\r\n"],"sourceRoot":""}