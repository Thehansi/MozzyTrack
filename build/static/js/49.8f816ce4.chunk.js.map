{"version":3,"sources":["App/components/MainCard.js","Forms/Purchase-Requisition/purchase-Request.jsx"],"names":["MainCard","state","isOption","props","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","this","className","alignRight","Toggle","id","Menu","as","Item","onClick","prevState","href","DEMO","BLANK_LINK","Header","Title","title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","in","Body","backgroundColor","children","Component","PurchesRequest","FormRef","useRef","useState","radioValue","setRadioValue","PRType","setPRType","itemType","setItemType","UOM","setUOM","ApprovalLevel","setApprovalLevel","Warehouse","setWarehouse","currency","setCurrency","setSelectedCurrency","currencyRate","currencyRateCode","setcurrencyRate","setRowIndex","prData","setPrData","previosQty","setPreviosQty","previosPrice","setPreviosPrice","previosCost","setPreviosCost","items","setItems","index","departmentDetails","setDepartmentDetails","branchDetails","setBranchDetails","pmOfficerDetails","setPMOfficerDetails","isLoad","flgLoad","setflgLoad","tableIndex","setTableIndex","setDefultQuantity","pRHeaderID","setPRHeaderID","approval","setApproval","fileName","setFileName","setIsFinal","setIsPDForm","setIsRowClick","File","attachment","setAttachment","PurchaseRequisitionAttachmentsAddGrid","attachmentGrid","setAttachmentGrid","GroupTable","itemObject","setItemObject","AttachGroup","attachLoad","setAttachLoad","isUpdate","setIsUpdate","isDashBoard","setIsDashBoard","isAdd","setISAdd","isEdit","setISEdit","isView","setIsView","isHold","setIsHold","isCancel","setIsCancel","setNumberSeries","userName","setUserName","loginUserDetails","setLoginUser","PurchaseRequisitionItems","requisitionItems","setrequisitionItems","productModule","ID","Name","numberval","fileUploaderRef","jUser","PurchaseRequisitionHeader","jApprovalTemplateHeader","DocumentID","UploadAttchment","Choose","Status","sapPost","validStatus","newApproveStatus","isSapPost","newValidStatus","location","useLocation","history","useHistory","isLoaded","setIsLoaded","mimeTypes","txt","html","css","js","json","xml","jpg","jpeg","png","gif","pdf","doc","docx","xls","xlsx","ppt","pptx","useEffect","isPD","fetchGroupDetails","current","instance","authData","JSON","parse","localStorage","getItem","axios","get","params","UsersID","UserName","MenuID","checkAuthentication","data","length","UserView","all","EnterUser","then","spread","PRTypes","ItemType","warehouse","approvalLevel","Currency","NumberSeries","ValidityPeriod","Branch","Department","PMOfficer","prDetails","loginUser","allPR","date","Date","validitiDate","setDate","getDate","parseInt","dateFromTimestamp","CreatedDate","ValidFrom","ValidTo","CurrencyCode","ApproveDate","PRUser","ApproveUser","TotalAmount","TotalCost","RequestorName","RequestorsDepartment","RequestorsBranch","RequestorEmail","Email","Requestorcontanctno","ContactNo","ValidityStatus","ExpectedDate","ApproveStatus","UnitCost","UnitPrice","RequiredDate","TotalAmountExclusive","setPreviosData","catch","error","console","UserAdd","UserEdit","UserHold","UserCancel","e","PRNumber","headerDetails","PRHeaderID","ItemDetails","AttachmentDetails","officer","itemArray","map","item","Quantity","TotalCostExclusive","rowIndex","undefined","formattedDate","formatDateMonth","gerCurrentDate","getUserGroup","UserGroup","nextPriority","replace","OnClickClear","FileNo","PurchaseRequisitionAttachments","reset","OnNotification","message","type","notify","displayTime","at","offset","OnSaveValidation","NaN","ItemCategory","ApproveLevel","onSaveValidationDB","limitValues","ApprovalName","userResponse","ApprovalNameCheck","onApprovalLevelCheck","higherQuntity","lowQuntity","isDecrease","isIncrease","Limits","DecreaseQty","IncreaseQty","databaseDetails","TotalQty","forEach","dataItem","qty","parseFloat","itemCode","ItemCode","reqItem","curQty","curItemCode","MaxValue","MinValue","PRnumberSeries","post","PR_Number","res","IsSapPost","Swal","fire","icon","text","value","confirmButtonColor","confirmButtonText","log","ValidationItems","Module","focusTextBox","useCallback","editor","getEditor","focus","year","getFullYear","month","String","getMonth","padStart","day","getFileType","fullPath","defaultActiveKey","eventKey","ref","formData","caption","colCount","dataField","editorType","editorOptions","searchEnabled","showClearButton","dataSource","valueExpr","displayExpr","onValueChanged","level","TransactionType","ApprovalDescription","maxLength","readOnly","currencyCode","Items","Rate","price","UnitPriceWithForeignRate","module","LastFileName","visible","fillNo","substring","format","ItemDescription","OnhandQty","WarehouseCode","UoMCode","slice","UOMGroup","Price","UgpEntry","whsCode","avgCost","whsCodeItem","WhsCode","AVGPrice","ItemDesc","QtyOnHand","cUnitCode","ExchangeRate","cost","layout","bg","variant","arrayPurchas","findIndex","prevTotal","prevQty","prevCostTotal","push","disabled","allowColumnReordering","showBorders","onCellDblClick","IsReplacement","Remark","onRowRemoving","delete","hoverStateEnabled","allowColumnResizing","enabled","mode","allowDeleting","dataType","marginRight","name","onChange","target","files","FileSelect","FileData","FormData","append","FileName","uuid","v4","exec","replaceAll","Folder","response","filePath","toLocaleDateString","attachmentArray","FilePath","FileUploadedUser","FileUploadedDate","Remarks","Attach","PurchaseRequisitionAttachmentsLst","document","getElementById","columnAutoWidth","responseType","headers","fileType","config","filePathValue","parts","split","pop","toLowerCase","reqFile","Blob","fileURL","URL","createObjectURL","window","open","getApprovalName","ApprovalLevelName","UserGroupCode","statusOfApproval","Priority","isFinalLevel","finalLevel","FinalLevel","userGroup","appovalLevel","getfinalLevel","Series","stringify","finalStatus","IsFinal","UserID","appLevel","appStatus","wordWrapEnabled","allowSearch","selection","updatedArray","setTimeout","defaultPageSize","customizeText","cellInfo"],"mappings":"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","file":"static/js/49.8f816ce4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Dropdown, Card, Collapse } from \"react-bootstrap\";\r\nimport windowSize from \"react-window-size\";\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\n{\r\n  /* <Card className=\"customCard\"></Card>\r\n\r\n.customCard: {\r\n    background: blue !important;\r\n} */\r\n}\r\nclass MainCard extends Component {\r\n  state = {\r\n    isOption: this.props.isOption,\r\n    fullCard: false,\r\n    collapseCard: false,\r\n    loadCard: false,\r\n    cardRemove: false,\r\n  };\r\n\r\n  cardReloadHandler = () => {\r\n    this.setState({ loadCard: true });\r\n    setInterval(() => {\r\n      this.setState({ loadCard: false });\r\n    }, 3000);\r\n  };\r\n\r\n  cardRemoveHandler = () => {\r\n    this.setState({ cardRemove: true });\r\n  };\r\n\r\n  render() {\r\n    let fullScreenStyle, loader, cardHeaderRight, cardHeader, cardColor;\r\n    let card = \"\";\r\n    let cardClass = [];\r\n\r\n    if (this.state.isOption) {\r\n      cardHeaderRight = (\r\n        <div className=\"card-header-right\">\r\n          <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n            <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n              <i className=\"feather icon-more-horizontal\" />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu as=\"ul\" className=\"list-unstyled card-option\">\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { fullCard: !prevState.fullCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.fullCard\r\n                      ? \"feather icon-minimize\"\r\n                      : \"feather icon-maximize\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.fullCard ? \"Restore\" : \"Maximize\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { collapseCard: !prevState.collapseCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.collapseCard\r\n                      ? \"feather icon-plus\"\r\n                      : \"feather icon-minus\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.collapseCard ? \"Expand\" : \"Collapse\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardReloadHandler}\r\n              >\r\n                <i className=\"feather icon-refresh-cw\" />\r\n                <a href={DEMO.BLANK_LINK}> Reload </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardRemoveHandler}\r\n              >\r\n                <i className=\"feather icon-trash\" />\r\n                <a href={DEMO.BLANK_LINK}> Remove </a>\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    cardHeader = (\r\n      <Card.Header>\r\n        <Card.Title as=\"h5\">{this.props.title}</Card.Title>\r\n        {cardHeaderRight}\r\n      </Card.Header>\r\n    );\r\n\r\n    if (this.state.fullCard) {\r\n      cardClass = [...cardClass, \"full-card\"];\r\n      fullScreenStyle = {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        width: this.props.windowWidth,\r\n        height: this.props.windowHeight,\r\n      };\r\n    }\r\n\r\n    if (this.state.loadCard) {\r\n      cardClass = [...cardClass, \"card-load\"];\r\n      loader = (\r\n        <div className=\"card-loader\">\r\n          <i className=\"pct-loader1 anim-rotate\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.cardRemove) {\r\n      cardClass = [...cardClass, \"d-none\"];\r\n    }\r\n\r\n    if (this.props.cardClass) {\r\n      cardClass = [...cardClass, this.props.cardClass];\r\n    }\r\n\r\n    card = (\r\n      <Card className={cardClass.join(\" \")} style={fullScreenStyle}>\r\n        {cardHeader}\r\n        <Collapse in={!this.state.collapseCard}>\r\n          <div>\r\n            <Card.Body style={{ backgroundColor: \"rgb(185, 210, 214)\" }}>\r\n              {this.props.children}\r\n            </Card.Body>\r\n          </div>\r\n        </Collapse>\r\n        {loader}\r\n      </Card>\r\n    );\r\n\r\n    return <Aux>{card}</Aux>;\r\n  }\r\n}\r\n\r\nexport default MainCard;\r\n","import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport uuid from \"uuid\";\r\nimport Form, {\r\n  Item,\r\n  Label,\r\n  RequiredRule,\r\n  Tab,\r\n  GroupItem,\r\n  EmptyItem,\r\n  EmailRule,\r\n  CustomRule,\r\n} from \"devextreme-react/form\";\r\n// import Validator, { CustomRule } from \"devextreme-react/validator\";\r\nimport { dxDateBox } from \"devextreme-react/date-box\"; // Import dxDateBox\r\nimport { dxRadioGroup } from \"devextreme-react/radio-group\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport { Button, Navbar, Tabs } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport DataGrid, {\r\n  Column,\r\n  Editing,\r\n  Lookup,\r\n  Paging,\r\n  SearchPanel,\r\n} from \"devextreme-react/data-grid\";\r\nimport axios from \"axios\";\r\nimport notify from \"devextreme/ui/notify\";\r\nimport DateBox from \"devextreme-react/date-box\";\r\n// import FileUploader, {\r\n//   FileUploaderTypes,\r\n// } from \"devextreme-react/file-uploader\";\r\n// import { FileUploader } from \"devextreme-react/file-uploader\";\r\n\r\nconst PurchesRequest = () => {\r\n  const FormRef = useRef(null);\r\n  // const FormRef1 = useRef(null);\r\n  const [radioValue, setRadioValue] = useState(0);\r\n  const [PRType, setPRType] = useState([]);\r\n  const [itemType, setItemType] = useState([]);\r\n  const [UOM, setUOM] = useState([]);\r\n  const [ApprovalLevel, setApprovalLevel] = useState([]);\r\n  const [Warehouse, setWarehouse] = useState([]);\r\n  const [currency, setCurrency] = useState([]);\r\n  const [massage, setMassage] = useState(\"\");\r\n  const [selectedCurrency, setSelectedCurrency] = useState([]);\r\n  const [currencyRateCode, setcurrencyRate] = useState({\r\n    currencyRate: null,\r\n  });\r\n  const [rowIndex, setRowIndex] = useState(0);\r\n  const [prData, setPrData] = useState([]);\r\n  const [previosQty, setPreviosQty] = useState(0);\r\n  const [previosPrice, setPreviosPrice] = useState(0);\r\n  const [previosCost, setPreviosCost] = useState(0);\r\n  const [items, setItems] = useState([]);\r\n  const [index, setIndex] = useState(100);\r\n  const [yArray, setYArray] = useState([]);\r\n  const [departmentDetails, setDepartmentDetails] = useState([]);\r\n  const [branchDetails, setBranchDetails] = useState([]);\r\n  const [pmOfficerDetails, setPMOfficerDetails] = useState([]);\r\n  const [flgLoad, setflgLoad] = useState({ isLoad: false });\r\n  const [tableIndex, setTableIndex] = useState({ index: null });\r\n  const [defultQuantity, setDefultQuantity] = useState({});\r\n  const [pRHeaderID, setPRHeaderID] = useState(0);\r\n  const [approval, setApproval] = useState(false);\r\n  const [fileName, setFileName] = useState(false);\r\n  const [isFinal, setIsFinal] = useState(false);\r\n  const [isPDForm, setIsPDForm] = useState(true);\r\n  const [isRowClick, setIsRowClick] = useState(true);\r\n  const [attachment, setAttachment] = useState({\r\n    File: {},\r\n  });\r\n  const [attachmentGrid, setAttachmentGrid] = useState({\r\n    PurchaseRequisitionAttachmentsAddGrid: [],\r\n  });\r\n  const [itemObject, setItemObject] = useState({ GroupTable: {} });\r\n  const [attachLoad, setAttachLoad] = useState({ AttachGroup: {} });\r\n\r\n  const [isUpdate, setIsUpdate] = useState(false);\r\n  const [isDashBoard, setIsDashBoard] = useState(false);\r\n  const [isAdd, setISAdd] = useState(true);\r\n  const [isEdit, setISEdit] = useState(true);\r\n  const [isView, setIsView] = useState(true);\r\n  const [isHold, setIsHold] = useState(true);\r\n  const [isCancel, setIsCancel] = useState(true);\r\n  const [numberSeries, setNumberSeries] = useState([]);\r\n  const [userName, setUserName] = useState({});\r\n  const [loginUserDetails, setLoginUser] = useState([]);\r\n\r\n  const [requisitionItems, setrequisitionItems] = useState({\r\n    PurchaseRequisitionItems: [],\r\n  });\r\n  let totalItemsAmount = 0;\r\n  const productModule = [\r\n    { ID: \"Y\", Name: \"Inventry Item\" },\r\n    { ID: \"N\", Name: \"Service Item\" },\r\n  ];\r\n\r\n  const trueFalse = [\r\n    { ID: true, Name: \"Yes\" },\r\n    { ID: false, Name: \"No\" },\r\n  ];\r\n\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  let numberval = 0;\r\n  const fileUploaderRef = useRef(null);\r\n  const [state, setState] = useState({\r\n    jUser: {},\r\n    PurchaseRequisitionHeader: {},\r\n    jApprovalTemplateHeader: {},\r\n    DocumentID: 3000,\r\n    UploadAttchment: false,\r\n    Choose: [\r\n      { ID: true, Name: \"Replace\" },\r\n      { ID: false, Name: \"New\" },\r\n    ],\r\n    Status: [\r\n      { ID: \"0\", Name: \"Pending\" },\r\n      { ID: \"1\", Name: \"Cancel\" },\r\n      { ID: \"2\", Name: \"Approve\" },\r\n      { ID: \"3\", Name: \"Reject\" },\r\n      { ID: \"4\", Name: \"Hold\" },\r\n    ],\r\n    sapPost: [\r\n      { ID: true, Name: \"Yes\" },\r\n      { ID: false, Name: \"No\" },\r\n    ],\r\n    validStatus: [\r\n      { ID: 0, Name: \"Expired\" },\r\n      { ID: 1, Name: \"Valid\" },\r\n    ],\r\n  });\r\n  const [newApproveStatus, setNewApproveStatus] = useState({\r\n    Status: [\r\n      { ID: \"0\", Name: \"Pending\" },\r\n      { ID: \"1\", Name: \"Cancel\" },\r\n      { ID: \"2\", Name: \"Approve\" },\r\n      { ID: \"3\", Name: \"Reject\" },\r\n      { ID: \"4\", Name: \"Hold\" },\r\n    ],\r\n  });\r\n  const [isSapPost, setIsSapPost] = useState({\r\n    Status: [\r\n      { ID: true, Name: \"Yes\" },\r\n      { ID: false, Name: \"No\" },\r\n    ],\r\n  });\r\n  const [newValidStatus, setNewValidStatus] = useState({\r\n    validStatus: [\r\n      { ID: 0, Name: \"Expired\" },\r\n      { ID: 1, Name: \"Valid\" },\r\n    ],\r\n  });\r\n  let location = useLocation();\r\n  const history = useHistory();\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  const mimeTypes = {\r\n    txt: \"text/plain\",\r\n    html: \"text/html\",\r\n    css: \"text/css\",\r\n    js: \"application/javascript\",\r\n    json: \"application/json\",\r\n    xml: \"application/xml\",\r\n    jpg: \"image/jpeg\",\r\n    jpeg: \"image/jpeg\",\r\n    png: \"image/png\",\r\n    gif: \"image/gif\",\r\n    pdf: \"application/pdf\",\r\n    doc: \"application/msword\",\r\n    docx: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n    xls: \"application/vnd.ms-excel\",\r\n    xlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n    ppt: \"application/vnd.ms-powerpoint\",\r\n    pptx: \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (location.state && location.state.isPD && !isLoaded) {\r\n      fetchGroupDetails();\r\n      setIsLoaded(true);\r\n    } else {\r\n      fetchGroupDetails();\r\n    }\r\n  }, []);\r\n  const FormLayout = FormRef.current && FormRef.current.instance;\r\n  // const FormLayout1 = FormRef1.current && FormRef1.current.instance;\r\n\r\n  const fetchGroupDetails = async () => {\r\n    const authData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const checkAuthentication = await axios.get(\r\n      \"/api/CheckUserAuthentication\",\r\n      {\r\n        params: { UsersID: authData.UserName, MenuID: 1400 },\r\n      }\r\n    );\r\n    setUserName(authData.UserName);\r\n    if (checkAuthentication.data.length != 0) {\r\n      const userGroup = await axios.get(\"/api/getUserGroup\", {\r\n        params: {\r\n          UserName: authData.UserName,\r\n        },\r\n      });\r\n      if (checkAuthentication.data[0].UserView) {\r\n        setIsView(false);\r\n        try {\r\n          axios\r\n            .all([\r\n              axios.get(\"/api/getPRTypes\"),\r\n              axios.get(\"/api/getItemType\"),\r\n              axios.get(\"/api/getWarehouses\"),\r\n              axios.get(\"/api/getUOM\"),\r\n              axios.get(\"/api/getApprovalLevel\"),\r\n              axios.get(\"/api/getCurrency\"),\r\n              axios.get(\"/api/number-series-lookup-by-module\", {\r\n                params: { DocumentID: state.DocumentID },\r\n              }),\r\n              axios.get(\"/api/getValidityPeriod\"),\r\n              axios.get(\"/api/getBranch\"),\r\n              axios.get(\"/api/getDepartment\"),\r\n              axios.get(\"/api/getPMOfficer\"),\r\n              axios.get(\"/api/getAllPR\", {\r\n                params: { EnterUser: authData.UserName },\r\n              }),\r\n              // axios.get(\"/api/loadpendingPR\", {\r\n              //   params: { UserGroup: userGroup.data[0].UserGroup },\r\n              // }),\r\n              // axios.get(\"/api/LoadApproveRejectPR\", {\r\n              //   params: { ApproveUser: authData.UserName },\r\n              // }),\r\n              axios.get(\"/api/getLoginUserDetails\", {\r\n                params: { UserName: authData.UserName },\r\n              }),\r\n            ])\r\n            .then(\r\n              axios.spread(\r\n                (\r\n                  PRTypes,\r\n                  ItemType,\r\n                  warehouse,\r\n                  UOM,\r\n                  approvalLevel,\r\n                  Currency,\r\n                  NumberSeries,\r\n                  ValidityPeriod,\r\n                  Branch,\r\n                  Department,\r\n                  PMOfficer,\r\n                  prDetails,\r\n                  loginUser\r\n                ) => {\r\n                  if (true) {\r\n                    setPRType(PRTypes.data);\r\n                    setItemType(ItemType.data);\r\n                    setWarehouse(warehouse.data);\r\n                    setApprovalLevel(approvalLevel.data);\r\n                    setCurrency(Currency.data);\r\n                    setSelectedCurrency(\"LKR\");\r\n                    setDepartmentDetails(Department.data);\r\n                    setBranchDetails(Branch.data);\r\n                    setPMOfficerDetails(PMOfficer.data);\r\n                    setflgLoad({ isLoad: false });\r\n                    setLoginUser(loginUser.data);\r\n\r\n                    let allPR = prDetails.data;\r\n\r\n                    setPrData(allPR);\r\n                    let date = new Date();\r\n                    let validitiDate = date.setDate(\r\n                      date.getDate() +\r\n                        parseInt(ValidityPeriod.data.ValidityPeriod)\r\n                    );\r\n                    let dateFromTimestamp = new Date(validitiDate);\r\n                    setState((prevState) => ({\r\n                      PurchaseRequisitionHeader: {\r\n                        ...prevState.PurchaseRequisitionHeader,\r\n                        CreatedDate: new Date(),\r\n                        ValidFrom: new Date(),\r\n                        ValidityPeriod: ValidityPeriod.data.ValidityPeriod,\r\n                        ValidTo: dateFromTimestamp,\r\n                        CurrencyCode: \"LKR\",\r\n                        Date: new Date(),\r\n                        ApproveDate: new Date(),\r\n                        PRUser: authData.UserName,\r\n                        ApproveUser: authData.UserName,\r\n                        TotalAmount: 0,\r\n                        TotalCost: 0,\r\n                        RequestorName: authData.UserName,\r\n                        RequestorsDepartment: loginUser.data[0].Department,\r\n                        RequestorsBranch: loginUser.data[0].Branch,\r\n                        RequestorEmail: loginUser.data[0].Email,\r\n                        Requestorcontanctno: loginUser.data[0].ContactNo,\r\n                        ValidityStatus: 1,\r\n                        ExpectedDate: new Date(),\r\n                        ApproveStatus: \"0\",\r\n                        // IsSapPost: false,\r\n                      },\r\n                    }));\r\n                    setItemObject((prevState) => ({\r\n                      GroupTable: {\r\n                        ...prevState.GroupTable,\r\n                        UnitCost: 0,\r\n                        UnitPrice: 0,\r\n                        RequiredDate: new Date(),\r\n                        TotalAmountExclusive: 0,\r\n                      },\r\n                    }));\r\n                  }\r\n                  if (location.state.isPD) {\r\n                    setPreviosData();\r\n                  }\r\n                }\r\n              )\r\n            )\r\n            .catch((error) => console.error(error));\r\n        } catch (error) {\r\n          console.error(\"Error fetching details:\", error);\r\n        }\r\n      }\r\n      if (checkAuthentication.data[0].UserAdd) {\r\n        setISAdd(false);\r\n      }\r\n      if (checkAuthentication.data[0].UserEdit) {\r\n        setISEdit(false);\r\n      }\r\n      if (checkAuthentication.data[0].UserHold) {\r\n        setIsHold(false);\r\n      }\r\n      if (checkAuthentication.data[0].UserCancel) {\r\n        setIsCancel(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const setPreviosData = async (e) => {\r\n    setIsPDForm(false);\r\n    setIsDashBoard(true);\r\n    const headerDetails = await axios.get(\"/api/getPRHeaders\", {\r\n      params: { PRNumber: location.state.data.PRNumber },\r\n    });\r\n    const ItemDetails = await axios.get(\"/api/getPRItems\", {\r\n      params: { PRHeaderID: location.state.data.PRHeaderID },\r\n    });\r\n    const AttachmentDetails = await axios.get(\"/api/getPRAttachment\", {\r\n      params: { PRHeaderID: location.state.data.PRHeaderID },\r\n    });\r\n    const officer = await axios.get(\"/api/getPMOfficer\");\r\n\r\n    let itemArray = ItemDetails.data;\r\n    const updatedArray = itemArray.map((item) => {\r\n      item.TotalAmountExclusive = item.Quantity * item.UnitPrice;\r\n      item.TotalCostExclusive = item.Quantity * item.UnitCost;\r\n      return item;\r\n    });\r\n\r\n    setPMOfficerDetails(officer.data);\r\n    setRowIndex(location.state.rowIndex);\r\n    setPRHeaderID(location.state.data.PRHeaderID);\r\n    setAttachmentGrid({\r\n      PurchaseRequisitionAttachmentsAddGrid: AttachmentDetails.data,\r\n    });\r\n    setState({ PurchaseRequisitionHeader: headerDetails.data[0] });\r\n    setrequisitionItems({\r\n      PurchaseRequisitionItems: ItemDetails.data,\r\n    });\r\n    if (\r\n      location.state.data.ValidTo != undefined &&\r\n      location.state.data.ApproveStatus != undefined\r\n    ) {\r\n      const formattedDate = formatDateMonth(\r\n        new Date(location.state.data.ValidTo)\r\n      );\r\n      const gerCurrentDate = formatDateMonth(new Date());\r\n      if (\r\n        formattedDate < gerCurrentDate &&\r\n        location.state.data.ApproveStatus == 0\r\n      ) {\r\n        setState((prevState) => ({\r\n          PurchaseRequisitionHeader: {\r\n            ...prevState.PurchaseRequisitionHeader,\r\n            ValidityStatus: 0,\r\n          },\r\n        }));\r\n      }\r\n    }\r\n    // if (\r\n    //   location.state.data.ApproveStatus == 0 ||\r\n    //   location.state.data.ApproveStatus == 4\r\n    // ) {\r\n    //   setISAdd(false);\r\n    // } else {\r\n    //   setISAdd(true);\r\n    // }\r\n    const authData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const getUserGroup = await axios.get(\"/api/getUserGroup\", {\r\n      params: { UserName: authData.UserName },\r\n    });\r\n\r\n    if (\r\n      location.state.data.ApproveStatus != undefined ||\r\n      location.state.data.ApproveStatus == 2\r\n    ) {\r\n      let nextPriority;\r\n\r\n      if (getUserGroup.data.length != 0) {\r\n        nextPriority = await axios.get(\"/api/getNextPriority\", {\r\n          params: {\r\n            PRHeaderID: location.state.data.PRNumber,\r\n            UserGroup: getUserGroup.data[0].UserGroup,\r\n          },\r\n        });\r\n      }\r\n\r\n      if (nextPriority.data.length != 0) {\r\n        setState((prevState) => ({\r\n          PurchaseRequisitionHeader: {\r\n            ...prevState.PurchaseRequisitionHeader,\r\n            ApproveStatus: \"2\",\r\n          },\r\n        }));\r\n        setApproval(true);\r\n        setISAdd(true);\r\n      } else {\r\n        if (\r\n          location.state.data.ApproveStatus != 4 &&\r\n          location.state.data.ApproveStatus != 0 &&\r\n          location.state.data.ApproveStatus != 2\r\n        ) {\r\n          setISAdd(true);\r\n          setApproval(true);\r\n          setState((prevState) => ({\r\n            PurchaseRequisitionHeader: {\r\n              ...prevState.PurchaseRequisitionHeader,\r\n              ApproveStatus: location.state.data.ApproveStatus,\r\n            },\r\n          }));\r\n        } else {\r\n          setISAdd(false);\r\n          setApproval(false);\r\n          setState((prevState) => ({\r\n            PurchaseRequisitionHeader: {\r\n              ...prevState.PurchaseRequisitionHeader,\r\n              ApproveStatus: location.state.data.ApproveStatus,\r\n            },\r\n          }));\r\n        }\r\n      }\r\n    } else {\r\n      setISAdd(false);\r\n      setApproval(false);\r\n      setState((prevState) => ({\r\n        PurchaseRequisitionHeader: {\r\n          ...prevState.PurchaseRequisitionHeader,\r\n          ApproveStatus: location.state.data.ApproveStatus,\r\n        },\r\n      }));\r\n    }\r\n\r\n    setState((prevState) => ({\r\n      PurchaseRequisitionHeader: {\r\n        ...prevState.PurchaseRequisitionHeader,\r\n        PRUser: authData.UserName,\r\n        ApproveUser: authData.UserName,\r\n      },\r\n    }));\r\n    // localStorage.clear();\r\n    history.replace({\r\n      state: null,\r\n    });\r\n    setIsDashBoard(false);\r\n  };\r\n\r\n  const OnClickClear = async () => {\r\n    const ValidityPeriod = await axios.get(\"/api/getValidityPeriod\");\r\n    let date = new Date();\r\n    let validitiDate = date.setDate(\r\n      date.getDate() + parseInt(ValidityPeriod.data.ValidityPeriod)\r\n    );\r\n    let dateFromTimestamp = new Date(validitiDate);\r\n    setItemObject(() => ({ GroupTable: {} }));\r\n    // itemObject.GroupTable\r\n    setAttachLoad(() => ({ AttachGroup: {} }));\r\n    setAttachmentGrid(() => ({ PurchaseRequisitionAttachmentsAddGrid: [] }));\r\n\r\n    setPRHeaderID(0);\r\n    setRadioValue(0);\r\n    setApproval(false);\r\n    setrequisitionItems({ PurchaseRequisitionItems: [] });\r\n    setIsRowClick(true);\r\n    setState(() => ({\r\n      jUser: {},\r\n      GroupTable: {},\r\n      PurchaseRequisitionHeader: {\r\n        CreatedDate: new Date(),\r\n        ValidFrom: new Date(),\r\n        ValidityPeriod: ValidityPeriod.data.ValidityPeriod,\r\n        ValidTo: dateFromTimestamp,\r\n        CurrencyCode: \"LKR\",\r\n        Date: new Date(),\r\n        ApproveDate: new Date(),\r\n        PRUser: userName,\r\n        ApproveUser: userName,\r\n        TotalAmount: 0,\r\n        FileNo: null,\r\n        TotalCost: 0,\r\n        RequestorName: userName,\r\n        RequestorsDepartment: loginUserDetails[0].Department,\r\n        RequestorsBranch: loginUserDetails[0].Branch,\r\n        RequestorEmail: loginUserDetails[0].Email,\r\n        Requestorcontanctno: loginUserDetails[0].ContactNo,\r\n        ValidityStatus: 1,\r\n        ExpectedDate: new Date(),\r\n        ApproveStatus: \"0\",\r\n      },\r\n      jApprovalTemplateHeader: {},\r\n      PurchaseRequisitionItems: [],\r\n      PurchaseRequisitionAttachments: [],\r\n      AttachGroup: {},\r\n    }));\r\n    if (fileUploaderRef.current) {\r\n      fileUploaderRef.current.instance.reset();\r\n    }\r\n    setISAdd(false);\r\n    setNumberSeries([]);\r\n  };\r\n\r\n  const OnNotification = (message, type) => {\r\n    notify({\r\n      message: message,\r\n      type: type,\r\n      displayTime: 3000,\r\n      position: { at: \"top right\", offset: \"50\" },\r\n    });\r\n  };\r\n\r\n  const OnSaveValidation = async () => {\r\n    if (\r\n      state.PurchaseRequisitionHeader.PRType == \"\" ||\r\n      state.PurchaseRequisitionHeader.PRType == NaN ||\r\n      state.PurchaseRequisitionHeader.PRType == undefined\r\n    ) {\r\n      OnNotification(\"PR Type is Required\", \"error\");\r\n      return false;\r\n    } else if (\r\n      state.PurchaseRequisitionHeader.ItemCategory == \"\" ||\r\n      state.PurchaseRequisitionHeader.ItemCategory == NaN ||\r\n      state.PurchaseRequisitionHeader.ItemCategory == undefined\r\n    ) {\r\n      OnNotification(\"Item Type is Required\", \"error\");\r\n      return false;\r\n    } else if (\r\n      requisitionItems.PurchaseRequisitionItems.length == 0 ||\r\n      requisitionItems.PurchaseRequisitionItems == NaN ||\r\n      requisitionItems.PurchaseRequisitionItems == undefined\r\n    ) {\r\n      OnNotification(\"Unable to save without Item Details\", \"error\");\r\n      return false;\r\n    } else if (\r\n      state.PurchaseRequisitionHeader.RequestorsDepartment == \"\" ||\r\n      state.PurchaseRequisitionHeader.RequestorsDepartment == NaN ||\r\n      state.PurchaseRequisitionHeader.RequestorsDepartment == undefined\r\n    ) {\r\n      OnNotification(\"Requestors Department is Required\", \"error\");\r\n      return false;\r\n    } else if (\r\n      state.PurchaseRequisitionHeader.RequestorName == \"\" ||\r\n      state.PurchaseRequisitionHeader.RequestorName == NaN ||\r\n      state.PurchaseRequisitionHeader.RequestorName == undefined\r\n    ) {\r\n      OnNotification(\"Requestors Name is Required\", \"error\");\r\n      return false;\r\n    } else if (\r\n      state.PurchaseRequisitionHeader.RequestorsBranch == \"\" ||\r\n      state.PurchaseRequisitionHeader.RequestorsBranch == NaN ||\r\n      state.PurchaseRequisitionHeader.RequestorsBranch == undefined\r\n    ) {\r\n      OnNotification(\"Requestors Branch is Required\", \"error\");\r\n      return false;\r\n    } else if (\r\n      (state.PurchaseRequisitionHeader.ApproveLevel == \"\" ||\r\n        state.PurchaseRequisitionHeader.ApproveLevel == NaN ||\r\n        state.PurchaseRequisitionHeader.ApproveLevel == undefined) &&\r\n      radioValue === \"2\"\r\n    ) {\r\n      OnNotification(\"Approval Level is Required\", \"error\");\r\n      return false;\r\n    } else if (\r\n      state.PurchaseRequisitionHeader.ExpectedDate == \"\" ||\r\n      state.PurchaseRequisitionHeader.ExpectedDate == NaN ||\r\n      state.PurchaseRequisitionHeader.ExpectedDate == undefined\r\n    ) {\r\n      OnNotification(\"Expected Delivery Date is Required\", \"error\");\r\n      return false;\r\n    } else if (isCancel && state.PurchaseRequisitionHeader.ApproveStatus == 1) {\r\n      OnNotification(\"You Don't have permission to Cancel Approval\", \"error\");\r\n      return false;\r\n    } else if (isHold && state.PurchaseRequisitionHeader.ApproveStatus == 4) {\r\n      OnNotification(\"You Don't have permission to Hold Approval\", \"error\");\r\n      return false;\r\n    }\r\n\r\n    if (state.PurchaseRequisitionHeader.ApproveStatus == 2) {\r\n      // if (state.PurchaseRequisitionHeader.ApproveStatus != 3) {\r\n      return await onSaveValidationDB();\r\n      // }\r\n      // else {\r\n      //   return true;\r\n      // }\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const onSaveValidationDB = async () => {\r\n    let limitValues = -1;\r\n    let ApprovalName = -1;\r\n\r\n    const formattedDate = formatDateMonth(\r\n      new Date(state.PurchaseRequisitionHeader.ExpectedDate)\r\n    );\r\n    const gerCurrentDate = formatDateMonth(new Date());\r\n    let userID = 0;\r\n    const userResponse = await axios.get(\"/api/getSelectedUserID\", {\r\n      params: {\r\n        UserName: userName,\r\n      },\r\n    });\r\n\r\n    if (\r\n      userResponse != undefined ||\r\n      userResponse != NaN ||\r\n      userResponse != \"\"\r\n    ) {\r\n      userID = userResponse.data[0].UsersID;\r\n    }\r\n    if (state.PurchaseRequisitionHeader.ApproveLevel != undefined) {\r\n      const ApprovalNameCheck = await axios.get(\"/api/checkApprovalName\", {\r\n        params: {\r\n          UserName: userName,\r\n          ApprovalLevel: state.PurchaseRequisitionHeader.ApproveLevel,\r\n          PRType: state.PurchaseRequisitionHeader.PRType,\r\n        },\r\n      });\r\n      ApprovalName = ApprovalNameCheck.data.length;\r\n    }\r\n    const ItemType = await axios.get(\"/api/checkItemCategory\", {\r\n      params: {\r\n        PRType: state.PurchaseRequisitionHeader.PRType,\r\n        ItemType: state.PurchaseRequisitionHeader.ItemCategory,\r\n      },\r\n    });\r\n    const PRType = await axios.get(\"/api/checkPRType\", {\r\n      params: {\r\n        PRType: state.PurchaseRequisitionHeader.PRType,\r\n        UserName: userName,\r\n      },\r\n    });\r\n\r\n    // const UserPermision = await axios.get(\"/api/checkUserPermision\", {\r\n    //   params: {\r\n    //     UsersID: userID,\r\n    //   },\r\n    // });\r\n    // if (state.PurchaseRequisitionHeader.ApproveLevel != undefined) {\r\n    //   const checkApprovalLevel = await axios.get(\"/api/getAppLevel\", {\r\n    //     params: {\r\n    //       UserGroup: userName,\r\n    //       ApprovalLevel: state.PurchaseRequisitionHeader.ApproveLevel,\r\n    //       ItemCategory: state.PurchaseRequisitionHeader.ItemCategory,\r\n    //       PRType: state.PurchaseRequisitionHeader.PRType,\r\n    //     },\r\n    //   });\r\n    //   const Limits = await axios.get(\"/api/checkLimite\", {\r\n    //     params: {\r\n    //       UserName: userName,\r\n    //       ApprovalLevel: state.PurchaseRequisitionHeader.ApproveLevel,\r\n    //       PRType: state.PurchaseRequisitionHeader.PRType,\r\n    //     },\r\n    //   });\r\n    //   limitValues = Limits.data.length;\r\n    // }\r\n    // if (\r\n    //   state.PurchaseRequisitionHeader.ApproveStatus != 0 &&\r\n    //   (UserPermision.data[0].UserAdd == null ||\r\n    //     UserPermision.data[0].UserAdd == 0)\r\n    // ) {\r\n    //   OnNotification(\"You Don't have permission to Approval process\", \"error\");\r\n    //   return false;\r\n    // } else\r\n\r\n    // else if (\r\n    //   state.PurchaseRequisitionHeader.ApproveStatus != 0 &&\r\n    //   UserPermision.data.length == 0 &&\r\n    //   (UserPermision.data[0].UserAdd == null ||\r\n    //     UserPermision.data[0].UserAdd == 0)\r\n    // ) {\r\n    //   OnNotification(\"You Don't have permission to Approval\", \"error\");\r\n    //   return false;\r\n    // }\r\n\r\n    if (ApprovalName == 0) {\r\n      OnNotification(\r\n        \"You Don't have permission to this Approval Level\",\r\n        \"error\"\r\n      );\r\n      return false;\r\n    } else if (PRType.data.length == 0) {\r\n      OnNotification(\"You Don't have permission to PR Type\", \"error\");\r\n      return false;\r\n    } else if (ItemType.data.length == 0) {\r\n      OnNotification(\"You Don't have permission to Item Type\", \"error\");\r\n      return false;\r\n    } else if (limitValues == 0) {\r\n      OnNotification(\"You Don't have permission to add total\", \"error\");\r\n      return false;\r\n    } else if (formattedDate < gerCurrentDate) {\r\n      OnNotification(\"Invalid Delivery Date\", \"error\");\r\n      return false;\r\n    } else if (\r\n      state.PurchaseRequisitionHeader.ApproveStatus == 2 &&\r\n      state.PurchaseRequisitionHeader.ApproveLevel == undefined\r\n    ) {\r\n      OnNotification(\"Please Select the Approval Leval\", \"error\");\r\n      return false;\r\n    }\r\n    // else if (!sameQuntity) {\r\n    //   OnNotification(\"Can't Increase Quantity\", \"error\");\r\n    //   return false;\r\n    // } else if (\r\n    //   !isDecrease &&\r\n    //   previosQty > state.PurchaseRequisitionHeader.Quantity\r\n    // ) {\r\n    //   OnNotification(\"Can't Decrees Quantity\", \"error\");\r\n    //   return false;\r\n    // }\r\n\r\n    if (state.PurchaseRequisitionHeader.ApproveLevel != undefined) {\r\n      return await onApprovalLevelCheck();\r\n    } else {\r\n      return true;\r\n    }\r\n    // }\r\n  };\r\n\r\n  const onApprovalLevelCheck = async () => {\r\n    let limitValues = -1;\r\n    let prevQTY = 0;\r\n    let mismatchItemCode;\r\n    let higherQuntity = false;\r\n    let lowQuntity = false;\r\n    let isDecrease = false;\r\n    let isIncrease = false;\r\n\r\n    if (state.PurchaseRequisitionHeader.ApproveStatus != 0) {\r\n      const Limits = await axios.get(\"/api/checkLimite\", {\r\n        params: {\r\n          UserName: userName,\r\n          ApprovalLevel: state.PurchaseRequisitionHeader.ApproveLevel,\r\n          PRType: state.PurchaseRequisitionHeader.PRType,\r\n          ItemCategory: state.PurchaseRequisitionHeader.ItemCategory,\r\n        },\r\n      });\r\n      limitValues = Limits.data.length;\r\n\r\n      if (Limits.data[0].DecreaseQty != null) {\r\n        isDecrease = Limits.data[0].DecreaseQty;\r\n      }\r\n      if (Limits.data[0].IncreaseQty != null) {\r\n        isIncrease = Limits.data[0].IncreaseQty;\r\n      }\r\n\r\n      if (state.PurchaseRequisitionHeader.PRNumber != undefined) {\r\n        const databaseDetails = await axios.get(\"/api/getAllQTY\", {\r\n          params: {\r\n            PRNumber: state.PurchaseRequisitionHeader.PRNumber,\r\n          },\r\n        });\r\n        if (databaseDetails.data.length != 0) {\r\n          prevQTY = databaseDetails.data[0].TotalQty;\r\n\r\n          databaseDetails.data.forEach((dataItem) => {\r\n            const qty = parseFloat(dataItem.Quantity);\r\n            const itemCode = dataItem.ItemCode;\r\n\r\n            requisitionItems.PurchaseRequisitionItems.forEach((reqItem) => {\r\n              const curQty = parseFloat(reqItem.Quantity);\r\n              const curItemCode = reqItem.ItemCode;\r\n\r\n              if (curItemCode === itemCode) {\r\n                if (qty < curQty) {\r\n                  higherQuntity = true;\r\n                  mismatchItemCode = curItemCode;\r\n                  return false;\r\n                } else if (qty > curQty) {\r\n                  lowQuntity = true;\r\n                  mismatchItemCode = curItemCode;\r\n                  return false;\r\n                }\r\n              }\r\n            });\r\n          });\r\n        }\r\n      }\r\n\r\n      if (\r\n        Limits.data[0].MaxValue < state.PurchaseRequisitionHeader.TotalAmount\r\n      ) {\r\n        OnNotification(\"Total amount is grater than maximum limits\", \"error\");\r\n        return false;\r\n      } else if (\r\n        Limits.data[0].MinValue > state.PurchaseRequisitionHeader.TotalAmount\r\n      ) {\r\n        OnNotification(\"Total amount is less than minimum limits \", \"error\");\r\n        return false;\r\n      } else if (!isIncrease && higherQuntity) {\r\n        OnNotification(\r\n          \"Need Permision to Increase Quantity \", //+ mismatchItemCode,\r\n          \"error\"\r\n        );\r\n        return false;\r\n      } else if (!isDecrease && lowQuntity) {\r\n        OnNotification(\"Need Permision to Decrees Quantity \", \"error\"); //+ mismatchItemCode\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleSave = async (e) => {\r\n    if (await OnSaveValidation()) {\r\n      let UserGroupCode = \"\";\r\n      let statusOfApproval = 0;\r\n      let appovalLevel;\r\n      let getfinalLevel;\r\n      let Priority = 0;\r\n      let isFinalLevel = false;\r\n      let IsSapPost = false;\r\n      setIsUpdate(false);\r\n      let getUserGroup = await axios.get(\"/api/getUserGroup\", {\r\n        params: {\r\n          UserName: userName,\r\n        },\r\n      });\r\n      if (getUserGroup.data.length != 0) {\r\n        UserGroupCode = getUserGroup.data[0].UserGroup;\r\n      }\r\n      //  else {\r\n      //      console.log(\"UserGroup 2\", getUserGroup.data[0].UserGroup);\r\n      //     UserGroupCode = getUserGroup.data[0].UserGroup;\r\n      //   }\r\n      if (state.PurchaseRequisitionHeader.ApproveLevel != undefined) {\r\n        let finalLevel = await axios.get(\"/api/getfinalLevel\", {\r\n          params: {\r\n            ApprovalLevel: state.PurchaseRequisitionHeader.ApproveLevel,\r\n            TransactionType: state.PurchaseRequisitionHeader.PRType,\r\n          },\r\n        });\r\n        if (finalLevel.data.length != 0) {\r\n          if (\r\n            finalLevel.data[0].FinalLevel &&\r\n            state.PurchaseRequisitionHeader.ApproveStatus == 2\r\n          ) {\r\n            statusOfApproval = 2;\r\n          }\r\n        }\r\n\r\n        const userGroup = await axios.get(\"/api/getUserGroup\", {\r\n          params: {\r\n            UserName: userName,\r\n          },\r\n        });\r\n        if (userGroup.data.length != 0) {\r\n          appovalLevel = await axios.get(\"/api/getApprovalLevelDetails\", {\r\n            params: {\r\n              UserGroup: userGroup.data[0].UserGroup,\r\n              ApprovalLevel: state.PurchaseRequisitionHeader.ApproveLevel,\r\n            },\r\n          });\r\n        }\r\n        if (appovalLevel.data.length != 0) {\r\n          getfinalLevel = await axios.get(\"/api/getfinalLevel\", {\r\n            params: {\r\n              ApprovalLevel: state.PurchaseRequisitionHeader.ApproveLevel,\r\n              TransactionType: state.PurchaseRequisitionHeader.PRType,\r\n            },\r\n          });\r\n\r\n          if (getfinalLevel.data.length != 0) {\r\n            isFinalLevel = getfinalLevel.data[0].FinalLevel;\r\n            Priority = getfinalLevel.data[0].Priority;\r\n            if (\r\n              getfinalLevel.data[0].FinalLevel &&\r\n              state.PurchaseRequisitionHeader.ApproveStatus == 2\r\n            ) {\r\n              await setIsFinal(true);\r\n              IsSapPost = true;\r\n\r\n              if (state.PurchaseRequisitionHeader.PRNumber == undefined) {\r\n                const NumberSeries = await axios.get(\r\n                  \"/api/number-series-lookup-by-module\",\r\n                  {\r\n                    params: { DocumentID: 3000 },\r\n                  }\r\n                );\r\n                numberval = NumberSeries.data[0].Series;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!isView) {\r\n        axios\r\n          .post(\"/api/addPurchesRequest\", {\r\n            PurchaseRequisitionHeader: JSON.stringify(\r\n              state.PurchaseRequisitionHeader\r\n            ),\r\n            PurchaseRequisitionItems: JSON.stringify(\r\n              requisitionItems.PurchaseRequisitionItems\r\n            ),\r\n            PurchaseRequisitionAttachments: JSON.stringify(\r\n              attachmentGrid.PurchaseRequisitionAttachmentsAddGrid\r\n            ),\r\n            UserGroup: UserGroupCode,\r\n            PRHeaderID: pRHeaderID,\r\n            finalStatus: statusOfApproval,\r\n            IsFinal: isFinalLevel,\r\n            Priority: Priority,\r\n            IsSapPost: IsSapPost,\r\n            UserID: userName,\r\n          })\r\n          .then((response) => {\r\n            console.log(response.data);\r\n            Swal.fire({\r\n              icon: \"success\",\r\n              title: \"Success\",\r\n              text: \"Saved Successfully!\",\r\n            }).then(async (res) => {\r\n              // const newPRType = response.data;\r\n              const allPR = await axios.get(\"/api/getAllPR\", {\r\n                params: { EnterUser: userName },\r\n              });\r\n              console.log(\"getfinalLevel\", getfinalLevel);\r\n              setPrData(allPR.data);\r\n              if (\r\n                state.PurchaseRequisitionHeader.ApproveLevel != undefined &&\r\n                state.PurchaseRequisitionHeader.ApproveLevel != 0 &&\r\n                getfinalLevel != undefined\r\n              ) {\r\n                if (getfinalLevel.data.length != 0) {\r\n                  let appLevel = getfinalLevel.data[0].FinalLevel;\r\n                  let appStatus = state.PurchaseRequisitionHeader.ApproveStatus;\r\n\r\n                  if (appLevel && appStatus == 2) {\r\n                    sapPost();\r\n                  } else {\r\n                    OnClickClear();\r\n                  }\r\n                }\r\n              } else {\r\n                OnClickClear();\r\n              }\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error:\", error);\r\n            Swal.fire({\r\n              icon: \"error\",\r\n              title: '<span style=\"color: red;\">Error!</span>',\r\n              text: \"Failed to save purchase request details\",\r\n              confirmButtonColor: \"#d33\",\r\n              confirmButtonText: \"OK\",\r\n            });\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  const sapPost = async () => {\r\n    let PRnumberSeries;\r\n    if (state.PurchaseRequisitionHeader.PRNumber == undefined) {\r\n      PRnumberSeries = numberval;\r\n    } else {\r\n      PRnumberSeries = state.PurchaseRequisitionHeader.PRNumber;\r\n    }\r\n\r\n    axios\r\n      .post(\"/api/PurchesRequest-sync\", {\r\n        PurchaseRequisitionHeader: state.PurchaseRequisitionHeader,\r\n        PurchaseRequisitionAttachments:\r\n          attachmentGrid.PurchaseRequisitionAttachmentsAddGrid,\r\n        PurchaseRequisitionItems: requisitionItems.PurchaseRequisitionItems,\r\n        PR_Number: PRnumberSeries,\r\n      })\r\n      .then(async (res) => {\r\n        if (!res.data.error) {\r\n          const updateHeader = await axios.post(\"/api/updateIsSapPost\", {\r\n            params: {\r\n              PRNumber: PRnumberSeries,\r\n              IsSapPost: true,\r\n            },\r\n          });\r\n          const updateStatus = await axios.post(\"/api/updateStatus\", {\r\n            params: {\r\n              PRNumber: PRnumberSeries,\r\n              Status: \"2\",\r\n            },\r\n          });\r\n          // const NumberSeries = await axios.get(\r\n          //   \"/api/number-series-lookup-by-module\",\r\n          //   {\r\n          //     params: { DocumentID: 3000 },\r\n          //   }\r\n          // );\r\n          // const ValidityPeriod = await axios.get(\"/api/getValidityPeriod\");\r\n          // let date = new Date();\r\n          // let validitiDate = date.setDate(\r\n          //   date.getDate() + parseInt(ValidityPeriod.data.ValidityPeriod)\r\n          // );\r\n          // let dateFromTimestamp = new Date(validitiDate);\r\n          setPRHeaderID(0);\r\n          OnClickClear();\r\n        } else {\r\n          const updateHeader = await axios.post(\"/api/updateIsSapPost\", {\r\n            params: {\r\n              PRNumber: PRnumberSeries,\r\n              IsSapPost: false,\r\n            },\r\n          });\r\n          const updateStatus = await axios.post(\"/api/updateStatus\", {\r\n            params: {\r\n              PRNumber: PRnumberSeries,\r\n              Status: \"0\",\r\n            },\r\n          });\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: '<span style=\"color: red;\">SAP Error!</span>',\r\n            text: res.data.message.error.message.value,\r\n            confirmButtonColor: \"#d33\",\r\n            confirmButtonText: \"OK\",\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: '<span style=\"color: red;\">Error!</span>',\r\n          text: \"Failed to save purchase request details\",\r\n          confirmButtonColor: \"#d33\",\r\n          confirmButtonText: \"OK\",\r\n        });\r\n        console.log(error);\r\n        console.error(\"Error:\", error);\r\n      });\r\n  };\r\n\r\n  const ValidationItems = async () => {\r\n    if (state.PurchaseRequisitionHeader.ApproveLevel != undefined) {\r\n      const Limits = await axios.get(\"/api/checkLimite\", {\r\n        params: {\r\n          UserName: userName,\r\n          ApprovalLevel: state.PurchaseRequisitionHeader.ApproveLevel,\r\n          PRType: state.PurchaseRequisitionHeader.PRType,\r\n          ItemCategory: state.PurchaseRequisitionHeader.ItemCategory,\r\n        },\r\n      });\r\n      // console.log(\"limitValues\", Limits.data);\r\n      // let isIncrease = false;\r\n      // let isDecrease = false;\r\n      // if (Limits.data[0].IncreaseQty != null) {\r\n      //   isIncrease = Limits.data[0].IncreaseQty;\r\n      // }\r\n      // if (Limits.data[0].IncreaseQty != null) {\r\n      //   isDecrease = Limits.data[0].DecreaseQty;\r\n      // }\r\n      // limitValues = Limits.data.length;\r\n      // console.log(\"isIncrease\", isIncrease);\r\n      // console.log(\"isDecrease\", isDecrease);\r\n      // console.log(\"Quantity\", state.PurchaseRequisitionHeader.Quantity);\r\n      // console.log(\"previosQty\", previosQty);\r\n    }\r\n    if (\r\n      itemObject.GroupTable.Module == \"\" ||\r\n      itemObject.GroupTable.Module == NaN ||\r\n      itemObject.GroupTable.Module == undefined\r\n    ) {\r\n      OnNotification(\"Module is Required\", \"error\");\r\n      return false;\r\n    } else if (\r\n      itemObject.GroupTable.ItemCode == \"\" ||\r\n      itemObject.GroupTable.ItemCode == NaN ||\r\n      itemObject.GroupTable.ItemCode == undefined\r\n    ) {\r\n      OnNotification(\"Item/Service Code is Required\", \"error\");\r\n      return false;\r\n    } else if (\r\n      itemObject.GroupTable.UnitPrice == \"\" ||\r\n      itemObject.GroupTable.UnitPrice == NaN ||\r\n      itemObject.GroupTable.UnitPrice == undefined\r\n    ) {\r\n      OnNotification(\"UnitPrice is Required\", \"error\");\r\n      return false;\r\n    } else if (\r\n      itemObject.GroupTable.Quantity == \"\" ||\r\n      itemObject.GroupTable.Quantity == NaN ||\r\n      itemObject.GroupTable.Quantity == undefined\r\n    ) {\r\n      OnNotification(\"Quantity is Required\", \"error\");\r\n      return false;\r\n    } else if (itemObject.GroupTable.Quantity <= 0) {\r\n      OnNotification(\"Quantity is greater than 0\", \"error\");\r\n      return false;\r\n    } else if (itemObject.GroupTable.UnitPrice <= 0) {\r\n      OnNotification(\"UnitPrice is greater than 0\", \"error\");\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  // const onClickAddItem = async () => {\r\n  //   if (!flgLoad.isLoad) {\r\n  //     if (await ValidationItems()) {\r\n  //       let arrayPurchas = [...requisitionItems.PurchaseRequisitionItems];\r\n  //       console.log(\"Array\", arrayPurchas);\r\n  //       // arrayPurchas.push(itemObject.GroupTable);\r\n  //       let itemCode = itemObject.GroupTable.ItemCode;\r\n  //       console.log(\"itemCode\", itemCode);\r\n  //       let index = arrayPurchas.findIndex(\r\n  //         (item) => item.ItemCode === itemCode\r\n  //       );\r\n  //       console.log(\"isUpdate\", isUpdate);\r\n  //       console.log(\"index \", index);\r\n  //       if (index !== -1 && isUpdate != false) {\r\n  //         console.log(\"AWA 1\");\r\n  //         OnNotification(\"Already Added Item Code\", \"error\");\r\n  //         return false;\r\n  //         // arrayPurchas[index] = itemObject.GroupTable;\r\n  //         // let price =\r\n  //         //   itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitPrice;\r\n  //         // let cost =\r\n  //         //   itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitCost;\r\n  //         // let prevQty = previosQty;\r\n  //         // let prevPrice = previosPrice;\r\n  //         // let prevCost = previosCost;\r\n  //         // let prevTotal = previosQty * previosPrice;\r\n  //         // let preevCostTotal = previosQty * prevCost;\r\n\r\n  //         // setState((prevState) => ({\r\n  //         //   PurchaseRequisitionHeader: {\r\n  //         //     ...prevState.PurchaseRequisitionHeader,\r\n  //         //     TotalAmount: parseFloat(\r\n  //         //       prevTotal - prevState.PurchaseRequisitionHeader.TotalAmount\r\n  //         //     ),\r\n  //         //     //  +\r\n  //         //     // price\r\n  //         //     TotalCost:\r\n  //         //       parseFloat(prevState.PurchaseRequisitionHeader.TotalCost) +\r\n  //         //       cost -\r\n  //         //       preevCostTotal,\r\n  //         //   },\r\n  //         // }));\r\n  //         // setIsUpdate(false);\r\n\r\n  //         // setrequisitionItems({ PurchaseRequisitionItems: arrayPurchas });\r\n\r\n  //         // setItemObject({ GroupTable: {} });\r\n  //       } else if (!isUpdate) {\r\n  //         console.log(\"AWA 2\");\r\n  //         arrayPurchas.push(itemObject.GroupTable);\r\n  //         let price =\r\n  //           itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitPrice;\r\n  //         let cost =\r\n  //           itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitCost;\r\n  //         setState((prevState) => ({\r\n  //           PurchaseRequisitionHeader: {\r\n  //             ...prevState.PurchaseRequisitionHeader,\r\n  //             TotalAmount:\r\n  //               parseFloat(prevState.PurchaseRequisitionHeader.TotalAmount) +\r\n  //               price,\r\n  //             TotalCost:\r\n  //               parseFloat(prevState.PurchaseRequisitionHeader.TotalCost) +\r\n  //               cost,\r\n  //           },\r\n  //         }));\r\n  //         setIsUpdate(false);\r\n\r\n  //         setrequisitionItems({ PurchaseRequisitionItems: arrayPurchas });\r\n\r\n  //         setItemObject({ GroupTable: {} });\r\n  //       } else {\r\n  //         OnNotification(\"Already Added Item Code\", \"error\");\r\n  //         return false;\r\n  //       }\r\n  //     }\r\n  //   } else {\r\n  //     if (await ValidationItems()) {\r\n  //       let arrayPurchas = [...requisitionItems.PurchaseRequisitionItems];\r\n  //       arrayPurchas[tableIndex.index] = itemObject.GroupTable;\r\n  //       setrequisitionItems({ PurchaseRequisitionItems: arrayPurchas });\r\n  //       let price =\r\n  //         itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitPrice;\r\n  //       let cost =\r\n  //         itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitCost;\r\n\r\n  //       let prevCost = previosCost;\r\n  //       let prevTotal = previosQty * previosPrice;\r\n\r\n  //       setState((prevState) => ({\r\n  //         PurchaseRequisitionHeader: {\r\n  //           ...prevState.PurchaseRequisitionHeader,\r\n  //           TotalAmount:\r\n  //             parseFloat(prevState.PurchaseRequisitionHeader.TotalAmount) +\r\n  //             price -\r\n  //             prevTotal,\r\n  //           TotalCost:\r\n  //             parseFloat(prevState.PurchaseRequisitionHeader.TotalCost) +\r\n  //             cost -\r\n  //             prevCost,\r\n  //         },\r\n  //       }));\r\n  //       setItemObject({ GroupTable: {} });\r\n  //     }\r\n  //     setIsUpdate(false);\r\n  //   }\r\n  // };\r\n\r\n  const onClickAddItem = async () => {\r\n    if (!flgLoad.isLoad) {\r\n      if (await ValidationItems()) {\r\n        let arrayPurchas = [...requisitionItems.PurchaseRequisitionItems];\r\n        let itemCode = itemObject.GroupTable.ItemCode;\r\n        let index = arrayPurchas.findIndex(\r\n          (item) => item.ItemCode === itemCode\r\n        );\r\n        console.log(isUpdate);\r\n        if (true) {\r\n          //index !== -1\r\n          console.log(\"ccc\", index);\r\n          if (isUpdate && index !== -1) {\r\n            arrayPurchas[index] = itemObject.GroupTable;\r\n            let price =\r\n              itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitPrice;\r\n            let cost =\r\n              itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitCost;\r\n\r\n            let prevQty = previosQty;\r\n            let prevPrice = previosPrice;\r\n            let prevTotal = prevQty * prevPrice;\r\n            let prevCost = previosCost;\r\n            let prevCostTotal = prevQty * prevCost;\r\n\r\n            setState((prevState) => ({\r\n              PurchaseRequisitionHeader: {\r\n                ...prevState.PurchaseRequisitionHeader,\r\n                TotalAmount:\r\n                  parseFloat(prevState.PurchaseRequisitionHeader.TotalAmount) +\r\n                  price -\r\n                  prevTotal,\r\n                TotalCost:\r\n                  parseFloat(prevState.PurchaseRequisitionHeader.TotalCost) +\r\n                  cost -\r\n                  prevCostTotal,\r\n              },\r\n            }));\r\n\r\n            setrequisitionItems({ PurchaseRequisitionItems: arrayPurchas });\r\n            setItemObject({ GroupTable: {} });\r\n            setIsUpdate(false);\r\n          } else if (!isUpdate && index === -1) {\r\n            arrayPurchas.push(itemObject.GroupTable);\r\n            let price =\r\n              itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitPrice;\r\n            let cost =\r\n              itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitCost;\r\n\r\n            setState((prevState) => ({\r\n              PurchaseRequisitionHeader: {\r\n                ...prevState.PurchaseRequisitionHeader,\r\n                TotalAmount:\r\n                  parseFloat(prevState.PurchaseRequisitionHeader.TotalAmount) +\r\n                  price,\r\n                TotalCost:\r\n                  parseFloat(prevState.PurchaseRequisitionHeader.TotalCost) +\r\n                  cost,\r\n              },\r\n            }));\r\n\r\n            setrequisitionItems({ PurchaseRequisitionItems: arrayPurchas });\r\n            setItemObject({ GroupTable: {} });\r\n          }\r\n          // else if (!isUpdate && index) {\r\n          //   OnNotification(\"Already Added Item Code\", \"error\");\r\n          // }\r\n          else {\r\n            OnNotification(\"Already Added Item Code\", \"error\");\r\n          }\r\n        }\r\n        //  else {\r\n        //   arrayPurchas.push(itemObject.GroupTable);\r\n        //   let price =\r\n        //     itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitPrice;\r\n        //   let cost =\r\n        //     itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitCost;\r\n\r\n        //   setState((prevState) => ({\r\n        //     PurchaseRequisitionHeader: {\r\n        //       ...prevState.PurchaseRequisitionHeader,\r\n        //       TotalAmount:\r\n        //         parseFloat(prevState.PurchaseRequisitionHeader.TotalAmount) +\r\n        //         price,\r\n        //       TotalCost:\r\n        //         parseFloat(prevState.PurchaseRequisitionHeader.TotalCost) +\r\n        //         cost,\r\n        //     },\r\n        //   }));\r\n\r\n        //   setrequisitionItems({ PurchaseRequisitionItems: arrayPurchas });\r\n        //   setItemObject({ GroupTable: {} });\r\n        //   // setIsUpdate(false);\r\n        // }\r\n      }\r\n    } else {\r\n      console.log(\"AWA AA\")\r\n      if (await ValidationItems()) {\r\n        let arrayPurchas = [...requisitionItems.PurchaseRequisitionItems];\r\n        arrayPurchas[tableIndex.index] = itemObject.GroupTable;\r\n        let price =\r\n          itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitPrice;\r\n        let cost =\r\n          itemObject.GroupTable.Quantity * itemObject.GroupTable.UnitCost;\r\n\r\n        let prevQty = previosQty;\r\n        let prevPrice = previosPrice;\r\n        let prevTotal = prevQty * prevPrice;\r\n        let prevCost = previosCost;\r\n        let prevCostTotal = prevQty * prevCost;\r\n\r\n        setState((prevState) => ({\r\n          PurchaseRequisitionHeader: {\r\n            ...prevState.PurchaseRequisitionHeader,\r\n            TotalAmount:\r\n              parseFloat(prevState.PurchaseRequisitionHeader.TotalAmount) +\r\n              price -\r\n              prevTotal,\r\n            TotalCost:\r\n              parseFloat(prevState.PurchaseRequisitionHeader.TotalCost) +\r\n              cost -\r\n              prevCostTotal,\r\n          },\r\n        }));\r\n\r\n        setrequisitionItems({ PurchaseRequisitionItems: arrayPurchas });\r\n        setItemObject({ GroupTable: {} });\r\n        // setIsUpdate(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onClickAddAttachments = () => {\r\n    if (attachment.File) {\r\n      let FileData = new FormData();\r\n      FileData.append(\"file\", attachment.File);\r\n      var ext = /(?:\\.([^.]+))?$/;\r\n      let FileName = (\r\n        \"PR\" +\r\n        \"_\" +\r\n        uuid.v4() +\r\n        \".\" +\r\n        ext.exec(attachment.File.name)[1]\r\n      ).replaceAll(/\\s/g, \"\");\r\n      // debugger;\r\n      axios\r\n        .post(\"/api/upload/attachment\", FileData, {\r\n          params: {\r\n            Folder: \"PR\",\r\n            FileName: FileName,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          let filePath = response.data.filePath;\r\n          let currentDate = new Date();\r\n          let formattedDate = currentDate.toLocaleDateString();\r\n          let attachmentArray = {\r\n            FileName: FileName,\r\n            FilePath: filePath,\r\n            FileUploadedUser: userName,\r\n            FileUploadedDate: formattedDate,\r\n            Remarks: attachLoad.AttachGroup.Remarks,\r\n            Attach: attachLoad.AttachGroup.Attach,\r\n          };\r\n\r\n          let PurchaseRequisitionAttachmentsLst = [\r\n            ...attachmentGrid.PurchaseRequisitionAttachmentsAddGrid,\r\n          ];\r\n\r\n          PurchaseRequisitionAttachmentsLst.push(attachmentArray);\r\n\r\n          setAttachmentGrid({\r\n            PurchaseRequisitionAttachmentsAddGrid:\r\n              PurchaseRequisitionAttachmentsLst,\r\n            attachmentArray: {},\r\n          });\r\n          setAttachLoad({ AttachGroup: {} });\r\n          document.getElementById(\"fileInput\").value = \"\";\r\n          setAttachment({});\r\n          // if (fileUploaderRef.current) {\r\n          //   fileUploaderRef.current.instance.reset();\r\n          // }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const FileSelect = (e) => {\r\n    let File = {};\r\n    File = e.target.files[0];\r\n\r\n    setAttachment({\r\n      File: File,\r\n    });\r\n  };\r\n\r\n  // const onSelectedFilesChanged = useCallback(\r\n  //   (e) => {\r\n  //     console.log(\"file\", e.value[0]);\r\n  //     let File = {};\r\n  //     File = e.value[0];\r\n\r\n  //     setAttachment({\r\n  //       File: File,\r\n  //     });\r\n  //   },\r\n  //   [setSelectedFiles]\r\n  // );\r\n\r\n  // const fetchMoreItems = () => {\r\n  //   const remainingItems = items.length - index;\r\n  //   const nextItemsCount = Math.min(100, remainingItems);\r\n\r\n  //   if (nextItemsCount > 0) {\r\n  //     const nextItems = items.slice(index, index + nextItemsCount);\r\n  //     setYArray((prevYArray) => [...prevYArray, ...nextItems]);\r\n  //     setIndex((prevIndex) => prevIndex + nextItemsCount);\r\n  //   } else {\r\n  //     console.log(\"No more items to fetch.\");\r\n  //   }\r\n  // };\r\n\r\n  const whsChange = (e) => {\r\n    try {\r\n      if (!flgLoad.isLoad) {\r\n        axios\r\n          .all([\r\n            axios.get(\"/api/getAVGPrice\", {\r\n              params: {\r\n                WhsCode: e.value,\r\n                ItemCode: itemObject.GroupTable.ItemCode,\r\n              },\r\n            }),\r\n          ])\r\n          .then(\r\n            axios.spread(async (AVGPrice) => {\r\n              let avgCost = 0;\r\n\r\n              if (AVGPrice.data.length != 0) {\r\n                avgCost = AVGPrice.data[0].AVGPrice;\r\n              }\r\n              setItemObject((prevState) => ({\r\n                GroupTable: {\r\n                  ...prevState.GroupTable,\r\n                  UnitCost: avgCost, //Price.data[0].Price,\r\n                },\r\n              }));\r\n              setState((prevState) => ({\r\n                PurchaseRequisitionHeader: {\r\n                  ...prevState.PurchaseRequisitionHeader,\r\n                },\r\n              }));\r\n            })\r\n          )\r\n          .catch((error) => console.error(error));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching details:\", error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (value) => {\r\n    if (!flgLoad.isLoad) {\r\n      if (value.value === \"see_more\") {\r\n        setItemObject({\r\n          GroupTable: {\r\n            ItemCode: null,\r\n            ItemDescription: \"\",\r\n            OnhandQty: null,\r\n            WarehouseCode: null,\r\n            UoMCode: null,\r\n          },\r\n        });\r\n      } else {\r\n        try {\r\n          if (value.value != null) {\r\n            let UOMGroup = null;\r\n            axios\r\n              .all([\r\n                axios.get(\"/api/getItemDetails\", {\r\n                  params: { ItemCode: value.value },\r\n                }),\r\n                axios.get(\"/api/getItemPrice\", {\r\n                  params: { ItemCode: value.value },\r\n                }),\r\n                // axios.get(\"/api/getAVGPrice\", {\r\n                //   params: { WhsCode: e.value, ItemCode: value.value },\r\n                // }),\r\n                axios.get(\"/api/getUgpEntry\", {\r\n                  params: { ItemCode: value.value },\r\n                }),\r\n                axios.get(\"/api/getWHS\", {\r\n                  params: { ItemCode: value.value },\r\n                }),\r\n              ])\r\n              .then(\r\n                axios.spread(async (ItemDetails, Price, UgpEntry, whsCode) => {\r\n                  let price = 0;\r\n                  let avgCost = 0;\r\n                  let whsCodeItem = \"01\";\r\n                  let AVGPrice;\r\n\r\n                  console.log(\"whsCode\", whsCode);\r\n\r\n                  if (whsCode.data.length != 0) {\r\n                    whsCodeItem = whsCode.data[0].WhsCode;\r\n\r\n                    AVGPrice = await axios.get(\"/api/getAVGPrice\", {\r\n                      params: {\r\n                        WhsCode: whsCode.data[0].WhsCode,\r\n                        ItemCode: value.value,\r\n                      },\r\n                    });\r\n                    console.log(\"AVGPrice\", AVGPrice);\r\n                    if (AVGPrice.data.length != 0) {\r\n                      avgCost = AVGPrice.data[0].AVGPrice;\r\n                    }\r\n                  }\r\n\r\n                  if (UgpEntry.data.length != 0) {\r\n                    UOMGroup = await axios.get(\"/api/getUomGroup\", {\r\n                      params: {\r\n                        UgpEntry: UgpEntry.data[0].UgpEntry,\r\n                      },\r\n                    });\r\n\r\n                    setUOM(UOMGroup.data);\r\n                  }\r\n\r\n                  if (Price.data.length != 0) {\r\n                    price = Price.data[0].Price;\r\n                  }\r\n\r\n                  setItemObject((prevState) => ({\r\n                    GroupTable: {\r\n                      ...prevState.GroupTable,\r\n                      ItemDescription: ItemDetails.data[0].ItemDesc,\r\n                      OnhandQty: ItemDetails.data[0].QtyOnHand,\r\n                      WarehouseCode: whsCodeItem,\r\n                      UoMCode: UOMGroup.data[0].cUnitCode,\r\n                      UnitCost: avgCost,\r\n                      UnitPrice: 0,\r\n                      Quantity: 1,\r\n                      RequiredDate: new Date(),\r\n                      TotalAmountExclusive: 0,\r\n                    },\r\n                  }));\r\n                  setState((prevState) => ({\r\n                    PurchaseRequisitionHeader: {\r\n                      ...prevState.PurchaseRequisitionHeader,\r\n                    },\r\n                  }));\r\n                  setDefultQuantity(1);\r\n                })\r\n              )\r\n              .catch((error) => console.error(error));\r\n          } else {\r\n            setItemObject((prevState) => ({\r\n              GroupTable: {\r\n                ...prevState.GroupTable,\r\n                ItemCode: null,\r\n                ItemDescription: \"\",\r\n                OnhandQty: null,\r\n                WarehouseCode: null,\r\n                UoMCode: null,\r\n                UnitCost: 0,\r\n                UnitPrice: 0,\r\n              },\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching details:\", error);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const getItems = (e) => {\r\n    if (!flgLoad.isLoad) {\r\n      axios\r\n        .get(\"/api/getItems\", {\r\n          params: {\r\n            ItemType: state.PurchaseRequisitionHeader.ItemCategory,\r\n            module: e.value,\r\n          },\r\n        })\r\n        .then((Items) => {\r\n          setItems(Items.data);\r\n          setItemObject((prevState) => ({\r\n            GroupTable: {\r\n              ...prevState.GroupTable,\r\n              ItemCode: null,\r\n              ItemDescription: \"\",\r\n              OnhandQty: null,\r\n              WarehouseCode: null,\r\n              UoMCode: null,\r\n            },\r\n          }));\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const changeCurr = (e) => {\r\n    if (e.value == \"LKR\") {\r\n      setcurrencyRate({ currencyRate: 1 });\r\n    } else {\r\n      axios\r\n        .get(\"/api/getCurrencyRate\", {\r\n          params: {\r\n            currencyCode: e.value,\r\n          },\r\n        })\r\n        .then((Items) => {\r\n          console.log(Items.data[0].Rate);\r\n          if (Items.data[0].Rate == undefined || Items.data[0].Rate == 0) {\r\n            OnNotification(\r\n              \"Currency rate for today not found. Please create it in SAP.\",\r\n              \"error\"\r\n            );\r\n            return false;\r\n          } else {\r\n            setcurrencyRate({ currencyRate: Items.data[0].Rate });\r\n            let price = itemObject.GroupTable.UnitPrice;\r\n            if (price > 0) {\r\n              setItemObject((prevState) => ({\r\n                GroupTable: {\r\n                  ...prevState.GroupTable,\r\n                  UnitPriceWithForeignRate: price * Items.data[0].Rate,\r\n                },\r\n              }));\r\n            }\r\n          }\r\n          //  setCurrency({ Code: e.value });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const changeFillNo = (e) => {\r\n    if (!isDashBoard) {\r\n      let fillNo = state.PurchaseRequisitionHeader.FileNo;\r\n      let date = new Date();\r\n      if (e.value != undefined) {\r\n        setFileName(true);\r\n        setState((prevState) => ({\r\n          PurchaseRequisitionHeader: {\r\n            ...prevState.PurchaseRequisitionHeader,\r\n            LastFileName: \"\",\r\n            FileNo: date.getFullYear() + \"\\\\\" + e.value + \"\\\\\",\r\n          },\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const changeFillName = (e) => {\r\n    if (true) {\r\n      let fillNo = state.PurchaseRequisitionHeader.FileNo;\r\n      if (fillNo != null && e.value != undefined) {\r\n        setFileName(true);\r\n        setState((prevState) => ({\r\n          PurchaseRequisitionHeader: {\r\n            ...prevState.PurchaseRequisitionHeader,\r\n            FileNo: fillNo.substring(0, 12) + e.value,\r\n          },\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const costChange = (e) => {\r\n    if (true) {\r\n      let Quantity = itemObject.GroupTable.Quantity;\r\n      if (e.value > 0 && Quantity > 0) {\r\n        setItemObject((prevState) => ({\r\n          GroupTable: {\r\n            ...prevState.GroupTable,\r\n            TotalCostExclusive: e.value * Quantity,\r\n          },\r\n        }));\r\n      } else {\r\n        setItemObject((prevState) => ({\r\n          GroupTable: {\r\n            ...prevState.GroupTable,\r\n            TotalCostExclusive: 0,\r\n          },\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const priceChange = (e) => {\r\n    if (true) {\r\n      let Quantity = itemObject.GroupTable.Quantity;\r\n      if (e.value > 0 && Quantity > 0) {\r\n        setItemObject((prevState) => ({\r\n          GroupTable: {\r\n            ...prevState.GroupTable,\r\n            TotalAmountExclusive: e.value * Quantity,\r\n            UnitPriceWithForeignRate:\r\n              e.value * state.PurchaseRequisitionHeader.ExchangeRate,\r\n          },\r\n        }));\r\n      } else {\r\n        setItemObject((prevState) => ({\r\n          GroupTable: {\r\n            ...prevState.GroupTable,\r\n            TotalAmountExclusive: 0,\r\n            UnitPriceWithForeignRate: 0,\r\n          },\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const quantityChange = (e) => {\r\n    if (!flgLoad.isLoad) {\r\n      let price = itemObject.GroupTable.UnitPrice;\r\n      let cost = itemObject.GroupTable.UnitCost;\r\n      if (e.value >= 0 && (price > 0 || cost > 0)) {\r\n        setItemObject((prevState) => ({\r\n          GroupTable: {\r\n            ...prevState.GroupTable,\r\n            TotalAmountExclusive: e.value * price,\r\n            TotalCostExclusive: e.value * cost,\r\n          },\r\n        }));\r\n      } else {\r\n        setItemObject((prevState) => ({\r\n          GroupTable: {\r\n            ...prevState.GroupTable,\r\n            TotalAmountExclusive: 0,\r\n            TotalCostExclusive: 0,\r\n          },\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const updatePRTable = async (e) => {\r\n    if (!isEdit) {\r\n      setIsRowClick(false);\r\n      setIsUpdate(false);\r\n      const headerDetails = await axios.get(\"/api/getPRHeaders\", {\r\n        params: { PRNumber: e.data.PRNumber },\r\n      });\r\n      const ItemDetails = await axios.get(\"/api/getPRItems\", {\r\n        params: { PRHeaderID: e.data.PRHeaderID },\r\n      });\r\n\r\n      const AttachmentDetails = await axios.get(\"/api/getPRAttachment\", {\r\n        params: { PRHeaderID: e.data.PRHeaderID },\r\n      });\r\n      const officer = await axios.get(\"/api/getPMOfficer\");\r\n\r\n      setPMOfficerDetails(officer.data);\r\n      setRowIndex(e.data.rowIndex);\r\n      setPRHeaderID(e.data.PRHeaderID);\r\n      setAttachmentGrid({\r\n        PurchaseRequisitionAttachmentsAddGrid: AttachmentDetails.data,\r\n      });\r\n      setState({ PurchaseRequisitionHeader: headerDetails.data[0] });\r\n\r\n      if (e.data.ValidTo != undefined && e.data.ApproveStatus != undefined) {\r\n        const formattedDate = formatDateMonth(new Date(e.data.ValidTo));\r\n        const gerCurrentDate = formatDateMonth(new Date());\r\n        if (formattedDate < gerCurrentDate && e.data.ApproveStatus == 0) {\r\n          setState((prevState) => ({\r\n            PurchaseRequisitionHeader: {\r\n              ...prevState.PurchaseRequisitionHeader,\r\n              ValidityStatus: 0,\r\n            },\r\n          }));\r\n        }\r\n      }\r\n\r\n      let itemArray = ItemDetails.data;\r\n      const updatedArray = itemArray.map((item) => {\r\n        item.TotalAmountExclusive = item.Quantity * item.UnitPrice;\r\n        item.TotalCostExclusive = item.Quantity * item.UnitCost;\r\n        return item;\r\n      });\r\n\r\n      setrequisitionItems({ PurchaseRequisitionItems: updatedArray });\r\n      if (e.data.ApproveStatus != undefined || e.data.ApproveStatus == 2) {\r\n        const getUserGroup = await axios.get(\"/api/getUserGroup\", {\r\n          params: { UserName: userName },\r\n        });\r\n        let nextPriority;\r\n        if (getUserGroup.data.length != 0) {\r\n          nextPriority = await axios.get(\"/api/getNextPriority\", {\r\n            params: {\r\n              PRHeaderID: e.data.PRNumber,\r\n              UserGroup: getUserGroup.data[0].UserGroup,\r\n            },\r\n          });\r\n        }\r\n\r\n        if (nextPriority.data.length != 0) {\r\n          setState((prevState) => ({\r\n            PurchaseRequisitionHeader: {\r\n              ...prevState.PurchaseRequisitionHeader,\r\n              ApproveStatus: \"2\",\r\n            },\r\n          }));\r\n          setApproval(true);\r\n          setISAdd(true);\r\n        } else {\r\n          if (\r\n            e.data.ApproveStatus != 4 &&\r\n            e.data.ApproveStatus != 0 &&\r\n            e.data.ApproveStatus != 2\r\n          ) {\r\n            setISAdd(true);\r\n            setApproval(true);\r\n            setState((prevState) => ({\r\n              PurchaseRequisitionHeader: {\r\n                ...prevState.PurchaseRequisitionHeader,\r\n                ApproveStatus: e.data.ApproveStatus,\r\n              },\r\n            }));\r\n          } else {\r\n            setISAdd(false);\r\n            setApproval(false);\r\n            setState((prevState) => ({\r\n              PurchaseRequisitionHeader: {\r\n                ...prevState.PurchaseRequisitionHeader,\r\n                ApproveStatus: e.data.ApproveStatus,\r\n              },\r\n            }));\r\n          }\r\n        }\r\n      } else {\r\n        setISAdd(false);\r\n        setApproval(false);\r\n        setState((prevState) => ({\r\n          PurchaseRequisitionHeader: {\r\n            ...prevState.PurchaseRequisitionHeader,\r\n            ApproveStatus: e.data.ApproveStatus,\r\n          },\r\n        }));\r\n      }\r\n\r\n      setTimeout(() => {\r\n        focusTextBox();\r\n      }, 200);\r\n\r\n      setState((prevState) => ({\r\n        PurchaseRequisitionHeader: {\r\n          ...prevState.PurchaseRequisitionHeader,\r\n          FileNo: e.data.FileNo,\r\n          LastFileName: e.data.LastFileName,\r\n        },\r\n      }));\r\n    }\r\n    setState((prevState) => ({\r\n      PurchaseRequisitionHeader: {\r\n        ...prevState.PurchaseRequisitionHeader,\r\n        PRUser: userName,\r\n        ApproveUser: userName,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const focusTextBox = useCallback(() => {\r\n    if (FormRef.current) {\r\n      const formInstance = FormRef.current.instance;\r\n      const editor = formInstance.getEditor(\"ExpectedDate\");\r\n      if (editor) {\r\n        editor.focus();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const updateTable = async (e) => {\r\n    if (!isEdit) {\r\n      let replacement = null;\r\n      setflgLoad({ isLoad: true });\r\n      setIsUpdate(true);\r\n      const UgpEntry = await axios.get(\"/api/getUgpEntry\", {\r\n        params: { ItemCode: e.data.ItemCode },\r\n      });\r\n\r\n      if (UgpEntry.data.length != 0) {\r\n        let UOMGroup = await axios.get(\"/api/getUomGroup\", {\r\n          params: {\r\n            UgpEntry: UgpEntry.data[0].UgpEntry,\r\n          },\r\n        });\r\n\r\n        setUOM(UOMGroup.data);\r\n      }\r\n      setTableIndex({ index: e.rowIndex });\r\n      axios\r\n        .get(\"/api/getItems\", {\r\n          params: {\r\n            ItemType: state.PurchaseRequisitionHeader.ItemCategory,\r\n            module: e.data.Module,\r\n          },\r\n        })\r\n        .then((Items) => {\r\n          setItems(Items.data);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n      setPreviosQty(e.data.Quantity);\r\n      setPreviosPrice(e.data.UnitPrice);\r\n      setPreviosCost(e.data.UnitCost);\r\n      setItemObject({\r\n        GroupTable: {\r\n          Module: e.data.Module,\r\n          ItemCode: e.data.ItemCode,\r\n          ItemDescription: e.data.ItemDescription,\r\n          OnhandQty: e.data.OnhandQty,\r\n          WarehouseCode: e.data.WarehouseCode,\r\n          UoMCode: e.data.UoMCode,\r\n          UnitCost: e.data.UnitCost,\r\n          TotalCost: e.data.TotalCost,\r\n          UnitPrice: e.data.UnitPrice,\r\n          TotalAmountExclusive: e.data.TotalAmountExclusive,\r\n          TotalCostExclusive: e.data.TotalCostExclusive,\r\n          RequiredDate: e.data.RequiredDate,\r\n          IsReplacement: e.data.IsReplacement,\r\n          Remark: e.data.Remark,\r\n          Quantity: e.data.Quantity,\r\n        },\r\n      });\r\n      setflgLoad({ isLoad: false });\r\n    }\r\n  };\r\n\r\n  const rowRemoving = async (e) => {\r\n    console.log(e.data);\r\n    if (\r\n      e.data.UnitPrice != undefined &&\r\n      e.data.UnitPrice != undefined &&\r\n      e.data.UnitCost != undefined\r\n    ) {\r\n      let price = parseFloat(e.data.Quantity * e.data.UnitPrice);\r\n      let cost = parseFloat(e.data.Quantity * e.data.UnitCost);\r\n      setState((prevState) => ({\r\n        PurchaseRequisitionHeader: {\r\n          ...prevState.PurchaseRequisitionHeader,\r\n          TotalAmount:\r\n            parseFloat(prevState.PurchaseRequisitionHeader.TotalAmount) - price,\r\n          TotalCost:\r\n            parseFloat(prevState.PurchaseRequisitionHeader.TotalCost) - cost,\r\n        },\r\n      }));\r\n    }\r\n    if (e.data.PRHeaderID != undefined) {\r\n      const deleteRow = await axios.delete(\"/api/deleteRow\", {\r\n        params: { ItemCode: e.data.ItemCode, PRHeaderID: e.data.PRHeaderID },\r\n      });\r\n    }\r\n  };\r\n\r\n  const formatDateMonth = (date) => {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n    return `${month}/${day}/${year}`;\r\n  };\r\n\r\n  const setAprovalName = async (e) => {\r\n    if (e.value != undefined) {\r\n      const getApprovalName = await axios.get(\"/api/getApprovalLevelName\", {\r\n        //getApprovalLevelName getApprovalName\r\n        params: {\r\n          ApprovalLevel: e.value,\r\n          TransactionType: state.PurchaseRequisitionHeader.PRType,\r\n        },\r\n      });\r\n\r\n      if (getApprovalName.data.length != 0) {\r\n        setState((prevState) => ({\r\n          PurchaseRequisitionHeader: {\r\n            ...prevState.PurchaseRequisitionHeader,\r\n            ApprovalDescription: getApprovalName.data.ApprovalLevelName,\r\n          },\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const itemChange = (e) => {\r\n    if (itemObject.GroupTable.Module != undefined) {\r\n      axios\r\n        .get(\"/api/getItems\", {\r\n          params: {\r\n            ItemType: e.value,\r\n            module: itemObject.GroupTable.Module,\r\n          },\r\n        })\r\n        .then((Items) => {\r\n          setItems(Items.data);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const getFileType = (fullPath) => {\r\n    return mimeTypes[fullPath] || \"application/octet-stream\";\r\n  };\r\n\r\n  const viewAttachment = async (e) => {\r\n    console.log(e.data.FileName);\r\n    if (e.data.FileName) {\r\n      const filePath = await axios.get(\"/api/viewFile\", {\r\n        responseType: \"arraybuffer\",\r\n        params: { FilePath: e.data.FilePath },\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      });\r\n      let filePathValue;\r\n      let fileType = \"\";\r\n      if (filePath.config.params.FilePath !== undefined) {\r\n        filePathValue = filePath.config.params.FilePath;\r\n        const parts = filePathValue.split(\"\\\\\");\r\n        const fileName = parts.pop();\r\n        let fullPath = fileName.split(\".\").pop().toLowerCase();\r\n        // const extension = fileName.split('.').pop().toLowerCase();\r\n        fileType = getFileType(fullPath);\r\n      }\r\n      if (filePath.data !== null || filePath.data !== undefined) {\r\n        const reqFile = new Blob([filePath.data], {\r\n          type: fileType,\r\n        }); //{ type: \"application/pdf\" } `application/${fileType}`\r\n\r\n        const fileURL = URL.createObjectURL(reqFile);\r\n        const newTab = window.open(fileURL, \"_blank\");\r\n      }\r\n      // let fileURL = filePath.data.fileURL;\r\n      // console.log(\"fileURL\", filePath.data.fileURL);\r\n      // window.open(fileURL, \"_blank\");\r\n    } else {\r\n      console.log(\"No file path available\");\r\n    }\r\n  };\r\n\r\n  const setApprovalLevelDetails = async (level) => {\r\n    setApprovalLevel([]);\r\n    const approvalLevel = await axios.get(\"/api/filterApprovalLevelDetails\", {\r\n      params: { TransactionType: level.value },\r\n    });\r\n    setState((prevState) => ({\r\n      PurchaseRequisitionHeader: {\r\n        ...prevState.PurchaseRequisitionHeader,\r\n        ApprovalDescription: null,\r\n        ApproveLevel: null,\r\n      },\r\n    }));\r\n    if (approvalLevel.data.length != 0) {\r\n      setApprovalLevel(approvalLevel.data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card title=\"Purchase Requisition Entry\">\r\n        <Tabs defaultActiveKey=\"Header\" id=\"receipt-option\">\r\n          <Tab eventKey=\"Header\" title=\"Header\">\r\n            <Form ref={FormRef} formData={state.PurchaseRequisitionHeader}>\r\n              <GroupItem caption=\"Header Details\" colCount={2}>\r\n                <GroupItem>\r\n                  <Item\r\n                    dataField=\"PRType\"\r\n                    editorType=\"dxSelectBox\"\r\n                    editorOptions={{\r\n                      searchEnabled: true,\r\n                      showClearButton: true,\r\n                      dataSource: PRType,\r\n                      valueExpr: \"PRTypeCode\",\r\n                      displayExpr: \"Discription\",\r\n                      onValueChanged: setApprovalLevelDetails,\r\n                    }}\r\n                  >\r\n                    <Label text=\"PR Type\"></Label>\r\n                    <RequiredRule message=\"Field required\" />\r\n                  </Item>\r\n\r\n                  <Item\r\n                    dataField=\"PRNumber\"\r\n                    // visible={false}\r\n                    editorOptions={{\r\n                      maxLength: 50,\r\n                      readOnly: true,\r\n                    }}\r\n                  >\r\n                    <Label text=\"PR Number\"></Label>\r\n                  </Item>\r\n\r\n                  <Item dataField=\"ExpectedDate\" editorType=\"dxDateBox\">\r\n                    <Label text=\"Expected Delivery Date\"></Label>\r\n                    {/* <CustomRule\r\n                      validationCallback={(options) => {\r\n                        console.log(\"isPDForm\", isPDForm);\r\n                        if (isPDForm) {\r\n                          const currentDate = new Date();\r\n                          const selectedDate = new Date(options.value);\r\n\r\n                          const formattedDate = formatDateMonth(selectedDate);\r\n                          const gerCurrentDate = formatDateMonth(currentDate);\r\n                          console.log(\"formattedDate\", formattedDate);\r\n                          console.log(\"gerCurrentDate\", gerCurrentDate);\r\n                          if (formattedDate >= gerCurrentDate) {\r\n                            console.log(\"true\");\r\n                            return true;\r\n                          } else {\r\n                            console.log(\"false\");\r\n                            return false;\r\n                          }\r\n                        } else {\r\n                          setIsPDForm(true);\r\n                          return true;\r\n                        }\r\n                      }}\r\n                      message=\"Invalid Delivery Date\"\r\n                    /> */}\r\n                  </Item>\r\n\r\n                  <Item\r\n                    dataField=\"FileNo\"\r\n                    // style={{ color: \"rgb(185, 210, 214)\" }}\r\n                    editorOptions={{\r\n                      maxLength: 50,\r\n                      readOnly: true,\r\n                    }}\r\n                  >\r\n                    <Label text=\"File No\"></Label>\r\n                  </Item>\r\n\r\n                  <Item\r\n                    dataField=\"ValidityPeriod\"\r\n                    editorType=\"dxNumberBox\"\r\n                    editorOptions={{\r\n                      readOnly: true,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Validity Period (Days)\"></Label>\r\n                  </Item>\r\n\r\n                  <Item\r\n                    dataField=\"ValidTo\"\r\n                    editorType=\"dxDateBox\"\r\n                    editorOptions={{\r\n                      readOnly: true,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Valid To\"></Label>\r\n                  </Item>\r\n\r\n                  <Item\r\n                    dataField=\"CurrencyCode\"\r\n                    editorType=\"dxSelectBox\"\r\n                    editorOptions={{\r\n                      searchEnabled: true,\r\n                      showClearButton: true,\r\n                      dataSource: currency,\r\n                      valueExpr: \"CurrCode\",\r\n                      displayExpr: \"DocCurrCod\",\r\n                      //value: currency.Code,\r\n                      onValueChanged: changeCurr,\r\n                    }}\r\n                  >\r\n                    <RequiredRule message=\"Field required\" />\r\n                    <Label text=\"Currency Code\"></Label>\r\n                  </Item>\r\n                </GroupItem>\r\n\r\n                <GroupItem>\r\n                  <Item\r\n                    dataField=\"ItemCategory\"\r\n                    editorType=\"dxSelectBox\"\r\n                    editorOptions={{\r\n                      searchEnabled: true,\r\n                      showClearButton: true,\r\n                      dataSource: itemType,\r\n                      valueExpr: \"FldValue\",\r\n                      displayExpr: \"FldValue\",\r\n                      onValueChanged: itemChange,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Item Type\"></Label>\r\n                    <RequiredRule message=\"Field required\" />\r\n                  </Item>\r\n\r\n                  <Item\r\n                    dataField=\"CreatedDate\"\r\n                    editorType=\"dxDateBox\"\r\n                    editorOptions={{\r\n                      readOnly: true,\r\n                    }}\r\n                  >\r\n                    <Label text=\"PR Created Date\"></Label>\r\n                  </Item>\r\n\r\n                  <Item\r\n                    dataField=\"ProcurementOfficer\"\r\n                    editorType=\"dxSelectBox\"\r\n                    editorOptions={{\r\n                      searchEnabled: true,\r\n                      showClearButton: true,\r\n                      dataSource: pmOfficerDetails,\r\n                      valueExpr: \"OfficerID\",\r\n                      displayExpr: \"OfficerID\",\r\n                      onValueChanged: changeFillNo,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Procurement Officer\"></Label>\r\n                  </Item>\r\n                  <Item\r\n                    dataField=\"LastFileName\"\r\n                    editorOptions={{\r\n                      visible: fileName,\r\n                      onValueChanged: changeFillName,\r\n                    }}\r\n                  >\r\n                    <Label text=\"File Name\"></Label>\r\n                  </Item>\r\n                  <Item\r\n                    dataField=\"ValidFrom\"\r\n                    editorType=\"dxDateBox\"\r\n                    editorOptions={{\r\n                      readOnly: true,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Valid From\"></Label>\r\n                  </Item>\r\n\r\n                  <Item\r\n                    dataField=\"ValidityStatus\"\r\n                    editorType=\"dxSelectBox\"\r\n                    editorOptions={{\r\n                      searchEnabled: true,\r\n                      showClearButton: true,\r\n                      dataSource: state.validStatus,\r\n                      valueExpr: \"ID\",\r\n                      displayExpr: \"Name\",\r\n                      readOnly: true,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Validity Status\"></Label>\r\n                  </Item>\r\n\r\n                  <Item\r\n                    dataField=\"ExchangeRate\"\r\n                    editorType=\"dxNumberBox\"\r\n                    editorOptions={{\r\n                      value: currencyRateCode.currencyRate,\r\n                      readOnly: true,\r\n                      format: \"#,##0.00\",\r\n                    }}\r\n                  >\r\n                    <Label text=\"Currency Rate\"></Label>\r\n                  </Item>\r\n                </GroupItem>\r\n              </GroupItem>\r\n\r\n              <GroupItem>\r\n                <Item dataField=\"Remarks2\" editorType=\"dxTextArea\">\r\n                  <Label text=\"Purchase Justification\"></Label>\r\n                </Item>\r\n\r\n                <Item dataField=\"Remarks1\" editorType=\"dxTextArea\">\r\n                  <Label text=\"Remarks\"></Label>\r\n                </Item>\r\n              </GroupItem>\r\n            </Form>\r\n          </Tab>\r\n          <Tab eventKey=\"Items\" title=\"Items\">\r\n            <Form formData={itemObject.GroupTable}>\r\n              {/* ref={FormRef} */}\r\n              <GroupItem caption=\"Item Details\" colCount={2}>\r\n                <GroupItem>\r\n                  <Item\r\n                    dataField=\"Module\"\r\n                    editorType=\"dxSelectBox\"\r\n                    editorOptions={{\r\n                      searchEnabled: true,\r\n                      showClearButton: true,\r\n                      items: productModule,\r\n                      valueExpr: \"ID\",\r\n                      displayExpr: \"Name\",\r\n                      onValueChanged: getItems,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Module\"></Label>\r\n                    <RequiredRule message=\"Field required\" />\r\n                  </Item>\r\n\r\n                  <Item\r\n                    dataField=\"ItemDescription\"\r\n                    editorOptions={{\r\n                      maxLength: 50,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Inventry/Service Description\"></Label>\r\n                  </Item>\r\n\r\n                  {/* <Item\r\n                    dataField=\"WarehouseCode\"\r\n                    editorType=\"dxSelectBox\"\r\n                    style={{ backgroundColor: \"red\" }}\r\n                    editorOptions={{\r\n                      items: Warehouse,\r\n                      valueExpr: \"WhseCode\",\r\n                      displayExpr: (item) =>\r\n                        `${item.WhseCode} - ${item.WhseName}`,\r\n                      fieldTemplate: (selectedItem) => {\r\n                        return selectedItem ? (\r\n                          <div>{`${selectedItem.WhseCode} - ${selectedItem.WhseName}`}</div>\r\n                        ) : null;\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Label text=\"Warehouse\"></Label>\r\n                  </Item> */}\r\n                  {/* <DropDownBox\r\n                    value={gridBoxValue}\r\n                    opened={isGridBoxOpened}\r\n                    valueExpr=\"ID\"\r\n                    deferRendering={false}\r\n                    inputAttr={ownerLabel}\r\n                    displayExpr={gridBoxDisplayExpr}\r\n                    placeholder=\"Select a value...\"\r\n                    showClearButton={true}\r\n                    dataSource={gridDataSource}\r\n                    onValueChanged={syncDataGridSelection}\r\n                    onOptionChanged={onGridBoxOpened}\r\n                    contentRender={dataGridRender}\r\n                  /> */}\r\n\r\n                  <Item\r\n                    dataField=\"OnhandQty\"\r\n                    editorType=\"dxNumberBox\"\r\n                    editorOptions={{\r\n                      readOnly: true,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Quantity On Hand\"></Label>\r\n                  </Item>\r\n                  <Item\r\n                    dataField=\"UnitPriceWithForeignRate\"\r\n                    editorType=\"dxNumberBox\"\r\n                    editorOptions={{\r\n                      format: \"#,##0.00\",\r\n                      readOnly: true,\r\n                    }}\r\n                  ></Item>\r\n                  <Item\r\n                    dataField=\"TotalAmountExclusive\"\r\n                    editorType=\"dxNumberBox\"\r\n                    editorOptions={{\r\n                      format: \"#,##0.00\",\r\n                      readOnly: true,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Total Amount Exclusive\"></Label>\r\n                  </Item>\r\n                  <Item\r\n                    dataField=\"TotalCostExclusive\"\r\n                    editorType=\"dxNumberBox\"\r\n                    editorOptions={{\r\n                      format: \"#,##0.00\",\r\n                      readOnly: true,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Total Cost Exclusive\"></Label>\r\n                  </Item>\r\n\r\n                  <Item\r\n                    dataField=\"RequiredDate\"\r\n                    editorType=\"dxDateBox\"\r\n                    editorOptions={{\r\n                      readOnly: true,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Required Date\"></Label>\r\n                  </Item>\r\n                </GroupItem>\r\n\r\n                <GroupItem>\r\n                  <Item\r\n                    dataField=\"ItemCode\"\r\n                    editorType=\"dxSelectBox\"\r\n                    editorOptions={{\r\n                      items: [\r\n                        ...items.slice(0, index),\r\n                        //{ ItemCode: \"see_more\", ItemDesc: \"See More...\" },\r\n                      ],\r\n                      valueExpr: \"ItemCode\",\r\n                      displayExpr: \"ItemDesc\",\r\n                      searchEnabled: true,\r\n                      showClearButton: true,\r\n                      //virtual: true,\r\n                      onValueChanged: handleChange,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Inventry/Service Code\"></Label>\r\n                    <RequiredRule message=\"Field required\" />\r\n                  </Item>\r\n                  <Item\r\n                    dataField=\"UnitCost\"\r\n                    editorType=\"dxNumberBox\"\r\n                    editorOptions={{\r\n                      format: \"#,##0.00\",\r\n                      onValueChanged: costChange,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Unit Cost\"></Label>\r\n                  </Item>\r\n                  <Item\r\n                    dataField=\"UnitPrice\"\r\n                    editorType=\"dxNumberBox\"\r\n                    editorOptions={{\r\n                      format: \"#,##0.00\",\r\n                      onValueChanged: priceChange,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Unit Price\"></Label>\r\n                    <RequiredRule message=\"Field required\" />\r\n                  </Item>\r\n                  <Item\r\n                    dataField=\"Quantity\"\r\n                    editorType=\"dxNumberBox\"\r\n                    editorOptions={{\r\n                      onValueChanged: quantityChange,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Quantity\" editorType=\"dxNumberBox\"></Label>\r\n                    <RequiredRule message=\"Field required\" />\r\n                  </Item>\r\n\r\n                  <Item\r\n                    dataField=\"WarehouseCode\"\r\n                    editorType=\"dxSelectBox\"\r\n                    style={{ backgroundColor: \"red\" }}\r\n                    editorOptions={{\r\n                      searchEnabled: true,\r\n                      items: Warehouse,\r\n                      valueExpr: \"WhseCode\",\r\n                      displayExpr: \"WhseName\",\r\n                      onValueChanged: whsChange,\r\n                    }}\r\n                  >\r\n                    <Label text=\"Warehouse\"></Label>\r\n                  </Item>\r\n                  <Item\r\n                    dataField=\"UoMCode\"\r\n                    editorType=\"dxSelectBox\"\r\n                    editorOptions={{\r\n                      searchEnabled: true,\r\n                      showClearButton: true,\r\n                      items: UOM,\r\n                      valueExpr: \"cUnitCode\",\r\n                      displayExpr: \"cUnitDescription\",\r\n                    }}\r\n                  >\r\n                    <Label text=\"Unit Of Measure\"></Label>\r\n                  </Item>\r\n\r\n                  <Item\r\n                    dataField=\"IsReplacement\"\r\n                    editorType=\"dxRadioGroup\"\r\n                    editorOptions={{\r\n                      items: state.Choose,\r\n                      valueExpr: \"ID\",\r\n                      displayExpr: \"Name\",\r\n                      layout: \"horizontal\",\r\n                    }}\r\n                  >\r\n                    <Label visible={false} />\r\n                  </Item>\r\n                </GroupItem>\r\n              </GroupItem>\r\n              <GroupItem>\r\n                <Item dataField=\"Remark\" editorType=\"dxTextArea\">\r\n                  <Label text=\"Remark\"></Label>\r\n                </Item>\r\n              </GroupItem>\r\n            </Form>\r\n            <br />\r\n            <Navbar bg=\"light\" variant=\"light\">\r\n              <Button\r\n                variant=\"secondary\"\r\n                icon=\"feather icon-layers\"\r\n                onClick={onClickAddItem}\r\n                disabled={isAdd}\r\n              >\r\n                Add\r\n              </Button>\r\n            </Navbar>\r\n            <br />\r\n            <DataGrid\r\n              id=\"Items\"\r\n              allowColumnReordering={true}\r\n              showBorders={true}\r\n              dataSource={requisitionItems.PurchaseRequisitionItems}\r\n              // columnAutoWidth={true}\r\n              onCellDblClick={updateTable}\r\n              onRowRemoving={rowRemoving}\r\n              hoverStateEnabled={true}\r\n              allowColumnResizing={true}\r\n            >\r\n              <Paging enabled={true} />\r\n              <Editing mode=\"row\" allowDeleting={true} />\r\n              <Column dataField=\"Module\">\r\n                <Lookup\r\n                  items={productModule}\r\n                  valueExpr=\"ID\"\r\n                  displayExpr=\"Name\"\r\n                />\r\n              </Column>\r\n              <Column dataField=\"PRHeaderID\" visible={false}></Column>\r\n              <Column dataField=\"ItemCode\" caption=\"Item Code\"></Column>\r\n              <Column dataField=\"ItemDescription\" caption=\"Item Description\" />\r\n              <Column dataField=\"WarehouseCode\" caption=\"Warehouse\" />\r\n              <Column dataField=\"UoMCode\" caption=\"Unit Of Measure\" />\r\n              <Column\r\n                dataField=\"Quantity\"\r\n                dataType=\"number\"\r\n                format=\"#,##0.00\"\r\n                caption=\"Quantity\"\r\n              />\r\n              <Column\r\n                dataField=\"UnitCost\"\r\n                dataType=\"number\"\r\n                format=\"#,##0.00\"\r\n              />\r\n\r\n              <Column\r\n                dataField=\"UnitPrice\"\r\n                dataType=\"number\"\r\n                format=\"#,##0.00\"\r\n              />\r\n              <Column\r\n                dataField=\"TotalAmountExclusive\"\r\n                dataType=\"number\"\r\n                format=\"#,##0.00\"\r\n              />\r\n              <Column\r\n                dataField=\"TotalCostExclusive\"\r\n                dataType=\"number\"\r\n                format=\"#,##0.00\"\r\n              />\r\n              <Column dataField=\"RequiredDate\" editorType=\"dxDateBox\" />\r\n              <Column dataField=\"IsReplacement\">\r\n                <Lookup items={trueFalse} valueExpr=\"ID\" displayExpr=\"Name\" />\r\n              </Column>\r\n              <Column dataField=\"Remark\" />\r\n            </DataGrid>\r\n          </Tab>\r\n          <Tab eventKey=\"Requestor\" title=\"Requestor\">\r\n            <Form formData={state.PurchaseRequisitionHeader}>\r\n              {/* ref={FormRef} */}\r\n              <GroupItem caption=\"Requestor Details\" colCount={2}>\r\n                <Item\r\n                  dataField=\"RequestorName\"\r\n                  editorOptions={{\r\n                    readOnly: true,\r\n                  }}\r\n                >\r\n                  {/* <RequiredRule message=\"Field required\" /> */}\r\n                  <Label text=\"Requestor Name\"></Label>\r\n                </Item>\r\n                <Item\r\n                  dataField=\"RequestorsDepartment\"\r\n                  editorType=\"dxSelectBox\"\r\n                  editorOptions={{\r\n                    dataSource: departmentDetails,\r\n                    valueExpr: \"DepartmentCode\",\r\n                    displayExpr: \"Discription\",\r\n                    readOnly: true,\r\n                  }}\r\n                >\r\n                  {/* <RequiredRule message=\"Field required\" /> */}\r\n                  <Label text=\"Requestor's Department\"></Label>\r\n                </Item>\r\n                <Item\r\n                  dataField=\"RequestorsBranch\"\r\n                  editorType=\"dxSelectBox\"\r\n                  editorOptions={{\r\n                    dataSource: branchDetails,\r\n                    valueExpr: \"BranchCode\",\r\n                    displayExpr: \"Discription\",\r\n                    readOnly: true,\r\n                  }}\r\n                >\r\n                  {/* <RequiredRule message=\"Field required\" /> */}\r\n                  <Label text=\"Requestor's Branch\"></Label>\r\n                </Item>\r\n                <Item\r\n                  dataField=\"RequestorEmail\"\r\n                  editorOptions={{\r\n                    readOnly: true,\r\n                  }}\r\n                >\r\n                  {/* <EmailRule message=\"Invalid email format\" /> */}\r\n                  <Label text=\"Requestor Email\"></Label>\r\n                </Item>\r\n                <Item\r\n                  dataField=\"Requestorcontanctno\"\r\n                  editorType=\"dxNumberBox\"\r\n                  editorOptions={{\r\n                    readOnly: true,\r\n                  }}\r\n                >\r\n                  <Label text=\"Requestor Contact No\"></Label>\r\n                </Item>\r\n                <Item dataField=\"OtherDetails\" editorType=\"dxTextArea\">\r\n                  <Label text=\"Other Details\"></Label>\r\n                </Item>\r\n              </GroupItem>\r\n            </Form>\r\n          </Tab>\r\n          <Tab eventKey=\"Attachments\" title=\"Attachments\">\r\n            <Form formData={attachLoad.AttachGroup}>\r\n              {/* ref={FormRef}  */}\r\n              <GroupItem caption=\"Attachments\">\r\n                <Item\r\n                  dataField=\"Attach\"\r\n                  editorType=\"dxCheckBox\"\r\n                  style={{ marginRight: \"10px\" }}\r\n                >\r\n                  <Label text=\"Attach\" />\r\n                </Item>\r\n\r\n                <Item>\r\n                  <br></br>\r\n                  <div>\r\n                    <input\r\n                      type=\"file\"\r\n                      name=\"file\"\r\n                      id=\"fileInput\"\r\n                      //accept=\".rpt\"\r\n                      onChange={(e) => FileSelect(e)}\r\n                    />\r\n                  </div>\r\n                  <br></br>\r\n                </Item>\r\n                {/* <Item>\r\n                  <FileUploader\r\n                    ref={fileUploaderRef}\r\n                    accept=\"*\"\r\n                    // uploadMode=\"instantly\"\r\n                    onValueChanged={onSelectedFilesChanged}\r\n                  />\r\n                </Item> */}\r\n                <Item dataField=\"Remarks\" editorType=\"dxTextArea\">\r\n                  <Label text=\"Remarks\"></Label>\r\n                </Item>\r\n              </GroupItem>\r\n            </Form>\r\n            <Navbar bg=\"light\" variant=\"light\">\r\n              <Button\r\n                variant=\"secondary\"\r\n                icon=\"feather icon-layers\"\r\n                onClick={onClickAddAttachments}\r\n                disabled={isAdd}\r\n              >\r\n                Add\r\n              </Button>\r\n            </Navbar>\r\n\r\n            <br />\r\n            <DataGrid\r\n              id=\"Items\"\r\n              allowColumnReordering={true}\r\n              showBorders={true}\r\n              dataSource={attachmentGrid.PurchaseRequisitionAttachmentsAddGrid}\r\n              columnAutoWidth={true}\r\n              hoverStateEnabled={true}\r\n              onCellDblClick={viewAttachment}\r\n            >\r\n              <Editing mode=\"row\" allowDeleting={true} />\r\n              <Column dataField=\"FileName\" />\r\n              <Column dataField=\"FilePath\" />\r\n              <Column dataField=\"FileUploadedUser\" />\r\n              <Column dataField=\"FileUploadedDate\" dataType=\"date\" />\r\n              <Column dataField=\"Attach\" editorType=\"dxCheckBox\" />\r\n              <Column dataField=\"Remarks\" />\r\n            </DataGrid>\r\n          </Tab>\r\n          <Tab eventKey=\"Notes\" title=\"Notes\">\r\n            <Form formData={state.PurchaseRequisitionHeader}>\r\n              {/* ref={FormRef} */}\r\n              <GroupItem caption=\"Notes\" colCount={2}>\r\n                <Item dataField=\"Note1\">\r\n                  <Label text=\"Note 1\"></Label>\r\n                </Item>\r\n                <Item dataField=\"Note2\">\r\n                  <Label text=\"Note 2\"></Label>\r\n                </Item>\r\n                <Item dataField=\"Note3\">\r\n                  <Label text=\"Note 3\"></Label>\r\n                </Item>\r\n                <Item dataField=\"Note4\">\r\n                  <Label text=\"Note 4\"></Label>\r\n                </Item>\r\n                <Item dataField=\"Note5\">\r\n                  <Label text=\"Note 5\"></Label>\r\n                </Item>\r\n              </GroupItem>\r\n            </Form>\r\n          </Tab>\r\n          <Tab eventKey=\"Approval\" title=\"Approve\">\r\n            <Form formData={state.PurchaseRequisitionHeader}>\r\n              {/* ref={FormRef} */}\r\n              <GroupItem caption=\"Approval Status\">\r\n                <Item\r\n                  dataField=\"ApproveStatus\"\r\n                  editorType=\"dxRadioGroup\"\r\n                  editorOptions={{\r\n                    items: state.Status,\r\n                    valueExpr: \"ID\",\r\n                    displayExpr: \"Name\",\r\n                    layout: \"horizontal\",\r\n                    value: radioValue,\r\n                    onValueChanged: (e) => setRadioValue(e.value),\r\n                    readOnly: approval,\r\n                  }}\r\n                >\r\n                  <Label text=\"Status\"></Label>\r\n                </Item>\r\n                <Item\r\n                  dataField=\"IsSapPost\"\r\n                  editorType=\"dxRadioGroup\"\r\n                  editorOptions={{\r\n                    items: state.sapPost,\r\n                    valueExpr: \"ID\",\r\n                    displayExpr: \"Name\",\r\n                    layout: \"horizontal\",\r\n                    readOnly: true,\r\n                  }}\r\n                >\r\n                  <Label text=\"SAP Post\"></Label>\r\n                </Item>\r\n              </GroupItem>\r\n              <GroupItem caption=\"Details\">\r\n                <Item\r\n                  dataField=\"ApproveLevel\"\r\n                  visible={radioValue === \"2\"}\r\n                  editorType=\"dxSelectBox\"\r\n                  editorOptions={{\r\n                    items: ApprovalLevel,\r\n                    valueExpr: \"ApprovalLevel\",\r\n                    displayExpr: \"ApprovalLevel\",\r\n                    onValueChanged: setAprovalName,\r\n                  }}\r\n                >\r\n                  <RequiredRule message=\"Field required\" />\r\n                  <Label text=\"Approval Level\"></Label>\r\n                </Item>\r\n\r\n                <Item dataField=\"Remark\" visible={radioValue !== \"2\"}>\r\n                  <Label text=\"Remarks\"></Label>\r\n                </Item>\r\n                <Item\r\n                  dataField=\"Date\"\r\n                  editorType=\"dxDateBox\"\r\n                  visible={radioValue !== \"2\"}\r\n                  editorOptions={{\r\n                    readOnly: true,\r\n                  }}\r\n                >\r\n                  <Label text=\"Date\"></Label>\r\n                </Item>\r\n                <Item\r\n                  dataField=\"PRUser\"\r\n                  visible={radioValue !== \"2\"}\r\n                  editorOptions={{\r\n                    readOnly: true,\r\n                  }}\r\n                >\r\n                  <Label text=\"User\"></Label>\r\n                </Item>\r\n                <Item\r\n                  dataField=\"ApprovalDescription\"\r\n                  visible={radioValue === \"2\"}\r\n                  editorOptions={{\r\n                    readOnly: true,\r\n                  }}\r\n                >\r\n                  <Label text=\"Approval Description\"></Label>\r\n                </Item>\r\n                <Item dataField=\"ApproveRemarks\" visible={radioValue === \"2\"}>\r\n                  <Label text=\"Approval Remarks\"></Label>\r\n                </Item>\r\n                <Item\r\n                  dataField=\"ApproveDate\"\r\n                  editorType=\"dxDateBox\"\r\n                  visible={radioValue === \"2\"}\r\n                  editorOptions={{\r\n                    readOnly: true,\r\n                  }}\r\n                >\r\n                  <Label text=\"Approval Date\"></Label>\r\n                </Item>\r\n                <Item\r\n                  dataField=\"ApproveUser\"\r\n                  visible={radioValue === \"2\"}\r\n                  editorOptions={{\r\n                    readOnly: true,\r\n                  }}\r\n                >\r\n                  <Label text=\"Approval User\"></Label>\r\n                </Item>\r\n              </GroupItem>\r\n              {/* )} */}\r\n            </Form>\r\n          </Tab>\r\n        </Tabs>\r\n      </Card>\r\n      <br />\r\n      <Card title=\"Summary\">\r\n        <Form formData={state.PurchaseRequisitionHeader}>\r\n          {/* ref={FormRef} */}\r\n          <GroupItem caption=\"Summary\" colCount={2}>\r\n            <Item\r\n              dataField=\"TotalAmount\"\r\n              editorType=\"dxNumberBox\"\r\n              editorOptions={{\r\n                maxLength: 50,\r\n                format: \"#,##0.00\",\r\n                readOnly: true,\r\n              }}\r\n              format=\"#,##0.00\"\r\n            >\r\n              <Label text=\"Total Amount\"></Label>\r\n            </Item>\r\n            <Item\r\n              dataField=\"TotalCost\"\r\n              editorType=\"dxNumberBox\"\r\n              editorOptions={{\r\n                readOnly: true,\r\n                format: \"#,##0.00\",\r\n              }}\r\n              format=\"#,##0.00\"\r\n            >\r\n              <Label text=\"Total Cost\"></Label>\r\n            </Item>\r\n          </GroupItem>\r\n        </Form>\r\n        <br />\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n          <Button\r\n            variant=\"secondary\"\r\n            icon=\"feather icon-layers\"\r\n            onClick={handleSave}\r\n            disabled={isAdd}\r\n          >\r\n            Save\r\n          </Button>\r\n          {/* <Button variant=\"secondary\" icon=\"feather icon-layers\">\r\n            Draft\r\n          </Button> */}\r\n          <Button\r\n            variant=\"secondary\"\r\n            icon=\"feather icon-layers\"\r\n            onClick={OnClickClear}\r\n            // disabled={isAdd}\r\n          >\r\n            Clear\r\n          </Button>\r\n        </Navbar>\r\n      </Card>\r\n      <Card title=\"PR List\">\r\n        <DataGrid\r\n          dataSource={prData}\r\n          showBorders={true}\r\n          wordWrapEnabled={true}\r\n          allowSearch={true}\r\n          selection={{ mode: \"single\" }}\r\n          hoverStateEnabled={true}\r\n          onCellDblClick={updatePRTable}\r\n          allowColumnResizing={true}\r\n          columnAutoWidth={true}\r\n        >\r\n          <SearchPanel visible={true} />\r\n          <Paging defaultPageSize={20} />\r\n          <Column dataField=\"PRHeaderID\" visible={false} />\r\n          <Column dataField=\"PRType\" caption=\"PR Type\">\r\n            <Lookup\r\n              items={PRType}\r\n              valueExpr=\"PRTypeCode\"\r\n              displayExpr=\"Discription\"\r\n            />\r\n          </Column>\r\n          <Column dataField=\"ItemCategory\" caption=\"Item Type\" />\r\n          <Column dataField=\"PRNumber\" caption=\"PR Number\" />\r\n          <Column\r\n            dataField=\"CreatedDate\"\r\n            editorType=\"dxDateBox\"\r\n            caption=\"Created Date\"\r\n            format=\"dd/MM/yyyy\"\r\n            customizeText={(cellInfo) => {\r\n              const date = new Date(cellInfo.value);\r\n              const formattedDate = `${date.getDate()}/${\r\n                date.getMonth() + 1\r\n              }/${date.getFullYear()}`;\r\n              return formattedDate;\r\n            }}\r\n          ></Column>\r\n          <Column\r\n            dataField=\"ExpectedDate\"\r\n            editorType=\"dxDateBox\"\r\n            caption=\"Created Date\"\r\n            format=\"dd/MM/yyyy\"\r\n            customizeText={(cellInfo) => {\r\n              const date = new Date(cellInfo.value);\r\n              const formattedDate = `${date.getDate()}/${\r\n                date.getMonth() + 1\r\n              }/${date.getFullYear()}`;\r\n              return formattedDate;\r\n            }}\r\n          ></Column>\r\n          <Column\r\n            dataField=\"ProcurementOfficer\"\r\n            caption=\"Procurement Officer\"\r\n          />\r\n          <Column dataField=\"FileNo\" caption=\"File No\" />\r\n          <Column dataField=\"LastFileName\" caption=\"File Name\" />\r\n          <Column dataField=\"ValidityStatus\" caption=\"Validity Status\">\r\n            <Lookup\r\n              items={newValidStatus.validStatus}\r\n              valueExpr=\"ID\"\r\n              displayExpr=\"Name\"\r\n            ></Lookup>\r\n          </Column>\r\n          <Column\r\n            dataField=\"ValidTo\"\r\n            editorType=\"dxDateBox\"\r\n            caption=\"Valid To\"\r\n            format=\"dd/MM/yyyy\"\r\n            customizeText={(cellInfo) => {\r\n              const date = new Date(cellInfo.value);\r\n              const formattedDate = `${date.getDate()}/${\r\n                date.getMonth() + 1\r\n              }/${date.getFullYear()}`;\r\n              return formattedDate;\r\n            }}\r\n          />\r\n          <Column dataField=\"RequestorName\" caption=\"Requestor Name\" />\r\n          <Column dataField=\"RequestorsBranch\" caption=\"Requestors Branch\">\r\n            <Lookup\r\n              items={branchDetails}\r\n              valueExpr=\"BranchCode\"\r\n              displayExpr=\"Discription\"\r\n            />\r\n          </Column>\r\n          <Column dataField=\"ApproveStatus\" caption=\"Approve Status\">\r\n            <Lookup\r\n              items={newApproveStatus.Status}\r\n              valueExpr=\"ID\"\r\n              displayExpr=\"Name\"\r\n            ></Lookup>\r\n          </Column>\r\n          <Column dataField=\"IsSapPost\" caption=\"SAP Post\">\r\n            <Lookup\r\n              items={isSapPost.Status}\r\n              valueExpr=\"ID\"\r\n              displayExpr=\"Name\"\r\n            ></Lookup>\r\n          </Column>\r\n          <Column dataField=\"ApproveLevel\" caption=\"Approve Level\" />\r\n          <Column\r\n            dataField=\"ApproveUser\"\r\n            caption=\"Approval status Change User\"\r\n          />\r\n          <Column\r\n            dataField=\"ApproveDate\"\r\n            editorType=\"dxDateBox\"\r\n            caption=\"Approve Date\"\r\n            format=\"dd/MM/yyyy\"\r\n            customizeText={(cellInfo) => {\r\n              const date = new Date(cellInfo.value);\r\n              const formattedDate = `${date.getDate()}/${\r\n                date.getMonth() + 1\r\n              }/${date.getFullYear()}`;\r\n              return formattedDate;\r\n            }}\r\n          />\r\n        </DataGrid>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PurchesRequest;\r\n"],"sourceRoot":""}