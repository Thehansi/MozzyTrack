{"version":3,"sources":["App/components/MainCard.js","Forms/Report/Report.jsx"],"names":["MainCard","state","isOption","props","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","this","className","alignRight","Toggle","id","Menu","as","Item","onClick","prevState","href","DEMO","BLANK_LINK","Header","Title","title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","in","Body","backgroundColor","children","Component","Report","useState","isProcurementOfficer","setIsProcurementOfficer","isUserName","setIsUserName","isItemCategory","setIsItemCategory","isApproveDate","setIsApproveDate","isApproveLevel","setIsApproveLevel","isRequestorsDepartment","setIsRequestorsDepartment","isDisable","setIsDisable","viewReport","setViewReport","emptyArray","userName","setUsername","itemCategory","setItemCategory","approveLevel","setApproveLevel","department","setDepartment","pmOfficerDetails","setPMOfficerDetails","reportType","setReportType","setError","columns","setColumns","isView","setIsView","jForm","reports","ID","ReportName","useEffect","fetchGroupDetails","authData","JSON","parse","localStorage","getItem","axios","get","params","UsersID","UserName","MenuID","checkAuthentication","console","log","data","length","UserView","all","then","spread","pmOfficer","approvalLevel","itemType","user","catch","error","OnNotification","message","type","notify","displayTime","at","offset","isValidation","NaN","undefined","ProcurementOfficer","ItemCategory","RequestorsDepartment","ApproveDate","ApproveLevel","formatDateMonth","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","allowColumnReordering","showBorders","dataSource","hoverStateEnabled","columnAutoWidth","onCellDblClick","e","row","enabled","mode","visible","dataField","formData","colCount","editorType","editorOptions","valueExpr","displayExpr","text","bg","variant","icon","response","Date","formattedDate","firstRow","dynamicColumns","Object","keys","map","key","value","dataType","isNaN","caption","disabled","wordWrapEnabled","onExporting","doc","jsPDF","orientation","unit","format","lastPoint","x","y","exportDataGrid","jsPDFDocument","component","topLeft","customDrawCell","rect","w","h","pageNumber","internal","getCurrentPageInfo","i","setPage","header","pageWidth","pageSize","getWidth","headerWidth","getTextDimensions","setFontSize","pdfBase64","output","window","open","document","write","formats","column"],"mappings":"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","file":"static/js/50.423087d4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Dropdown, Card, Collapse } from \"react-bootstrap\";\r\nimport windowSize from \"react-window-size\";\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\n{\r\n  /* <Card className=\"customCard\"></Card>\r\n\r\n.customCard: {\r\n    background: blue !important;\r\n} */\r\n}\r\nclass MainCard extends Component {\r\n  state = {\r\n    isOption: this.props.isOption,\r\n    fullCard: false,\r\n    collapseCard: false,\r\n    loadCard: false,\r\n    cardRemove: false,\r\n  };\r\n\r\n  cardReloadHandler = () => {\r\n    this.setState({ loadCard: true });\r\n    setInterval(() => {\r\n      this.setState({ loadCard: false });\r\n    }, 3000);\r\n  };\r\n\r\n  cardRemoveHandler = () => {\r\n    this.setState({ cardRemove: true });\r\n  };\r\n\r\n  render() {\r\n    let fullScreenStyle, loader, cardHeaderRight, cardHeader, cardColor;\r\n    let card = \"\";\r\n    let cardClass = [];\r\n\r\n    if (this.state.isOption) {\r\n      cardHeaderRight = (\r\n        <div className=\"card-header-right\">\r\n          <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n            <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n              <i className=\"feather icon-more-horizontal\" />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu as=\"ul\" className=\"list-unstyled card-option\">\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { fullCard: !prevState.fullCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.fullCard\r\n                      ? \"feather icon-minimize\"\r\n                      : \"feather icon-maximize\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.fullCard ? \"Restore\" : \"Maximize\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { collapseCard: !prevState.collapseCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.collapseCard\r\n                      ? \"feather icon-plus\"\r\n                      : \"feather icon-minus\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}>\r\n                  {\" \"}\r\n                  {this.state.collapseCard ? \"Expand\" : \"Collapse\"}{\" \"}\r\n                </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardReloadHandler}\r\n              >\r\n                <i className=\"feather icon-refresh-cw\" />\r\n                <a href={DEMO.BLANK_LINK}> Reload </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={this.cardRemoveHandler}\r\n              >\r\n                <i className=\"feather icon-trash\" />\r\n                <a href={DEMO.BLANK_LINK}> Remove </a>\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    cardHeader = (\r\n      <Card.Header>\r\n        <Card.Title as=\"h5\">{this.props.title}</Card.Title>\r\n        {cardHeaderRight}\r\n      </Card.Header>\r\n    );\r\n\r\n    if (this.state.fullCard) {\r\n      cardClass = [...cardClass, \"full-card\"];\r\n      fullScreenStyle = {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        width: this.props.windowWidth,\r\n        height: this.props.windowHeight,\r\n      };\r\n    }\r\n\r\n    if (this.state.loadCard) {\r\n      cardClass = [...cardClass, \"card-load\"];\r\n      loader = (\r\n        <div className=\"card-loader\">\r\n          <i className=\"pct-loader1 anim-rotate\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.cardRemove) {\r\n      cardClass = [...cardClass, \"d-none\"];\r\n    }\r\n\r\n    if (this.props.cardClass) {\r\n      cardClass = [...cardClass, this.props.cardClass];\r\n    }\r\n\r\n    card = (\r\n      <Card className={cardClass.join(\" \")} style={fullScreenStyle}>\r\n        {cardHeader}\r\n        <Collapse in={!this.state.collapseCard}>\r\n          <div>\r\n            <Card.Body style={{ backgroundColor: \"rgb(185, 210, 214)\" }}>\r\n              {this.props.children}\r\n            </Card.Body>\r\n          </div>\r\n        </Collapse>\r\n        {loader}\r\n      </Card>\r\n    );\r\n\r\n    return <Aux>{card}</Aux>;\r\n  }\r\n}\r\n\r\nexport default MainCard;\r\n","import React, { Component, useState, useRef, useEffect } from \"react\";\r\nimport { jsPDF } from \"jspdf\";\r\n// import CrystalReportViewer from \"some-crystal-reports-viewer-component\";\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport Form, {\r\n  Item,\r\n  Label,\r\n  RequiredRule,\r\n  Tab,\r\n  GroupItem,\r\n} from \"devextreme-react/form\";\r\nimport Card from \"../../App/components/MainCard\";\r\nimport { Button, Navbar, Tabs } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\nimport DataGrid, {\r\n  Column,\r\n  Editing,\r\n  Popup,\r\n  Lookup,\r\n  Paging,\r\n  SearchPanel,\r\n  Export,\r\n} from \"devextreme-react/data-grid\";\r\nimport axios from \"axios\";\r\nimport notify from \"devextreme/ui/notify\";\r\nimport { LoadPanel } from \"devextreme-react/load-panel\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Workbook } from \"exceljs\";\r\nimport saveAs from \"file-saver\";\r\nimport { exportDataGrid } from \"devextreme/pdf_exporter\";\r\n\r\nconst Report = () => {\r\n  const [isProcurementOfficer, setIsProcurementOfficer] = useState(false);\r\n  const [isUserName, setIsUserName] = useState(false);\r\n  const [isItemCategory, setIsItemCategory] = useState(false);\r\n  const [isApproveDate, setIsApproveDate] = useState(false);\r\n  const [isApproveLevel, setIsApproveLevel] = useState(false);\r\n  const [isRequestorsDepartment, setIsRequestorsDepartment] = useState(false);\r\n  const [isDisable, setIsDisable] = useState(true);\r\n\r\n  const [viewReport, setViewReport] = useState([]);\r\n  const [emptyArray, setEmptyArray] = useState([]);\r\n  const [userName, setUsername] = useState([]);\r\n  const [itemCategory, setItemCategory] = useState([]);\r\n  // const [requestorsDepartment, setRequestorsDepartment] = useState([]);\r\n  const [approveLevel, setApproveLevel] = useState([]);\r\n  const [department, setDepartment] = useState([]);\r\n  const [pmOfficerDetails, setPMOfficerDetails] = useState([]);\r\n\r\n  const [reportType, setReportType] = useState(-1);\r\n  const [reportData, setReportData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [pdfUrl, setPdfUrl] = useState(\"\");\r\n  const [columns, setColumns] = useState([]);\r\n  const [isView, setIsView] = useState(true);\r\n\r\n  const gdpFormat = {\r\n    type: \"percent\",\r\n    precision: 1,\r\n  };\r\n  const exportFormats = [\"pdf\"];\r\n  const [userAuthentication, setUserAuthentication] = useState({});\r\n  const [pdfDataUrl, setPdfDataUrl] = useState(null);\r\n  const [state, setState] = useState({\r\n    jForm: {},\r\n  });\r\n  const reports = [\r\n    {\r\n      ID: 0,\r\n      ReportName:\r\n        \"Purchase Requisition Creator User-wise/ Purchase Requisition Assigned User wise\",\r\n    },\r\n    { ID: 1, ReportName: \"Purchase Requisition Category wise\" },\r\n    { ID: 2, ReportName: \"Purchase Requisition Department wise\" },\r\n    { ID: 3, ReportName: \"Purchase Requisition Approval level Time\" },\r\n    { ID: 4, ReportName: \"Purchase Requisition Pending Approval Level wise\" },\r\n    { ID: 5, ReportName: \"Purchase Requisition Creator User-wise\" },\r\n  ];\r\n  useEffect(() => {\r\n    fetchGroupDetails();\r\n  }, []);\r\n  const fetchGroupDetails = async () => {\r\n    const authData = JSON.parse(localStorage.getItem(\"user\"));\r\n    const checkAuthentication = await axios.get(\r\n      \"/api/CheckUserAuthentication\",\r\n      {\r\n        params: { UsersID: authData.UserName, MenuID: 1201 },\r\n      }\r\n    );\r\n    console.log(\"checkAuthentication\", checkAuthentication.data[0]);\r\n    if (checkAuthentication.data.length != 0) {\r\n      if (checkAuthentication.data[0].UserView) {\r\n        console.log(\"AWA\");\r\n        setIsView(false);\r\n        try {\r\n          axios\r\n            .all([\r\n              axios.get(\"/api/getPMOfficer\"),\r\n              axios.get(\"/api/getDepartment\"),\r\n              axios.get(\"/api/getApprovalLevel\"),\r\n              axios.get(\"/api/getItemType\"),\r\n              axios.get(\"/api/getUser\"),\r\n            ])\r\n            .then(\r\n              axios.spread(\r\n                async (\r\n                  pmOfficer,\r\n                  department,\r\n                  approvalLevel,\r\n                  itemType,\r\n                  user\r\n                ) => {\r\n                  if (pmOfficer.data.length != 0) {\r\n                    setPMOfficerDetails(pmOfficer.data);\r\n                  }\r\n                  if (department.data.length != 0) {\r\n                    setDepartment(department.data);\r\n                  }\r\n                  if (approvalLevel.data.length != 0) {\r\n                    setApproveLevel(approvalLevel.data);\r\n                  }\r\n                  if (itemType.data.length != 0) {\r\n                    setItemCategory(itemType.data);\r\n                  }\r\n                  if (user.data.length != 0) {\r\n                    setUsername(user.data);\r\n                  }\r\n                }\r\n              )\r\n            )\r\n            .catch((error) => console.error(error));\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  // const CreateDateTime = (dateTime) => {\r\n  //   const year = dateTime.getFullYear();\r\n  //   const month = (dateTime.getMonth() + 1).toString().padStart(2, \"0\");\r\n  //   const date = dateTime.getDate().toString().padStart(2, \"0\");\r\n  //   const hours = dateTime.getHours().toString().padStart(2, \"0\");\r\n  //   const minutes = dateTime.getMinutes().toString().padStart(2, \"0\");\r\n  //   const formattedDateTime = `${year}.${month}.${date}.${hours}:${minutes}`;\r\n  //   console.log(formattedDateTime);\r\n  //   return formattedDateTime;\r\n  // };\r\n  const updateTable = (e) => {\r\n    if (!isView) {\r\n      if (e.row.data.ID == 0) {\r\n        // setState((state.jForm = {}));\r\n        setIsRequestorsDepartment(false);\r\n        setIsUserName(true);\r\n        setIsProcurementOfficer(true);\r\n        setIsApproveDate(false);\r\n        setIsItemCategory(false);\r\n        setIsApproveLevel(false);\r\n        setIsDisable(false);\r\n        setReportType(0);\r\n        setViewReport(null);\r\n        setState((prevState) => ({\r\n          jForm: {\r\n            ...prevState.jForm,\r\n            ItemCategory: null,\r\n            RequestorsDepartment: null,\r\n            ApproveLevel: null,\r\n            ApproveDate: null,\r\n          },\r\n        }));\r\n      } else if (e.row.data.ID == 1) {\r\n        // setState((state.jForm = {}));\r\n        setIsRequestorsDepartment(false);\r\n        setIsUserName(false);\r\n        setIsProcurementOfficer(false);\r\n        setIsApproveDate(false);\r\n        setIsItemCategory(true);\r\n        setIsApproveLevel(false);\r\n        setIsDisable(false);\r\n        setReportType(1);\r\n        setViewReport(null);\r\n        setState((prevState) => ({\r\n          jForm: {\r\n            ...prevState.jForm,\r\n            RequestorsDepartment: null,\r\n            ApproveLevel: null,\r\n            ApproveDate: null,\r\n            ProcurementOfficer: null,\r\n            UserName: null,\r\n          },\r\n        }));\r\n      } else if (e.row.data.ID == 2) {\r\n        setIsRequestorsDepartment(true);\r\n        setIsUserName(false);\r\n        setIsProcurementOfficer(false);\r\n        setIsApproveDate(false);\r\n        setIsItemCategory(false);\r\n        setIsApproveLevel(false);\r\n        setIsDisable(false);\r\n        setReportType(2);\r\n        setViewReport(null);\r\n        setState((prevState) => ({\r\n          jForm: {\r\n            ...prevState.jForm,\r\n            ItemCategory: null,\r\n            ApproveLevel: null,\r\n            ApproveDate: null,\r\n            ProcurementOfficer: null,\r\n            UserName: null,\r\n          },\r\n        }));\r\n      } else if (e.row.data.ID == 3) {\r\n        setIsRequestorsDepartment(false);\r\n        setIsUserName(false);\r\n        setIsProcurementOfficer(false);\r\n        setIsApproveDate(true);\r\n        setIsItemCategory(false);\r\n        setIsApproveLevel(false);\r\n        setIsDisable(false);\r\n        setReportType(3);\r\n        setViewReport([]);\r\n        setState((prevState) => ({\r\n          jForm: {\r\n            ...prevState.jForm,\r\n            ItemCategory: null,\r\n            RequestorsDepartment: null,\r\n            ApproveLevel: null,\r\n            ProcurementOfficer: null,\r\n            UserName: null,\r\n          },\r\n        }));\r\n      } else if (e.row.data.ID == 4) {\r\n        setIsRequestorsDepartment(false);\r\n        setIsUserName(false);\r\n        setIsProcurementOfficer(false);\r\n        setIsApproveDate(false);\r\n        setIsItemCategory(false);\r\n        setIsApproveLevel(true);\r\n        setIsDisable(false);\r\n        setReportType(4);\r\n        setViewReport(emptyArray);\r\n        setState((prevState) => ({\r\n          jForm: {\r\n            ...prevState.jForm,\r\n            ItemCategory: null,\r\n            RequestorsDepartment: null,\r\n            ApproveDate: null,\r\n            ProcurementOfficer: null,\r\n            UserName: null,\r\n          },\r\n        }));\r\n      } else if (e.row.data.ID == 5) {\r\n        setIsRequestorsDepartment(false);\r\n        setIsUserName(true);\r\n        setIsProcurementOfficer(false);\r\n        setIsApproveDate(false);\r\n        setIsItemCategory(false);\r\n        setIsApproveLevel(false);\r\n        setIsDisable(false);\r\n        setReportType(5);\r\n        setViewReport(emptyArray);\r\n        setState((prevState) => ({\r\n          jForm: {\r\n            ...prevState.jForm,\r\n            ItemCategory: null,\r\n            RequestorsDepartment: null,\r\n            ApproveLevel: null,\r\n            ApproveDate: null,\r\n            ProcurementOfficer: null,\r\n          },\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const OnNotification = (message, type) => {\r\n    notify({\r\n      message: message,\r\n      type: type,\r\n      displayTime: 3000,\r\n      position: { at: \"top right\", offset: \"50\" },\r\n    });\r\n  };\r\n\r\n  const isValidation = () => {\r\n    if (reportType == 0) {\r\n      if (\r\n        state.jForm.UserName == \"\" ||\r\n        state.jForm.UserName == NaN ||\r\n        state.jForm.UserName == undefined\r\n      ) {\r\n        OnNotification(\"User Name is Required\", \"error\");\r\n        return false;\r\n      } else if (\r\n        state.jForm.ProcurementOfficer == \"\" ||\r\n        state.jForm.ProcurementOfficer == NaN ||\r\n        state.jForm.ProcurementOfficer == undefined\r\n      ) {\r\n        OnNotification(\"Procurement Officer is Required\", \"error\");\r\n        return false;\r\n      }\r\n      return true;\r\n    } else if (reportType == 1) {\r\n      if (\r\n        state.jForm.ItemCategory == \"\" ||\r\n        state.jForm.ItemCategory == NaN ||\r\n        state.jForm.ItemCategory == undefined\r\n      ) {\r\n        OnNotification(\"Item Category is Required\", \"error\");\r\n        return false;\r\n      }\r\n      return true;\r\n    } else if (reportType == 2) {\r\n      if (\r\n        state.jForm.RequestorsDepartment == \"\" ||\r\n        state.jForm.RequestorsDepartment == NaN ||\r\n        state.jForm.RequestorsDepartment == undefined\r\n      ) {\r\n        OnNotification(\"Requestors Department is Required\", \"error\");\r\n        return false;\r\n      }\r\n      return true;\r\n    } else if (reportType == 3) {\r\n      if (\r\n        state.jForm.ApproveDate == \"\" ||\r\n        state.jForm.ApproveDate == NaN ||\r\n        state.jForm.ApproveDate == undefined\r\n      ) {\r\n        OnNotification(\"Approve Date is Required\", \"error\");\r\n        return false;\r\n      }\r\n      return true;\r\n    } else if (reportType == 4) {\r\n      if (\r\n        state.jForm.ApproveLevel == \"\" ||\r\n        state.jForm.ApproveLevel == NaN ||\r\n        state.jForm.ApproveLevel == undefined\r\n      ) {\r\n        OnNotification(\"Approve Level is Required\", \"error\");\r\n        return false;\r\n      }\r\n      return true;\r\n    } else if (reportType == 5) {\r\n      if (\r\n        state.jForm.UserName == \"\" ||\r\n        state.jForm.UserName == NaN ||\r\n        state.jForm.UserName == undefined\r\n      ) {\r\n        OnNotification(\"User Name is Required\", \"error\");\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const formatDateMonth = (date) => {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n    return `${month}/${day}/${year}`;\r\n  };\r\n\r\n  const handleSave = async (e) => {\r\n    console.log(\"e\", state.jForm);\r\n    if (await isValidation()) {\r\n      try {\r\n        let response = \"\";\r\n        if (reportType == 0) {\r\n          response = await axios.get(\"/api/UserPMWise\", {\r\n            params: {\r\n              UserName: state.jForm.UserName,\r\n              ProcurementOfficer: state.jForm.ProcurementOfficer,\r\n            },\r\n          });\r\n        } else if (reportType == 1) {\r\n          response = await axios.get(\"/api/CategoryWise\", {\r\n            params: {\r\n              ItemCategory: state.jForm.ItemCategory,\r\n            },\r\n          });\r\n        } else if (reportType == 2) {\r\n          response = await axios.get(\"/api/DepartmentWise\", {\r\n            params: {\r\n              RequestorsDepartment: state.jForm.RequestorsDepartment,\r\n            },\r\n          });\r\n        } else if (reportType == 3) {\r\n          const formattedDate = await formatDateMonth(\r\n            new Date(state.jForm.ApproveDate)\r\n          );\r\n          console.log(\"formattedDate\", formattedDate);\r\n          response = await axios.get(\"/api/ApprovallevelTimeWise\", {\r\n            params: {\r\n              ApproveDate: formattedDate,\r\n            },\r\n          });\r\n        } else if (reportType == 4) {\r\n          response = await axios.get(\"/api/PendingApprovalLevelWise\", {\r\n            params: {\r\n              ApproveLevel: state.jForm.ApproveLevel,\r\n            },\r\n          });\r\n        } else if (reportType == 5) {\r\n          response = await axios.get(\"/api/UserWise\", {\r\n            params: {\r\n              UserName: state.jForm.UserName,\r\n            },\r\n          });\r\n        }\r\n        console.log(\"res Data\", response.data);\r\n        setViewReport(response.data);\r\n        console.log(\"res Data\", response.data.length);\r\n        if (response.data.length > 0) {\r\n          const firstRow = response.data[0];\r\n          const dynamicColumns = Object.keys(firstRow).map((key) => {\r\n            const value = firstRow[key];\r\n            let dataType = \"string\";\r\n\r\n            console.log(\"key\", key);\r\n            console.log(\"value\", value);\r\n\r\n            if (\r\n              typeof value === \"string\" &&\r\n              isNaN(value) &&\r\n              !isNaN(Date.parse(value))\r\n            ) {\r\n              dataType = \"date\";\r\n            }\r\n\r\n            return {\r\n              dataField: key,\r\n              caption: key, //.replace(/([A-Z])/g, \" $1\").trim()\r\n              dataType,\r\n            };\r\n\r\n            // const isDate = isNaN(Date.parse(firstRow[key])) ? false : true;\r\n            // console.log(\"key\", key);\r\n            // console.log(\"date\", isDate);\r\n            // console.log(\"caption\", key.replace(/([A-Z])/g, \" $1\").trim());\r\n            // return {\r\n            //   dataField: key,\r\n            //   caption: key, //key.replace(/([A-Z])/g, \" $1\").trim()\r\n            //   dataType: isDate ? \"date\" : \"string\",\r\n            // };\r\n          });\r\n          setColumns(dynamicColumns);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching report data:\", error);\r\n        setError(\"Error fetching report data. Please try again later.\");\r\n      }\r\n\r\n      // try {\r\n      //   const response = await axios.get(\"/api/reports\", {\r\n      //     responseType: \"blob\",\r\n      //   });\r\n      //   console.log(\"response API\", response.data);\r\n      //   // const data = response.data;\r\n      //   const pdfBlob = new Blob([response.data], { type: \"application/pdf\" });\r\n      //   const url = URL.createObjectURL(pdfBlob);\r\n      //   setPdfUrl(url);\r\n      //   // setReportData(data);\r\n      // } catch (error) {\r\n      //   console.error(\"Error fetching report data:\", error);\r\n      //   setError(\"Error fetching report data. Please try again later.\");\r\n      // }\r\n      // console.log(\"AWA\", e);\r\n      // let parameter1 = \"PBSS\";\r\n      // let parameter2 = \"Chn\";\r\n      // let reportName = \"Purchase Requisition Creator User-wise.rpt\";\r\n      // const reportPath = \"Z:LH-ReportPurchase Requisition Creator User-wise.rpt\";\r\n      // // const parameters = `parameter1=${parameter1}&parameter2=${parameter2}`;\r\n      // const parameter = `parameter=${parameter1}`;\r\n      // window.open(\r\n      //   `${window[\"Config\"].ReportURL}?f=${reportPath}${reportName}&${parameter}`,\r\n      //   \"_blank\"\r\n      // );\r\n    }\r\n  };\r\n  //   <CrystalReportViewer\r\n  //   reportPath=\"Z:\\LH-Report\\Purchase Requisition Category wise.rpy\"\r\n  //   // Additional props or configuration for the viewer component\r\n  // />;\r\n\r\n  const onExporting = (e) => {\r\n    // const doc = new jsPDF();\r\n    const doc = new jsPDF({\r\n      orientation: \"landscape\",\r\n      unit: \"mm\",\r\n      format: [420, 297],\r\n    });\r\n    const lastPoint = { x: 0, y: 0 };\r\n\r\n    exportDataGrid({\r\n      jsPDFDocument: doc,\r\n      component: e.component,\r\n      topLeft: { x: 1, y: 25 },\r\n      // columnWidths: [\r\n      //   30, 20, 30, 15, 22, 22, 20, 20, 30, 20, 30, 15, 22, 22, 20, 20, 20,\r\n      // ],\r\n      customDrawCell({ rect }) {\r\n        if (lastPoint.x < rect.x + rect.w) {\r\n          lastPoint.x = rect.x + rect.w;\r\n        }\r\n        if (lastPoint.y < rect.y + rect.h) {\r\n          lastPoint.y = rect.y + rect.h;\r\n        }\r\n      },\r\n    }).then(() => {\r\n      const pageNumber = doc.internal.getCurrentPageInfo().pageNumber;\r\n\r\n      for (let i = 1; i <= pageNumber; i++) {\r\n        doc.setPage(i);\r\n        const header = `${reports[reportType].ReportName} Report - (Page ${i} of ${pageNumber})`; //\r\n        const pageWidth = doc.internal.pageSize.getWidth();\r\n        const headerWidth = doc.getTextDimensions(header).w;\r\n        doc.setFontSize(15);\r\n        doc.text(header, (pageWidth - headerWidth) / 2, 5);\r\n      }\r\n\r\n      const pdfBase64 = doc.output(\"datauristring\");\r\n      const pdfWindow = window.open();\r\n      pdfWindow.document.write(\r\n        '<iframe src=\"' +\r\n          pdfBase64 +\r\n          '\" width=\"100%\" height=\"100%\" style=\"border:none;\"></iframe>'\r\n      );\r\n      // footer\r\n      // const footer = \"www.wikipedia.org\";\r\n      // const footerWidth = doc.getTextDimensions(footer).w;\r\n\r\n      // doc.setFontSize(9);\r\n      // doc.setTextColor(\"#cccccc\");\r\n      // doc.text(footer, lastPoint.x - footerWidth, lastPoint.y + 5);\r\n\r\n      // doc.save(\"Companies.pdf\");\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card title=\"Reports List\">\r\n        <DataGrid\r\n          allowColumnReordering={true}\r\n          showBorders={true}\r\n          dataSource={reports}\r\n          hoverStateEnabled={true}\r\n          columnAutoWidth={true}\r\n          onCellDblClick={updateTable}\r\n        >\r\n          <Paging enabled={true} />\r\n          <Editing mode=\"row\" />\r\n          <SearchPanel visible={true} />\r\n          <Column dataField=\"ID\" visible={false} />\r\n          <Column dataField=\"ReportName\" />\r\n        </DataGrid>\r\n      </Card>\r\n      <Card title=\"Parameters\">\r\n        <Form formData={state.jForm}>\r\n          <GroupItem colCount={2}>\r\n            <Item\r\n              dataField=\"ProcurementOfficer\"\r\n              visible={isProcurementOfficer}\r\n              editorType=\"dxSelectBox\"\r\n              editorOptions={{\r\n                dataSource: pmOfficerDetails,\r\n                valueExpr: \"OfficerID\",\r\n                displayExpr: \"OfficerID\",\r\n              }}\r\n            >\r\n              <RequiredRule />\r\n              <Label text=\"Procurement Officer\"></Label>\r\n            </Item>\r\n            <Item\r\n              dataField=\"UserName\"\r\n              visible={isUserName}\r\n              editorType=\"dxSelectBox\"\r\n              editorOptions={{\r\n                dataSource: userName,\r\n                valueExpr: \"UserName\",\r\n                displayExpr: \"UserName\",\r\n              }}\r\n            >\r\n              <RequiredRule message=\"Field required\" />\r\n              <Label text=\"User Name\"></Label>\r\n            </Item>\r\n            <Item\r\n              dataField=\"ItemCategory\"\r\n              visible={isItemCategory}\r\n              editorType=\"dxSelectBox\"\r\n              editorOptions={{\r\n                dataSource: itemCategory,\r\n                valueExpr: \"FldValue\",\r\n                displayExpr: \"FldValue\",\r\n              }}\r\n            >\r\n              <Label text=\"Item Category\"></Label>\r\n            </Item>\r\n            <Item\r\n              dataField=\"RequestorsDepartment\"\r\n              visible={isRequestorsDepartment}\r\n              editorType=\"dxSelectBox\"\r\n              editorOptions={{\r\n                dataSource: department,\r\n                valueExpr: \"DepartmentCode\",\r\n                displayExpr: \"Discription\",\r\n              }}\r\n            >\r\n              <RequiredRule />\r\n              <Label text=\"Requestors Department\"></Label>\r\n            </Item>\r\n            <Item\r\n              dataField=\"ApproveDate\"\r\n              visible={isApproveDate}\r\n              editorType=\"dxDateBox\"\r\n            >\r\n              <RequiredRule />\r\n              <Label text=\"Approve Date\"></Label>\r\n            </Item>\r\n            <Item\r\n              dataField=\"ApproveLevel\"\r\n              visible={isApproveLevel}\r\n              editorType=\"dxSelectBox\"\r\n              editorOptions={{\r\n                dataSource: approveLevel,\r\n                valueExpr: \"ApprovalLevel\",\r\n                displayExpr: \"ApprovalLevel\",\r\n              }}\r\n            >\r\n              <RequiredRule />\r\n              <Label text=\"Approve Level\"></Label>\r\n            </Item>\r\n          </GroupItem>\r\n        </Form>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n          <Button\r\n            variant=\"secondary\"\r\n            icon=\"feather icon-layers\"\r\n            onClick={handleSave}\r\n            disabled={isDisable}\r\n          >\r\n            View Report\r\n          </Button>\r\n        </Navbar>\r\n      </Card>\r\n\r\n      <Card title=\"Report Form\">\r\n        <DataGrid\r\n          dataSource={viewReport}\r\n          showBorders={true}\r\n          hoverStateEnabled={true}\r\n          columnAutoWidth={true}\r\n          wordWrapEnabled={true}\r\n          onExporting={onExporting}\r\n          // focusedRowEnabled={true}\r\n        >\r\n          <Paging enabled={true} />\r\n          <Editing mode=\"row\" />\r\n          <Export enabled={true} formats={exportFormats} />\r\n          <SearchPanel visible={true} />\r\n          {columns.map((column) => (\r\n            <Column key={column.dataField} {...column} />\r\n          ))}\r\n        </DataGrid>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Report;\r\n"],"sourceRoot":""}